###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                14/Jan/2014  11:35:57 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\ZMain\TI2530DB\OnBoard.c              #
#    Command line       =  -f E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14 #
#                          ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁ #
#                          ªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0          #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\ZMain\TI2530DB\OnBoard.c -D           #
#                          ZIGBEEPRO -D HAL_UART=TRUE -D SERIAL_APP_PORT=0    #
#                          -D LCD_SUPPORTED -D SOFT_START=TRUE -D             #
#                          HOLD_AUTO_START=TRUE -lC                           #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\Coordina #
#                          torEB-Pro\List\ -lA E:\ShengLi\01-Farsight\10-ÎïÁª #
#                          ÍøÊ¦×Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²â #
#                          ÊÔ\31_»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Utilities\SerialA #
#                          pp\CC2530DB\CoordinatorEB-Pro\List\                #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\Coordina #
#                          torEB-Pro\Obj\ -e --require_prototypes --debug     #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\ShengLi\01-Farsight\10- #
#                          ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´ #
#                          Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Utilities\Ser #
#                          ialApp\CC2530DB\ -I E:\ShengLi\01-Farsight\10-ÎïÁª #
#                          ÍøÊ¦×Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²â #
#                          ÊÔ\31_»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Utilities\SerialA #
#                          pp\CC2530DB\..\SOURCE\ -I                          #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \ZMAIN\TI2530DB\ -I E:\ShengLi\01-Farsight\10-ÎïÁª #
#                          ÍøÊ¦×Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²â #
#                          ÊÔ\31_»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Utilities\SerialA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I       #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\HAL\INCLUDE\ -I                  #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I          #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I               #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\OSAL\INCLUDE\ -I                 #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\AF\ -I                     #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\NWK\ -I                    #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SEC\ -I                    #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SAPI\ -I                   #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SYS\ -I                    #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\ZDO\ -I                    #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\ZMAC\F8W\ -I                     #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\ZMAC\ -I                         #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\SERVICES\SADDR\ -I               #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\SERVICES\SDATA\ -I               #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\INCLUDE\ -I                  #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I               #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I          #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ #
#                           -I E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C1 #
#                          4ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎï #
#                          ÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\u #
#                          sr_code\include\ -I "D:\Program Files\IAR          #
#                          Systems\Embedded Workbench 5.3\8051\INC\" -I       #
#                          "D:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3\8051\INC\CLIB\" -Ohz                           #
#    List file          =  E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\Coordina #
#                          torEB-Pro\List\OnBoard.lst                         #
#    Object file        =  E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\Coordina #
#                          torEB-Pro\Obj\OnBoard.r51                          #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ZMain\TI2530DB\OnBoard.c
      1          /**************************************************************************************************
      2            Filename:       OnBoard.c
      3            Revised:        $Date: 2009-12-16 17:44:49 -0800 (Wed, 16 Dec 2009) $
      4            Revision:       $Revision: 21351 $
      5          
      6            Description:    This file contains the UI and control for the
      7                            peripherals on the EVAL development board
      8            Notes:          This file targets the Chipcon CC2530
      9          
     10          
     11            Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     48          #include "OSAL.h"
     49          #include "MT.h"
     50          #include "MT_SYS.h"
     51          #include "DebugTrace.h"
     52          
     53          /* Hal */
     54          #include "hal_lcd.h"
     55          #include "hal_mcu.h"
     56          #include "hal_timer.h"
     57          #include "hal_key.h"
     58          #include "hal_led.h"
     59          
     60          /* Allow access macRandomByte() */
     61          #include "mac_radio_defs.h"
     62          
     63          /*********************************************************************
     64           * MACROS
     65           */
     66          
     67          /*********************************************************************
     68           * CONSTANTS
     69           */
     70          
     71          // Task ID not initialized
     72          #define NO_TASK_ID 0xFF
     73          
     74          // Minimum length RAM "pattern" for Stack check
     75          #define MIN_RAM_INIT 12
     76          
     77          /*********************************************************************
     78           * TYPEDEFS
     79           */
     80          
     81          /*********************************************************************
     82           * GLOBAL VARIABLES
     83           */
     84          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          uint8 OnboardKeyIntEnable;
   \                     OnboardKeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     86          
     87          #if defined MAKE_CRC_SHDW
     88          #pragma location="CRC_SHDW"
     89          const CODE uint16 _crcShdw = 0xFFFF;
     90          #pragma required=_crcShdw
     91          #endif
     92          
     93          // 64-bit Extended Address of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint8 aExtendedAddress[8];
   \                     aExtendedAddress:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
     95          
     96          extern prcess_key2(void);
     97          
     98          /*********************************************************************
     99           * EXTERNAL VARIABLES
    100           */
    101          
    102          /*********************************************************************
    103           * EXTERNAL FUNCTIONS
    104           */
    105          
    106          /*********************************************************************
    107           * LOCAL VARIABLES
    108           */
    109          
    110          // Registered keys task ID, initialized to NOT USED.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    111          static uint8 registeredKeysTaskID = NO_TASK_ID;
   \                     registeredKeysTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for registeredKeysTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    112          
    113          
    114          /*********************************************************************
    115           * LOCAL FUNCTIONS
    116           */
    117          
    118          static void ChkReset( void );
    119          
    120          /*********************************************************************
    121           * @fn      InitBoard()
    122           * @brief   Initialize the CC2420DB Board Peripherals
    123           * @param   level: COLD,WARM,READY
    124           * @return  None
    125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    126          void InitBoard( uint8 level )
   \                     InitBoard:
    127          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    128            if ( level == OB_COLD )
   \   000005   E9           MOV     A,R1
   \   000006   7053         JNZ     ??InitBoard_0
    129            {
    130              // Interrupts off
    131              osal_int_disable( INTS_ALL );
   \   000008                ; Setup parameters for call to function osal_int_disable
   \   000008   79FF         MOV     R1,#-0x1
   \   00000A   12....       LCALL   ??osal_int_disable?relay
    132              // Turn all LEDs off
    133              HalLedSet( HAL_LED_ALL, HAL_LED_MODE_OFF );
   \   00000D                ; Setup parameters for call to function HalLedSet
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   790F         MOV     R1,#0xf
   \   000011   12....       LCALL   ??HalLedSet?relay
    134              // Check for Brown-Out reset
    135              ChkReset();
   \   000014   7418         MOV     A,#0x18
   \   000016   559D         ANL     A,0x9d
   \   000018   FA           MOV     R2,A
   \   000019   604E         JZ      ??InitBoard_1
   \   00001B   7408         MOV     A,#0x8
   \   00001D   6A           XRL     A,R2
   \   00001E   6049         JZ      ??InitBoard_1
   \   000020   7410         MOV     A,#0x10
   \   000022   6A           XRL     A,R2
   \   000023   6044         JZ      ??InitBoard_1
   \   000025   C2AF         CLR     0xa8.7
   \                     ??InitBoard_2:
   \   000027   7E08         MOV     R6,#0x8
   \                     ??InitBoard_3:
   \   000029                ; Setup parameters for call to function HalLedSet
   \   000029   7A01         MOV     R2,#0x1
   \   00002B   EE           MOV     A,R6
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??HalLedSet?relay
   \   000030                ; Setup parameters for call to function Onboard_wait
   \   000030   7A24         MOV     R2,#0x24
   \   000032   7BF4         MOV     R3,#-0xc
   \   000034   12....       LCALL   ??Onboard_wait?relay
   \   000037                ; Setup parameters for call to function Onboard_wait
   \   000037   7A24         MOV     R2,#0x24
   \   000039   7BF4         MOV     R3,#-0xc
   \   00003B   12....       LCALL   ??Onboard_wait?relay
   \   00003E                ; Setup parameters for call to function HalLedSet
   \   00003E   7A00         MOV     R2,#0x0
   \   000040   EE           MOV     A,R6
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??HalLedSet?relay
   \   000045                ; Setup parameters for call to function Onboard_wait
   \   000045   7A7C         MOV     R2,#0x7c
   \   000047   7B92         MOV     R3,#-0x6e
   \   000049   12....       LCALL   ??Onboard_wait?relay
   \   00004C                ; Setup parameters for call to function Onboard_wait
   \   00004C   7A7C         MOV     R2,#0x7c
   \   00004E   7B92         MOV     R3,#-0x6e
   \   000050   12....       LCALL   ??Onboard_wait?relay
   \   000053   EE           MOV     A,R6
   \   000054   C3           CLR     C
   \   000055   13           RRC     A
   \   000056   FE           MOV     R6,A
   \   000057   70D0         JNZ     ??InitBoard_3
   \   000059   80CC         SJMP    ??InitBoard_2
    136            }
    137            else  // !OB_COLD
    138            {
    139              /* Initialize Key stuff */
    140              //OnboardKeyIntEnable = HAL_KEY_INTERRUPT_DISABLE;  //modify by jacky
    141              OnboardKeyIntEnable = HAL_KEY_INTERRUPT_ENABLE; //enable the interrupt
   \                     ??InitBoard_0:
   \   00005B   7401         MOV     A,#0x1
   \   00005D   90....       MOV     DPTR,#OnboardKeyIntEnable
   \   000060   F0           MOVX    @DPTR,A
    142              HalKeyConfig( OnboardKeyIntEnable, OnBoard_KeyCallback);
   \   000061                ; Setup parameters for call to function HalKeyConfig
   \   000061   7A..         MOV     R2,#(??OnBoard_KeyCallback?relay & 0xff)
   \   000063   7B..         MOV     R3,#((??OnBoard_KeyCallback?relay >> 8) & 0xff)
   \   000065   F9           MOV     R1,A
   \   000066   12....       LCALL   ??HalKeyConfig?relay
    143            }
    144          }
   \                     ??InitBoard_1:
   \   000069                REQUIRE ?Subroutine0
   \   000069                REQUIRE SLEEPSTA
   \   000069                REQUIRE _A_IEN0
   \   000069                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    145          
    146          /*********************************************************************
    147           * @fn      ChkReset()
    148           * @brief   Check reset bits - if reset cause is unknown, assume a
    149           *          brown-out (low power), assume batteries are not reliable,
    150           *          hang in a loop and sequence through the LEDs.
    151           * @param   None
    152           * @return  None
    153           *********************************************************************/
    154          void ChkReset( void )
    155          {
    156            uint8 led;
    157            uint8 rib;
    158          
    159            // Isolate reset indicator bits
    160            rib = SLEEPSTA & LRESET;
    161          
    162            if ( rib == RESETPO )
    163            {
    164              // Put code here to handle Power-On reset
    165            }
    166            else if ( rib == RESETEX )
    167            {
    168              // Put code here to handle External reset
    169            }
    170            else if ( rib == RESETWD )
    171            {
    172              // Put code here to handle WatchDog reset
    173            }
    174            else
    175            {  
    176              // Unknown, hang and blink
    177              HAL_DISABLE_INTERRUPTS();
    178              led = HAL_LED_4;
    179              while ( 1 ) {
    180                HalLedSet( led, HAL_LED_MODE_ON );
    181                MicroWait( 62500 );
    182                MicroWait( 62500 );
    183                HalLedSet( led, HAL_LED_MODE_OFF );
    184                MicroWait( 37500 );
    185                MicroWait( 37500 );
    186                if ( !(led >>= 1) )
    187                  led = HAL_LED_4;
    188              }
    189            }
    190          }
    191          
    192          /*********************************************************************
    193           *                        "Keyboard" Support
    194           *********************************************************************/
    195          
    196          /*********************************************************************
    197           * Keyboard Register function
    198           *
    199           * The keyboard handler is setup to send all keyboard changes to
    200           * one task (if a task is registered).
    201           *
    202           * If a task registers, it will get all the keys. You can change this
    203           * to register for individual keys.
    204           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    205          uint8 RegisterForKeys( uint8 task_id )
   \                     RegisterForKeys:
    206          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    207            // Allow only the first task
    208            if ( registeredKeysTaskID == NO_TASK_ID )
   \   000004   90....       MOV     DPTR,#registeredKeysTaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64FF         XRL     A,#0xff
   \   00000A   7006         JNZ     ??RegisterForKeys_0
    209            {
    210              registeredKeysTaskID = task_id;
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
    211              return ( true );
   \   00000E   7901         MOV     R1,#0x1
   \   000010   8002         SJMP    ??RegisterForKeys_1
    212            }
    213            else
    214              return ( false );
   \                     ??RegisterForKeys_0:
   \   000012   7900         MOV     R1,#0x0
   \                     ??RegisterForKeys_1:
   \   000014                REQUIRE ?Subroutine1
   \   000014                ; // Fall through to label ?Subroutine1
    215          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    216          
    217          /*********************************************************************
    218           * @fn      OnBoard_SendKeys
    219           *
    220           * @brief   Send "Key Pressed" message to application.
    221           *
    222           * @param   keys  - keys that were pressed
    223           *          state - shifted
    224           *
    225           * @return  status
    226           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
   \                     OnBoard_SendKeys:
    228          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    229            keyChange_t *msgPtr;
    230          
    231            if ( registeredKeysTaskID != NO_TASK_ID )
   \   000009   90....       MOV     DPTR,#registeredKeysTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   64FF         XRL     A,#0xff
   \   00000F   602D         JZ      ??OnBoard_SendKeys_0
    232            {
    233              // Send the address to the task
    234              msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   7A04         MOV     R2,#0x4
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   ??osal_msg_allocate?relay
    235              if ( msgPtr )
   \   000018   EA           MOV     A,R2
   \   000019   7001         JNZ     ??OnBoard_SendKeys_1
   \   00001B   EB           MOV     A,R3
   \                     ??OnBoard_SendKeys_1:
   \   00001C   601C         JZ      ??OnBoard_SendKeys_2
    236              {
    237                msgPtr->hdr.event = KEY_CHANGE;
   \   00001E   74C0         MOV     A,#-0x40
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   F0           MOVX    @DPTR,A
    238                msgPtr->state = state;
   \   000025   EF           MOV     A,R7
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
    239                msgPtr->keys = keys;
   \   000029   EE           MOV     A,R6
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   F0           MOVX    @DPTR,A
    240          
    241                osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
   \   000032                ; Setup parameters for call to function osal_msg_send
   \   000032   90....       MOV     DPTR,#registeredKeysTaskID
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   12....       LCALL   ??osal_msg_send?relay
    242              }
    243              return ( ZSuccess );
   \                     ??OnBoard_SendKeys_2:
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   8002         SJMP    ??OnBoard_SendKeys_3
    244            }
    245            else
    246              return ( ZFailure );
   \                     ??OnBoard_SendKeys_0:
   \   00003E   7901         MOV     R1,#0x1
   \                     ??OnBoard_SendKeys_3:
   \   000040   7F02         MOV     R7,#0x2
   \   000042   02....       LJMP    ?BANKED_LEAVE_XDATA
    247          }
    248          
    249          /*********************************************************************
    250           * @fn      OnBoard_KeyCallback
    251           *
    252           * @brief   Callback service for keys
    253           *
    254           * @param   keys  - keys that were pressed
    255           *          state - shifted
    256           *
    257           * @return  void
    258           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    259          void OnBoard_KeyCallback ( uint8 keys, uint8 state )
   \                     OnBoard_KeyCallback:
    260          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    261            uint8 shift;
    262            (void)state;
    263          
    264            /* Get shift key status */
    265            shift = ((keys & HAL_KEY_SW_6) ? true : false);
    266            
    267            if(keys & HAL_KEY2_SELECT)
   \   000007   A2E7         MOV     C,0xE0 /* A   */.7
   \   000009   5003         JNC     ??OnBoard_KeyCallback_0
    268            {
    269                
    270              prcess_key2();
   \   00000B                ; Setup parameters for call to function prcess_key2
   \   00000B   12....       LCALL   ??prcess_key2?relay
    271            }
    272          
    273            if ( OnBoard_SendKeys( keys, shift ) != ZSuccess )
   \                     ??OnBoard_KeyCallback_0:
   \   00000E                ; Setup parameters for call to function OnBoard_SendKeys
   \   00000E   EE           MOV     A,R6
   \   00000F   A2E5         MOV     C,0xE0 /* A   */.5
   \   000011   E4           CLR     A
   \   000012   92E0         MOV     0xE0 /* A   */.0,C
   \   000014   FA           MOV     R2,A
   \   000015   EE           MOV     A,R6
   \   000016   F9           MOV     R1,A
   \   000017   12....       LCALL   ??OnBoard_SendKeys?relay
    274            {
    275              // Process SW1 here
    276              if ( keys & HAL_KEY_SW_1 )  // Switch 1
    277              {
    278              }
    279              // Process SW2 here
    280              if ( keys & HAL_KEY_SW_2 )  // Switch 2
    281              {
    282              }
    283              // Process SW3 here
    284              if ( keys & HAL_KEY_SW_3 )  // Switch 3
    285              {
    286              }
    287              // Process SW4 here
    288              if ( keys & HAL_KEY_SW_4 )  // Switch 4
    289              {
    290              }
    291              // Process SW5 here
    292              if ( keys & HAL_KEY_SW_5 )  // Switch 5
    293              {
    294              }
    295              // Process SW6 here
    296              if ( keys & HAL_KEY_SW_6 )  // Switch 6
    297              {
    298              }
    299            }
    300          }
   \   00001A   02....       LJMP    ?Subroutine0 & 0xFFFF
    301          
    302          /*********************************************************************
    303           * @fn      OnBoard_stack_used
    304           *
    305           * @brief   Runs through the stack looking for touched memory.
    306           *
    307           * @param   none
    308           *
    309           * @return  Maximum number of bytes used by the stack.
    310           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    311          uint16 OnBoard_stack_used(void)
   \                     OnBoard_stack_used:
    312          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    313            uint8 const *ptr;
    314            uint8 cnt = 0;
   \   000004   7A00         MOV     R2,#0x0
    315          
    316            for (ptr = XSTACK_END; ptr > XSTACK_BEG; ptr--)
   \   000006   7582..       MOV     DPL,#((SFE(XSTACK) + 255) & 0xff)
   \   000009   7583..       MOV     DPH,#(((SFE(XSTACK) - 1) >> 8) & 0xff)
   \   00000C   800E         SJMP    ??OnBoard_stack_used_0
    317            {
    318              if (STACK_INIT_VALUE == *ptr)
    319              {
    320                if (++cnt >= MIN_RAM_INIT)
    321                {
    322                  ptr += MIN_RAM_INIT;
    323                  break;
    324                }
    325              }
    326              else
    327              {
    328                cnt = 0;
   \                     ??OnBoard_stack_used_1:
   \   00000E   7A00         MOV     R2,#0x0
    329              }
   \                     ??OnBoard_stack_used_2:
   \   000010   E582         MOV     A,DPL
   \   000012   24FF         ADD     A,#-0x1
   \   000014   F582         MOV     DPL,A
   \   000016   E583         MOV     A,DPH
   \   000018   34FF         ADDC    A,#-0x1
   \   00001A   F583         MOV     DPH,A
   \                     ??OnBoard_stack_used_0:
   \   00001C   C3           CLR     C
   \   00001D   74..         MOV     A,#(SFB(XSTACK) & 0xff)
   \   00001F   9582         SUBB    A,DPL
   \   000021   74..         MOV     A,#((SFB(XSTACK) >> 8) & 0xff)
   \   000023   9583         SUBB    A,DPH
   \   000025   5018         JNC     ??OnBoard_stack_used_3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   64CD         XRL     A,#0xcd
   \   00002A   70E2         JNZ     ??OnBoard_stack_used_1
   \   00002C   0A           INC     R2
   \   00002D   EA           MOV     A,R2
   \   00002E   C3           CLR     C
   \   00002F   940C         SUBB    A,#0xc
   \   000031   40DD         JC      ??OnBoard_stack_used_2
   \   000033   E582         MOV     A,DPL
   \   000035   240C         ADD     A,#0xc
   \   000037   F582         MOV     DPL,A
   \   000039   E583         MOV     A,DPH
   \   00003B   3400         ADDC    A,#0x0
   \   00003D   F583         MOV     DPH,A
    330            }
    331          
    332            return (uint16)(XSTACK_END - ptr + 1);
   \                     ??OnBoard_stack_used_3:
   \   00003F   74..         MOV     A,#((SFE(XSTACK) + 255) & 0xff)
   \   000041   C3           CLR     C
   \   000042   9582         SUBB    A,DPL
   \   000044   F8           MOV     R0,A
   \   000045   74..         MOV     A,#(((SFE(XSTACK) - 1) >> 8) & 0xff)
   \   000047   9583         SUBB    A,DPH
   \   000049   F9           MOV     R1,A
   \   00004A   7401         MOV     A,#0x1
   \   00004C   28           ADD     A,R0
   \   00004D   FA           MOV     R2,A
   \   00004E   E4           CLR     A
   \   00004F   39           ADDC    A,R1
   \   000050   FB           MOV     R3,A
   \   000051   02....       LJMP    ?Subroutine1 & 0xFFFF
    333          }
    334          
    335          /*********************************************************************
    336           * @fn      _itoa
    337           *
    338           * @brief   convert a 16bit number to ASCII
    339           *
    340           * @param   num -
    341           *          buf -
    342           *          radix -
    343           *
    344           * @return  void
    345           *
    346           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          void _itoa(uint16 num, uint8 *buf, uint8 radix)
   \                     _itoa:
    348          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
    349            char c,i;
    350            uint8 *p, rst[5];
    351          
    352            p = rst;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   AC82         MOV     R4,DPL
   \   00001A   AD83         MOV     R5,DPH
    353            for ( i=0; i<5; i++,p++ )
   \   00001C   75..00       MOV     ?V0 + 4,#0x0
   \   00001F   8982         MOV     DPL,R1
   \   000021   8582..       MOV     ?V0 + 2,DPL
    354            {
    355              c = num % radix;  // Isolate a digit
   \                     ??_itoa_0:
   \   000024   EE           MOV     A,R6
   \   000025   F8           MOV     R0,A
   \   000026   EF           MOV     A,R7
   \   000027   F9           MOV     R1,A
   \   000028   AA..         MOV     R2,?V0 + 2
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   ?US_DIV_MOD
   \   00002F   EA           MOV     A,R2
    356              *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
   \   000030   940A         SUBB    A,#0xa
   \   000032   5004         JNC     ??_itoa_1
   \   000034   7830         MOV     R0,#0x30
   \   000036   8002         SJMP    ??_itoa_2
   \                     ??_itoa_1:
   \   000038   7837         MOV     R0,#0x37
   \                     ??_itoa_2:
   \   00003A   E8           MOV     A,R0
   \   00003B   2A           ADD     A,R2
   \   00003C   8C82         MOV     DPL,R4
   \   00003E   8D83         MOV     DPH,R5
   \   000040   F0           MOVX    @DPTR,A
    357              num /= radix;
   \   000041   EE           MOV     A,R6
   \   000042   F8           MOV     R0,A
   \   000043   EF           MOV     A,R7
   \   000044   F9           MOV     R1,A
   \   000045   AA..         MOV     R2,?V0 + 2
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ?US_DIV_MOD
   \   00004C   88..         MOV     ?V0 + 6,R0
   \   00004E   89..         MOV     ?V0 + 7,R1
   \   000050   AE..         MOV     R6,?V0 + 6
   \   000052   AF..         MOV     R7,?V0 + 7
    358              if ( !num )
   \   000054   EE           MOV     A,R6
   \   000055   7001         JNZ     ??_itoa_3
   \   000057   EF           MOV     A,R7
   \                     ??_itoa_3:
   \   000058   600D         JZ      ??_itoa_4
    359                break;
    360            }
   \   00005A   05..         INC     ?V0 + 4
   \   00005C   A3           INC     DPTR
   \   00005D   AC82         MOV     R4,DPL
   \   00005F   AD83         MOV     R5,DPH
   \   000061   E5..         MOV     A,?V0 + 4
   \   000063   9405         SUBB    A,#0x5
   \   000065   40BD         JC      ??_itoa_0
    361          
    362            for ( c=0 ; c<=i; c++ )
   \                     ??_itoa_4:
   \   000067   7A00         MOV     R2,#0x0
    363              *buf++ = *p--;  // Reverse character order
   \                     ??_itoa_5:
   \   000069   8C82         MOV     DPL,R4
   \   00006B   8D83         MOV     DPH,R5
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   85..82       MOV     DPL,?V0 + 0
   \   000071   85..83       MOV     DPH,?V0 + 1
   \   000074   F0           MOVX    @DPTR,A
   \   000075   EC           MOV     A,R4
   \   000076   24FF         ADD     A,#-0x1
   \   000078   1C           DEC     R4
   \   000079   ED           MOV     A,R5
   \   00007A   34FF         ADDC    A,#-0x1
   \   00007C   FD           MOV     R5,A
   \   00007D   A3           INC     DPTR
   \   00007E   8582..       MOV     ?V0 + 0,DPL
   \   000081   8583..       MOV     ?V0 + 1,DPH
   \   000084   0A           INC     R2
   \   000085   E5..         MOV     A,?V0 + 4
   \   000087   C3           CLR     C
   \   000088   9A           SUBB    A,R2
   \   000089   50DE         JNC     ??_itoa_5
    364          
    365            *buf = '\0';
   \   00008B   E4           CLR     A
   \   00008C   F0           MOVX    @DPTR,A
    366          }
   \   00008D   7405         MOV     A,#0x5
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000092   7F08         MOV     R7,#0x8
   \   000094   02....       LJMP    ?BANKED_LEAVE_XDATA
    367          
    368          /*********************************************************************
    369           * @fn        Onboard_rand
    370           *
    371           * @brief    Random number generator
    372           *
    373           * @param   none
    374           *
    375           * @return  uint16 - new random number
    376           *
    377           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    378          uint16 Onboard_rand( void )
   \                     Onboard_rand:
    379          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    380            return ( MAC_RADIO_RANDOM_WORD() );
   \   000004                ; Setup parameters for call to function macMcuRandomWord
   \   000004   12....       LCALL   ??macMcuRandomWord?relay
   \   000007   02....       LJMP    ?Subroutine1 & 0xFFFF
    381          }
    382          
    383          /*********************************************************************
    384           * @fn        Onboard_wait
    385           *
    386           * @brief    Delay wait
    387           *
    388           * @param   uint16 - time to wait
    389           *
    390           * @return  none
    391           *
    392           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          void Onboard_wait( uint16 timeout )
   \                     Onboard_wait:
    394          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8003         SJMP    ??Onboard_wait_0
    395            while (timeout--)
    396            {
    397              asm("NOP");
   \                     ??Onboard_wait_1:
   \   000002   00           NOP
    398              asm("NOP");
   \   000003   00           NOP
    399              asm("NOP");
   \   000004   00           NOP
    400            }
   \                     ??Onboard_wait_0:
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   28           ADD     A,R0
   \   00000C   1A           DEC     R2
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   39           ADDC    A,R1
   \   000010   FB           MOV     R3,A
   \   000011   E8           MOV     A,R0
   \   000012   7001         JNZ     ??Onboard_wait_2
   \   000014   E9           MOV     A,R1
   \                     ??Onboard_wait_2:
   \   000015   70EB         JNZ     ??Onboard_wait_1
    401          }
   \   000017   02....       LJMP    ?BRET
    402          
    403          /*********************************************************************
    404           *                    EXTERNAL I/O FUNCTIONS
    405           *
    406           * User defined functions to control external devices. Add your code
    407           * to the following functions to control devices wired to DB outputs.
    408           *
    409           *********************************************************************/
    410          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          void BigLight_On( void )
   \                     BigLight_On:
    412          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    413            // Put code here to turn on an external light
    414          }
   \   000000   02....       LJMP    ?BRET
    415          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    416          void BigLight_Off( void )
   \                     BigLight_Off:
    417          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    418            // Put code here to turn off an external light
    419          }
   \   000000   02....       LJMP    ?BRET
    420          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    421          void BuzzerControl( uint8 on )
   \                     BuzzerControl:
    422          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    423            // Put code here to turn a buzzer on/off
    424            (void)on;
    425          }
   \   000000   02....       LJMP    ?BRET
    426          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    427          void Dimmer( uint8 lvl )
   \                     Dimmer:
    428          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    429            // Put code here to control a dimmer
    430            (void)lvl;
    431          }
   \   000000   02....       LJMP    ?BRET
    432          
    433          // No dip switches on this board

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    434          uint8 GetUserDipSw( void )
   \                     GetUserDipSw:
    435          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    436            return 0;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
    437          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for registeredKeysTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??InitBoard?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBoard

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??RegisterForKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RegisterForKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_SendKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_SendKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_KeyCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_KeyCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_stack_used?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_stack_used

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_itoa?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _itoa

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Onboard_rand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_rand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Onboard_wait?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_wait

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BigLight_On?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_On

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BigLight_Off?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_Off

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BuzzerControl?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BuzzerControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Dimmer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Dimmer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetUserDipSw?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetUserDipSw
    438          
    439          /*********************************************************************
    440          *********************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     BigLight_Off               0      0      0
     BigLight_On                0      0      0
     BuzzerControl              0      0      0
     Dimmer                     0      0      0
     GetUserDipSw               0      0      0
     InitBoard                  0      0      9
       -> osal_int_disable      0      0     18
       -> HalLedSet             0      0     18
       -> HalLedSet             0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18
       -> HalLedSet             0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18
       -> HalKeyConfig          0      0     18
     OnBoard_KeyCallback        0      0      9
       -> prcess_key2           0      0     18
       -> OnBoard_SendKeys      0      0     18
     OnBoard_SendKeys           1      0     19
       -> osal_msg_allocate     0      0     20
       -> osal_msg_send         0      0     20
     OnBoard_stack_used         2      0      0
     Onboard_rand               2      0      0
       -> macMcuRandomWord      4      0      0
     Onboard_wait               0      0      9
     RegisterForKeys            2      0      0
     _itoa                      1      0     21


   Segment part sizes:

     Function/Label                          Bytes
     --------------                          -----
     SLEEPSTA                                   1
     _A_IEN0                                    1
     OnboardKeyIntEnable                        1
     aExtendedAddress                           8
     registeredKeysTaskID                       1
     InitBoard                                105
     ?Subroutine0                               5
     RegisterForKeys                           20
     ?Subroutine1                               7
     OnBoard_SendKeys                          69
     OnBoard_KeyCallback                       29
     OnBoard_stack_used                        84
     _itoa                                    151
     Onboard_rand                              10
     Onboard_wait                              26
     BigLight_On                                3
     BigLight_Off                               3
     BuzzerControl                              3
     Dimmer                                     3
     GetUserDipSw                               5
     ?<Initializer for registeredKeysTaskID>    1
     ??InitBoard?relay                          6
     ??RegisterForKeys?relay                    6
     ??OnBoard_SendKeys?relay                   6
     ??OnBoard_KeyCallback?relay                6
     ??OnBoard_stack_used?relay                 6
     ??_itoa?relay                              6
     ??Onboard_rand?relay                       6
     ??Onboard_wait?relay                       6
     ??BigLight_On?relay                        6
     ??BigLight_Off?relay                       6
     ??BuzzerControl?relay                      6
     ??Dimmer?relay                             6
     ??GetUserDipSw?relay                       6

 
 523 bytes in segment BANKED_CODE
  78 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
   9 bytes in segment XDATA_Z
 
 602 bytes of CODE  memory
   0 bytes of DATA  memory (+ 2 bytes shared)
  10 bytes of XDATA memory

Errors: none
Warnings: none
