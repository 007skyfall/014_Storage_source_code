///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               14/Jan/2014  11:35:57 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\Source\Serial /
//                          App.c                                             /
//    Command line       =  -f E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C1 /
//                          4ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎ /
//                          ïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Utilities\SerialApp\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ   /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f   /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0     /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\ShengLi\01-Farsight\10- /
//                          ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô /
//                          ´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZSt /
//                          ack-CC2530-2.3.0-1.4.0\Projects\zstack\Utilities\ /
//                          SerialApp\Source\SerialApp.c -D ZIGBEEPRO -D      /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D             /
//                          LCD_SUPPORTED -D SOFT_START=TRUE -D               /
//                          HOLD_AUTO_START=TRUE -lC                          /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\Coor /
//                          dinatorEB-Pro\List\ -lA                           /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\Coor /
//                          dinatorEB-Pro\List\ --diag_suppress Pe001,Pa010   /
//                          -o E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C1 /
//                          4ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎ /
//                          ïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Utilities\SerialApp\CC2530DB\C /
//                          oordinatorEB-Pro\Obj\ -e --require_prototypes     /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C1 /
//                          4ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎ /
//                          ïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Utilities\SerialApp\CC2530DB\  /
//                          -I E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C1 /
//                          4ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎ /
//                          ïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Utilities\SerialApp\CC2530DB\. /
//                          .\SOURCE\ -I E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê /
//                          °à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31 /
//                          _»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Utilities\SerialApp\ /
//                          CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I              /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\MT\ -I                      /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\HAL\INCLUDE\ -I             /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I     /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I          /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I            /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\STACK\AF\ -I                /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\STACK\NWK\ -I               /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\STACK\SEC\ -I               /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\STACK\SAPI\ -I              /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\STACK\SYS\ -I               /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\STACK\ZDO\ -I               /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\ZMAC\F8W\ -I                /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\ZMAC\ -I                    /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\SERVICES\SADDR\ -I          /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\SERVICES\SDATA\ -I          /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\MAC\INCLUDE\ -I             /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I          /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I     /
//                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_ /
//                          CHIP\ -I E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\F /
//                          S_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓ /
//                          ÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3 /
//                          .0-1.4.0\Projects\zstack\Utilities\SerialApp\CC25 /
//                          30DB\..\usr_code\include\ -I "D:\Program          /
//                          Files\IAR Systems\Embedded Workbench              /
//                          5.3\8051\INC\" -I "D:\Program Files\IAR           /
//                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14Îï /
//                          ÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁª /
//                          Íø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\Coor /
//                          dinatorEB-Pro\List\SerialApp.s51                  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SerialApp

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??SerialApp_CallBack?relay
        EXTERN ??SerialApp_ProcessZDOMsgs?relay
        EXTERN ??SerialApp_Send?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??SerialApp_CallBack?relay,0203H
        PUBLIC ??SerialApp_Init?relay
        FUNCTION ??SerialApp_Init?relay,0203H
        PUBLIC ??SerialApp_ProcessEvent?relay
        FUNCTION ??SerialApp_ProcessEvent?relay,0203H
        FUNCTION ??SerialApp_ProcessZDOMsgs?relay,0203H
        FUNCTION ??SerialApp_Send?relay,0203H
        PUBLIC ??Timer_ledProcess?relay
        FUNCTION ??Timer_ledProcess?relay,0203H
        PUBLIC ??Timer_led_Init?relay
        FUNCTION ??Timer_led_Init?relay,0203H
        PUBLIC ??prcess_key2?relay
        FUNCTION ??prcess_key2?relay,0203H
        PUBLIC AddGroup
        PUBLIC AddID
        PUBLIC Led_TaskID
        FUNCTION SerialApp_CallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC SerialApp_ClusterList
        PUBLIC SerialApp_Init
        FUNCTION SerialApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC SerialApp_ProcessEvent
        FUNCTION SerialApp_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        FUNCTION SerialApp_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION SerialApp_Send,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SerialApp_SimpleDesc
        PUBLIC SerialApp_TaskID
        PUBLIC SerialApp_TxAddr
        PUBLIC SerialApp_epDesc
        PUBLIC SerialNwkState
        PUBLIC Timer_ledProcess
        FUNCTION Timer_ledProcess,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Timer_led_Init
        FUNCTION Timer_led_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK _A_P1
        PUBLIC bind_cfg_flag
        PUBLIC flag
        PUBLIC prcess_key2
        FUNCTION prcess_key2,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC time_err
        PUBLIC time_ok
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_start_timerEx  SYMBOL "osal_start_timerEx"
HalUARTWrite        SYMBOL "HalUARTWrite"
ZDOInitDevice       SYMBOL "ZDOInitDevice"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
afSetMatch          SYMBOL "afSetMatch"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_memcpy         SYMBOL "osal_memcpy"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_set_event      SYMBOL "osal_set_event"
HalLedSet           SYMBOL "HalLedSet"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
osal_mem_free       SYMBOL "osal_mem_free"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
HalUARTRead         SYMBOL "HalUARTRead"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDOInitDevice?relay SYMBOL "?relay", ZDOInitDevice
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
??afRegister?relay  SYMBOL "?relay", afRegister
??afSetMatch?relay  SYMBOL "?relay", afSetMatch
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
SerialApp_Init      SYMBOL "SerialApp_Init"
??SerialApp_Init?relay SYMBOL "?relay", SerialApp_Init
SerialApp_ProcessEvent SYMBOL "SerialApp_ProcessEvent"
??SerialApp_ProcessEvent?relay SYMBOL "?relay", SerialApp_ProcessEvent
Timer_ledProcess    SYMBOL "Timer_ledProcess"
??Timer_ledProcess?relay SYMBOL "?relay", Timer_ledProcess
Timer_led_Init      SYMBOL "Timer_led_Init"
??Timer_led_Init?relay SYMBOL "?relay", Timer_led_Init
prcess_key2         SYMBOL "prcess_key2"
??prcess_key2?relay SYMBOL "?relay", prcess_key2

        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDevice
        FUNCTION ZDOInitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDOInitDevice?relay
        FUNCTION ??ZDOInitDevice?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??afSetMatch?relay
        FUNCTION ??afSetMatch?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN zgDeviceLogicalType

// E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SerialApp.c
//    3   Revised:        $Date: 2009-03-29 10:51:47 -0700 (Sun, 29 Mar 2009) $
//    4   Revision:       $Revision: 19585 $
//    5 
//    6   Description -   Serial Transfer Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com. 
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This sample application is basically a cable replacement
//   42   and it should be customized for your application. A PC
//   43   (or other device) sends data via the serial port to this
//   44   application's device.  This device transmits the message
//   45   to another device with the same application running. The
//   46   other device receives the over-the-air message and sends
//   47   it to a PC (or other device) connected to its serial port.
//   48 				
//   49   This application doesn't have a profile, so it handles everything directly.
//   50 
//   51   Key control:
//   52     SW1:
//   53     SW2:  initiates end device binding
//   54     SW3:
//   55     SW4:  initiates a match description request
//   56 *********************************************************************/
//   57 
//   58 /*********************************************************************
//   59  * INCLUDES
//   60  */
//   61 #include "ZComDef.h"
//   62 #include "AddrMgr.h"
//   63 #include "OSAL.h"
//   64 #include "OSAL_Nv.h"
//   65 #include "MT.h"
//   66 #include "MT_SAPI.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1
//   67 #include "MT_UART.h"
//   68 #include "AF.h"
//   69 #include "OnBoard.h"
//   70 #include "OSAL_Tasks.h"
//   71 #include "SerialApp.h"
//   72 #include "ZDApp.h"
//   73 #include "ZDObject.h"
//   74 #include "ZDProfile.h"
//   75 
//   76 #include "hal_drivers.h"
//   77 #include "hal_key.h"
//   78 #if defined ( LCD_SUPPORTED )
//   79   #include "hal_lcd.h"
//   80 #endif
//   81 #include "hal_led.h"
//   82 #include "hal_uart.h"
//   83 
//   84 /*********************************************************************
//   85  * MACROS
//   86  */
//   87 
//   88 /*****************************************************************
//   89 *
//   90 ***************App parameters added by jacky*********************/
//   91 #define MAX_ENDPOINTKIND 10
//   92 #define MAX_NUMBER       10
//   93 
//   94 
//   95 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   96 uint8 AddID;
AddID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   97 devStates_t SerialNwkState;
SerialNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   98 volatile uint16 AddGroup[MAX_ENDPOINTKIND][MAX_NUMBER];
AddGroup:
        DS 200
        REQUIRE __INIT_XDATA_Z
//   99 
//  100 
//  101 
//  102 
//  103 /****************************************************************/
//  104 
//  105 
//  106 
//  107 /*********************************************************************
//  108  * CONSTANTS
//  109  */
//  110 #if !defined( SERIAL_APP_PORT )
//  111 #define SERIAL_APP_PORT  0
//  112 #endif
//  113 
//  114 #if !defined( SERIAL_APP_BAUD )
//  115 //#define SERIAL_APP_BAUD  HAL_UART_BR_38400
//  116 #define SERIAL_APP_BAUD  HAL_UART_BR_115200
//  117 #endif
//  118 
//  119 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//  120 #if !defined( SERIAL_APP_THRESH )
//  121 #define SERIAL_APP_THRESH  64
//  122 #endif
//  123 
//  124 #if !defined( SERIAL_APP_RX_SZ )
//  125 #define SERIAL_APP_RX_SZ  128
//  126 #endif
//  127 
//  128 #if !defined( SERIAL_APP_TX_SZ )
//  129 #define SERIAL_APP_TX_SZ  128
//  130 #endif
//  131 
//  132 // Millisecs of idle time after a byte is received before invoking Rx callback.
//  133 #if !defined( SERIAL_APP_IDLE )
//  134 #define SERIAL_APP_IDLE  6
//  135 #endif
//  136 
//  137 // Loopback Rx bytes to Tx for throughput testing.
//  138 #if !defined( SERIAL_APP_LOOPBACK )
//  139 #define SERIAL_APP_LOOPBACK  FALSE
//  140 #endif
//  141 
//  142 // This is the max byte count per OTA message.
//  143 #if !defined( SERIAL_APP_TX_MAX )
//  144 #define SERIAL_APP_TX_MAX  80
//  145 #endif
//  146 
//  147 #define SERIAL_APP_RSP_CNT  4
//  148 
//  149 
//  150 #define KEY2_PRESS_EVENT 0x1111
//  151 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  152 uint8 *time_ok = "time start ok";
time_ok:
        DS 2
        REQUIRE `?<Initializer for time_ok>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  153 uint8 *time_err = "time not start";
time_err:
        DS 2
        REQUIRE `?<Initializer for time_err>`
        REQUIRE __INIT_XDATA_I
//  154 void prcess_key2(void);
//  155 
//  156 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  157 const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
SerialApp_ClusterList:
        DW 1, 2
//  158 {
//  159   SERIALAPP_CLUSTERID1,
//  160   SERIALAPP_CLUSTERID2
//  161 };
//  162 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  163 const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
SerialApp_SimpleDesc:
        DB 11
        DW 3845, 1
        DB 0, 2
        DW SerialApp_ClusterList
        DB 2
        DW SerialApp_ClusterList
//  164 {
//  165   SERIALAPP_ENDPOINT,              //  int   Endpoint;
//  166   SERIALAPP_PROFID,                //  uint16 AppProfId[2];
//  167   SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  168   SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  169   SERIALAPP_FLAGS,                 //  int   AppFlags:4;
//  170   SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  171   (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;
//  172   SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
//  173   (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;
//  174 };
//  175 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  176 const endPointDesc_t SerialApp_epDesc =
SerialApp_epDesc:
        DB 11
        DW SerialApp_TaskID, SerialApp_SimpleDesc
        DB 0
//  177 {
//  178   SERIALAPP_ENDPOINT,
//  179   &SerialApp_TaskID,
//  180   (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc,
//  181   noLatencyReqs
//  182 };
//  183 
//  184 /*********************************************************************
//  185  * TYPEDEFS
//  186  */
//  187 
//  188 /*********************************************************************
//  189  * GLOBAL VARIABLES
//  190  */

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  191 uint8 bind_cfg_flag = 1;
bind_cfg_flag:
        DS 1
        REQUIRE `?<Initializer for bind_cfg_flag>`
        REQUIRE __INIT_XDATA_I
//  192 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  193 uint8 flag = 0;
flag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  194 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  195 uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
SerialApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  196 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  197 uint8 Led_TaskID;
Led_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  198 
//  199 /*********************************************************************
//  200  * EXTERNAL VARIABLES
//  201  */
//  202 
//  203 /*********************************************************************
//  204  * EXTERNAL FUNCTIONS
//  205  */
//  206 
//  207 /*********************************************************************
//  208  * LOCAL VARIABLES
//  209  */
//  210 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  211 static uint8 SerialApp_MsgID;
SerialApp_MsgID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  212 afAddrType_t SerialApp_TxAddr;
SerialApp_TxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  213 static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
SerialApp_TxBuf:
        DS 81
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  214 static uint8 SerialApp_TxLen;
SerialApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  215 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  216 static afAddrType_t SerialApp_RxAddr;
SerialApp_RxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  217 static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
SerialApp_RspBuf:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  218 
//  219 /*********************************************************************
//  220  * LOCAL FUNCTIONS
//  221  */
//  222 
//  223 static void SerialApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  224 static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
//  225 static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  226 static void SerialApp_Send(void);
//  227 static void SerialApp_Resp(void);
//  228 static void SerialApp_CallBack(uint8 port, uint8 event);
//  229 
//  230 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  231 void Timer_led_Init(uint8 task_id)
Timer_led_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Timer_led_Init
//  232 {
        FUNCALL Timer_led_Init, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Timer_led_Init, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Timer_led_Init, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  233   byte ledTimer;
//  234   Led_TaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#Led_TaskID
        MOVX    @DPTR,A
//  235  
//  236   ledTimer = osal_start_timerEx(Led_TaskID, HAL_LED_BLINK_EVENT, 1000);
//  237   if(ledTimer == ZSUCCESS)
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??osal_start_timerEx?relay
        MOV     A,R1
        MOV     R4,#0x14
        MOV     R5,#0x0
        JNZ     ??Timer_led_Init_0
//  238   {
//  239     HalUARTWrite(HAL_UART_PORT_0, time_ok, 20);
        ; Setup parameters for call to function HalUARTWrite
        MOV     DPTR,#time_ok
        SJMP    ??Timer_led_Init_1
//  240   }
//  241   else
//  242     HalUARTWrite(HAL_UART_PORT_0, time_err, 20); 
??Timer_led_Init_0:
        ; Setup parameters for call to function HalUARTWrite
        MOV     DPTR,#time_err
??Timer_led_Init_1:
        LCALL   ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock0
//  243   /*
//  244 #if defined( ZDO_COORDINATOR ) 
//  245   
//  246   
//  247   if(bind_cfg_flag)
//  248   {
//  249     osal_start_timerEx(Led_TaskID, HAL_LED_BLINK_EVENT, 100);
//  250   }
//  251   
//  252 #endif
//  253   */
//  254 
//  255   
//  256 }
??CrossCallReturnLabel_2:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  257 
//  258 /*********************************************************************
//  259  * @fn      SerialApp_Init
//  260  *
//  261  * @brief   This is called during OSAL tasks' initialization.
//  262  *
//  263  * @param   task_id - the Task ID assigned by OSAL.
//  264  *
//  265  * @return  none
//  266  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  267 void SerialApp_Init( uint8 task_id )
SerialApp_Init:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SerialApp_Init
//  268 {
        FUNCALL SerialApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 1,R1
//  269   int i ,j ;
//  270   halUARTCfg_t uartConfig;
//  271 
//  272   SerialApp_TaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#SerialApp_TaskID
        MOVX    @DPTR,A
//  273 
//  274   /*******************App Section Added By Jacky***********************/
//  275   SerialNwkState = DEV_INIT;
        MOV     A,#0x1
        MOV     DPTR,#SerialNwkState
        MOVX    @DPTR,A
//  276   
//  277   for(i = 0; i < MAX_ENDPOINTKIND; i++)
        MOV     R2,#0x0
        MOV     R3,#0x0
//  278   {
//  279     for(j = 0; j < MAX_NUMBER; j++)
??SerialApp_Init_0:
        MOV     R0,#0x0
        MOV     R1,#0x0
//  280     {
//  281       AddGroup[i][j] = 0xFFFE;
??SerialApp_Init_1:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        CLR     C
        RLC     A
        MOV     R4,A
        MOV     A,R5
        RLC     A
        MOV     R5,A
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        MOV     B,#0x14
        MUL     AB
        MOV     R6,A
        MOV     ?V0 + 0,B
        MOV     B,#0x14
        MOV     A,R7
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R7,A
        MOV     A,R6
        ADD     A,#(AddGroup & 0xff)
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#((AddGroup >> 8) & 0xff)
        MOV     R7,A
        MOV     A,R4
        ADD     A,R6
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  282     }
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0xa
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??SerialApp_Init_1
//  283   }
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0xa
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??SerialApp_Init_0
//  284 
//  285 #ifdef  ZDO_COORDINATOR
//  286   AddID = 0x00;
        CLR     A
        MOV     DPTR,#AddID
        MOVX    @DPTR,A
//  287 #else
//  288   AddID = 0x01;
//  289 #endif
//  290   
//  291   if(AddID == 0)
//  292    zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  293   else
//  294    zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  295   
//  296   #if defined ( SOFT_START )
//  297  
//  298   if(AddID == 0)
//  299    zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    @DPTR,A
//  300   else
//  301    zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  302 
//  303 #endif // SOFT_START
//  304   
//  305 #if defined ( HOLD_AUTO_START )
//  306   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  307   //  from starting the device and wait for the application to
//  308   //  start the device.
//  309   ZDOInitDevice(0);
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,A
        MOV     R3,A
        LCALL   ??ZDOInitDevice?relay
//  310 #endif
//  311   
//  312   SerialApp_TxAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     A,#0xf
        MOV     DPTR,#(SerialApp_TxAddr + 8)
        MOVX    @DPTR,A
//  313   SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
        MOV     A,#0xb
        MOV     DPTR,#(SerialApp_TxAddr + 9)
        MOVX    @DPTR,A
//  314   SerialApp_TxAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SerialApp_TxAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  315   
//  316   // Register the endpoint description with the AF
//  317   afRegister( (endPointDesc_t *)&SerialApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#(SerialApp_epDesc & 0xff)
        MOV     R3,#((SerialApp_epDesc >> 8) & 0xff)
        LCALL   ??afRegister?relay
//  318 
//  319   
//  320   /**********************End of This Section**************************/
//  321   
//  322   
//  323   
//  324   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     R1,?V0 + 1
        LCALL   ??RegisterForKeys?relay
//  325 
//  326   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  327   uartConfig.baudRate             = SERIAL_APP_BAUD;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  328   uartConfig.flowControl          = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  329   uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  330   uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  331   uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  332   uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  333   uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  334   uartConfig.callBackFunc         = SerialApp_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#(??SerialApp_CallBack?relay & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((??SerialApp_CallBack?relay >> 8) & 0xff)
        MOVX    @DPTR,A
//  335   HalUARTOpen (SERIAL_APP_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  336   
//  337 
//  338 #if defined ( LCD_SUPPORTED )
//  339   HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#(`?<Constant "SerialApp">` & 0xff)
        MOV     R3,#((`?<Constant "SerialApp">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  340 #endif
//  341   
//  342   ZDO_RegisterForZDOMsg( SerialApp_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  343   ZDO_RegisterForZDOMsg( SerialApp_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  344   osal_start_timerEx(SerialApp_TaskID, HAL_SLEEP_TIMER_EVENT, 100);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  345 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  346 
//  347 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  348 UINT16 Timer_ledProcess(uint8 task_id, UINT16 events)
Timer_ledProcess:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function Timer_ledProcess
//  349 {
        FUNCALL Timer_ledProcess, afSetMatch
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  350 
//  351   (void)task_id;  // Intentionally unreferenced parameter
//  352   
//  353   HAL_TOGGLE_LED3();
        MOV     C,0x90.4
        JNC     ??Timer_ledProcess_0
        CLR     0x90.4
        SJMP    ??Timer_ledProcess_1
??Timer_ledProcess_0:
        SETB    0x90.4
//  354   
//  355 #if defined( ZDO_COORDINATOR )
//  356   afSetMatch(SerialApp_epDesc.simpleDesc->EndPoint, TRUE);
??Timer_ledProcess_1:
        ; Setup parameters for call to function afSetMatch
        MOV     R2,#0x1
        MOV     R1,#0xb
        LCALL   ??afSetMatch?relay
//  357 
//  358 #endif
//  359 
//  360  return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock4
        REQUIRE _A_P1
//  361 }
//  362 
//  363 /*********************************************************************
//  364  * @fn      SerialApp_ProcessEvent
//  365  *
//  366  * @brief   Generic Application Task event processor.
//  367  *
//  368  * @param   task_id  - The OSAL assigned task ID.
//  369  * @param   events   - Bit map of events to process.
//  370  *
//  371  * @return  Event flags of all unprocessed events.
//  372  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  373 UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
SerialApp_ProcessEvent:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function SerialApp_ProcessEvent
//  374 {
        FUNCALL SerialApp_ProcessEvent, SerialApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  375   (void)task_id;  // Intentionally unreferenced parameter
//  376   
//  377   if ( events & SYS_EVENT_MSG )
        MOV     A,#-0x80
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??SerialApp_ProcessEvent_0
        MOV     A,R1
??SerialApp_ProcessEvent_0:
        JNZ     ??SerialApp_ProcessEvent_1
//  378   {
//  379     afIncomingMSGPacket_t *MSGpkt;
//  380 
//  381     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
//  382     {
//  383       switch ( MSGpkt->hdr.event )
//  384       {
//  385       case ZDO_CB_MSG:
//  386         SerialApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  387         break;
//  388           
//  389       case KEY_CHANGE:
//  390         SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  391         break;
//  392 
//  393       case AF_INCOMING_MSG_CMD:
//  394         SerialApp_ProcessMSGCmd( MSGpkt );
//  395         break;
//  396         // Received whenever the device changes state in the network
//  397           //½Úµã±¾ÉíÔÚÍøÂçÖĞµÄµØÎ»·¢Éú±ä»¯²Å»áµ÷ÓÃ´Ëº¯Êı
//  398      case ZDO_STATE_CHANGE:
//  399 #ifndef ZDO_COORDINATOR
//  400             SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  401             SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
//  402             SerialApp_TxAddr.addr.shortAddr = 0x0000;
//  403     
//  404 #endif
//  405 
//  406           break;
//  407 
//  408       default:
//  409         break;
//  410       }
//  411 
//  412       osal_msg_deallocate( (uint8 *)MSGpkt );
//  413     }
//  414 
//  415     return ( events ^ SYS_EVENT_MSG );
//  416   }
//  417 
//  418   if ( events & SERIALAPP_SEND_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
//  419   {
//  420     SerialApp_Send();
        ; Setup parameters for call to function SerialApp_Send
        LCALL   ??SerialApp_Send?relay
//  421     return ( events ^ SERIALAPP_SEND_EVT );
        MOV     A,#0x1
        XRL     A,R6
        MOV     R2,A
        MOV     A,R7
??SerialApp_ProcessEvent_3:
        MOV     R3,A
        LJMP    ??SerialApp_ProcessEvent_4 & 0xFFFF
//  422   }
??SerialApp_ProcessEvent_5:
        CLR     A
        MOV     DPTR,#SerialApp_TxLen
        MOVX    @DPTR,A
??SerialApp_ProcessEvent_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??SerialApp_ProcessEvent_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        JNZ     ??SerialApp_ProcessEvent_7
        MOV     A,R3
??SerialApp_ProcessEvent_7:
        JNZ     $+5
        LJMP    ??SerialApp_ProcessEvent_8 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for SerialApp_ProcessEvent>_0`:
        DATA
        DB        0
        DB        2
        DB        26
        DW        ??SerialApp_ProcessEvent_9
        DB        211
        DW        ??SerialApp_ProcessEvent_10
        DW        ??SerialApp_ProcessEvent_6
        CODE
??SerialApp_ProcessEvent_10:
        ; Setup parameters for call to function SerialApp_ProcessZDOMsgs
        LCALL   ??SerialApp_ProcessZDOMsgs?relay
        SJMP    ??SerialApp_ProcessEvent_6
??SerialApp_ProcessEvent_9:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SerialApp_ProcessEvent>_1`:
        DATA
        DW        1
        DB        1
        DW        ??SerialApp_ProcessEvent_6
        DW        ??SerialApp_ProcessEvent_11
        DW        ??SerialApp_ProcessEvent_5
        CODE
??SerialApp_ProcessEvent_11:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R2
        ADD     A,#0x6
        MOV     ?V0 + 4,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#(SerialApp_RxAddr & 0xff)
        MOV     R3,#((SerialApp_RxAddr >> 8) & 0xff)
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,?V0 + 0
        ADD     A,#0x1f
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,?V0 + 0
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,#0x1
        MOV     DPTR,#SerialApp_RspBuf
        MOVX    @DPTR,A
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 4,#0x1e
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 4,#(SerialApp_MsgID & 0xff)
        MOV     ?V0 + 5,#((SerialApp_MsgID >> 8) & 0xff)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 4,#(SerialApp_RspBuf & 0xff)
        MOV     ?V0 + 5,#((SerialApp_RspBuf >> 8) & 0xff)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 4,#0x4
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 4,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R1,#0x0
        MOV     R4,#(SerialApp_epDesc & 0xff)
        MOV     R5,#((SerialApp_epDesc >> 8) & 0xff)
        MOV     R2,#(SerialApp_RxAddr & 0xff)
        MOV     R3,#((SerialApp_RxAddr >> 8) & 0xff)
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        LJMP    ??SerialApp_ProcessEvent_6 & 0xFFFF
??SerialApp_ProcessEvent_8:
        MOV     A,R6
        MOV     R2,A
        MOV     A,#-0x80
        XRL     A,R7
        LJMP    ??SerialApp_ProcessEvent_3 & 0xFFFF
//  423 
//  424   if ( events & SERIALAPP_RESP_EVT )
??SerialApp_ProcessEvent_2:
        ANL     A,#0x2
        JZ      ??SerialApp_ProcessEvent_12
//  425   {
//  426     SerialApp_Resp();
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 0,#(SerialApp_MsgID & 0xff)
        MOV     ?V0 + 1,#((SerialApp_MsgID >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#(SerialApp_RspBuf & 0xff)
        MOV     ?V0 + 1,#((SerialApp_RspBuf >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R1,#0x0
        MOV     R4,#(SerialApp_epDesc & 0xff)
        MOV     R5,#((SerialApp_epDesc >> 8) & 0xff)
        MOV     R2,#(SerialApp_RxAddr & 0xff)
        MOV     R3,#((SerialApp_RxAddr >> 8) & 0xff)
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R1
        JZ      ??SerialApp_ProcessEvent_13
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  427     return ( events ^ SERIALAPP_RESP_EVT );
??SerialApp_ProcessEvent_13:
        MOV     A,#0x2
        XRL     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??SerialApp_ProcessEvent_4
//  428   }
//  429   osal_start_timerEx(SerialApp_TaskID, HAL_SLEEP_TIMER_EVENT, 100);
??SerialApp_ProcessEvent_12:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  430   return ( 0 );  // Discard unknown events.
        MOV     R2,#0x0
        MOV     R3,#0x0
??SerialApp_ProcessEvent_4:
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  431 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
//  432 
//  433 
//  434 /*********************************************************************
//  435  * @fn      SerialApp_ProcessZDOMsgs()
//  436  *
//  437  * @brief   Process response messages
//  438  *
//  439  * @param   none
//  440  *
//  441  * @return  none
//  442  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  443 static void SerialApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
SerialApp_ProcessZDOMsgs:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function SerialApp_ProcessZDOMsgs
//  444 {
        FUNCALL SerialApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  445   switch ( inMsg->clusterID )
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for SerialApp_ProcessZDOMsgs>_0`:
        DATA
        DW        0
        DW        2
        DW        32774
        DW        ??SerialApp_ProcessZDOMsgs_0
        DW        32800
        DW        ??SerialApp_ProcessZDOMsgs_1
        DW        ??SerialApp_ProcessZDOMsgs_2
        CODE
//  446   {
//  447     case End_Device_Bind_rsp:
//  448       
//  449       
//  450       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
??SerialApp_ProcessZDOMsgs_1:
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JNZ     ??SerialApp_ProcessZDOMsgs_3
//  451       { 
//  452         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  453         SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     A,#0x2
        MOV     DPTR,#(SerialApp_TxAddr + 8)
        MOVX    @DPTR,A
//  454         SerialApp_TxAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        LCALL   ?Subroutine0 & 0xFFFF
//  455         SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT; 
??CrossCallReturnLabel_0:
        MOV     A,#0xb
        MOV     DPTR,#(SerialApp_TxAddr + 9)
        MOVX    @DPTR,A
        SJMP    ??SerialApp_ProcessZDOMsgs_2
//  456 
//  457       }
//  458       
//  459 #if defined(BLINK_LEDS)
//  460       else
//  461       {
//  462         // Flash LED to show failure
//  463         HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
??SerialApp_ProcessZDOMsgs_3:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        SJMP    ??SerialApp_ProcessZDOMsgs_2
//  464       }
//  465 #endif
//  466       break;
//  467       
//  468     case Match_Desc_rsp:
//  469       {
//  470         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
??SerialApp_ProcessZDOMsgs_0:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  471         if ( pRsp )
        MOV     A,R6
        JNZ     ??SerialApp_ProcessZDOMsgs_4
        MOV     A,R7
??SerialApp_ProcessZDOMsgs_4:
        JZ      ??SerialApp_ProcessZDOMsgs_2
//  472         {
//  473           if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??SerialApp_ProcessZDOMsgs_5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??SerialApp_ProcessZDOMsgs_5
//  474           {
//  475             SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     A,#0x2
        MOV     DPTR,#(SerialApp_TxAddr + 8)
        MOVX    @DPTR,A
//  476             SerialApp_TxAddr.addr.shortAddr = pRsp->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine0 & 0xFFFF
//  477             // Take the first endpoint, Can be changed to search through endpoints
//  478             SerialApp_TxAddr.endPoint = pRsp->epList[0];    
??CrossCallReturnLabel_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#(SerialApp_TxAddr + 9)
        MOVX    @DPTR,A
//  479             // Light LED
//  480             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  481           }
//  482           osal_mem_free( pRsp );
??SerialApp_ProcessZDOMsgs_5:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  483         }
//  484       }
//  485       break;
//  486   }
//  487 }
??SerialApp_ProcessZDOMsgs_2:
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#SerialApp_TxAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  488 
//  489 
//  490 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  491 void prcess_key2(void)
prcess_key2:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function prcess_key2
//  492 {
        FUNCALL prcess_key2, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prcess_key2, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prcess_key2, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  493   zAddrType_t txAddr;
//  494     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  495       
//  496       // Initiate an End Device Bind Request for the mandatory endpoint
//  497       txAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  498       txAddr.addr.shortAddr = 0x0000; // Coordinator
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  499       ZDP_EndDeviceBindReq( &txAddr, NLME_GetShortAddr(), 
//  500                             SerialApp_epDesc.endPoint,
//  501                             SERIALAPP_PROFID,
//  502                             SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
//  503                             SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
//  504                             FALSE );
        MOV     ?V0 + 0,#(SerialApp_ClusterList & 0xff)
        MOV     ?V0 + 1,#((SerialApp_ClusterList >> 8) & 0xff)
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 2,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0xf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R1,#0xb
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  505 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock13
//  506 
//  507 /*********************************************************************
//  508  * @fn      SerialApp_HandleKeys
//  509  *
//  510  * @brief   Handles all key events for this device.
//  511  *
//  512  * @param   shift - true if in shift/alt.
//  513  * @param   keys  - bit field for key events.
//  514  *
//  515  * @return  none
//  516  */
//  517 void SerialApp_HandleKeys( uint8 shift, uint8 keys )
//  518 {
//  519 
//  520 }
//  521 
//  522 /*********************************************************************
//  523  * @fn      SerialApp_ProcessMSGCmd
//  524  *
//  525  * @brief   Data message processor callback. This function processes
//  526  *          any incoming data - probably from other devices. Based
//  527  *          on the cluster ID, perform the intended action.
//  528  *
//  529  * @param   pkt - pointer to the incoming message packet
//  530  *
//  531  * @return  TRUE if the 'pkt' parameter is being used and will be freed later,
//  532  *          FALSE otherwise.
//  533  */
//  534 void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
//  535 {
//  536   switch ( pkt->clusterId )
//  537   {
//  538   // A message with a serial data block to be transmitted on the serial port.
//  539   case SERIALAPP_CLUSTERID1:
//  540     // Store the address for sending and retrying.
//  541     osal_memcpy(&SerialApp_RxAddr, &(pkt->srcAddr), sizeof( afAddrType_t ));
//  542     HalUARTWrite( SERIAL_APP_PORT, pkt->cmd.Data, (pkt->cmd.DataLength) );
//  543       
//  544     SerialApp_RspBuf[0] = 1;
//  545     AF_DataRequest(&SerialApp_RxAddr,
//  546                    (endPointDesc_t *)&SerialApp_epDesc,
//  547                     SERIALAPP_CLUSTERID2,
//  548                     SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
//  549                     &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS);
//  550     break;
//  551 
//  552   // A response to a received serial data block.
//  553   case SERIALAPP_CLUSTERID2:
//  554       SerialApp_TxLen = 0;
//  555     break;
//  556 
//  557     default:
//  558       break;
//  559   }
//  560 }
//  561 
//  562 /*********************************************************************
//  563  * @fn      SerialApp_Send
//  564  *
//  565  * @brief   Send data OTA.
//  566  *
//  567  * @param   none
//  568  *
//  569  * @return  none
//  570  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  571 static void SerialApp_Send(void)
SerialApp_Send:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function SerialApp_Send
//  572 {
        FUNCALL SerialApp_Send, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  573 #if SERIAL_APP_LOOPBACK
//  574   if (SerialApp_TxLen < SERIAL_APP_TX_MAX)
//  575   {
//  576     SerialApp_TxLen += HalUARTRead(SERIAL_APP_PORT, SerialApp_TxBuf+SerialApp_TxLen+1,
//  577                                                     SERIAL_APP_TX_MAX-SerialApp_TxLen);
//  578   }
//  579 
//  580   if (SerialApp_TxLen)
//  581   {
//  582     (void)SerialApp_TxAddr;
//  583     if (HalUARTWrite(SERIAL_APP_PORT, SerialApp_TxBuf+1, SerialApp_TxLen))
//  584     {
//  585       SerialApp_TxLen = 0;
//  586     }
//  587     else
//  588     {
//  589       osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
//  590     }
//  591   }
//  592 #else
//  593   if (!SerialApp_TxLen && 
//  594       (SerialApp_TxLen = HalUARTRead(SERIAL_APP_PORT, SerialApp_TxBuf, SERIAL_APP_TX_MAX)))
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JNZ     ??SerialApp_Send_0
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R2,#(SerialApp_TxBuf & 0xff)
        MOV     R3,#((SerialApp_TxBuf >> 8) & 0xff)
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        MOV     DPTR,#SerialApp_TxLen
        MOVX    @DPTR,A
//  595   {
//  596  
//  597   }
//  598 
//  599   if (SerialApp_TxLen)
??SerialApp_Send_0:
        MOVX    A,@DPTR
        JZ      ??SerialApp_Send_1
//  600   {
//  601     if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_TxAddr,
//  602                                            (endPointDesc_t *)&SerialApp_epDesc,
//  603                                             SERIALAPP_CLUSTERID1,
//  604                                             SerialApp_TxLen, SerialApp_TxBuf,
//  605                                             &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#(SerialApp_MsgID & 0xff)
        MOV     ?V0 + 1,#((SerialApp_MsgID >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#(SerialApp_TxBuf & 0xff)
        MOV     ?V0 + 1,#((SerialApp_TxBuf >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x0
        MOV     R4,#(SerialApp_epDesc & 0xff)
        MOV     R5,#((SerialApp_epDesc >> 8) & 0xff)
        MOV     R2,#(SerialApp_TxAddr & 0xff)
        MOV     R3,#((SerialApp_TxAddr >> 8) & 0xff)
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JZ      ??SerialApp_Send_1
//  606     {
//  607       osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  608     }
//  609   }
//  610 #endif
//  611 }
??SerialApp_Send_1:
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock14
//  612 
//  613 /*********************************************************************
//  614  * @fn      SerialApp_Resp
//  615  *
//  616  * @brief   Send data OTA.
//  617  *
//  618  * @param   none
//  619  *
//  620  * @return  none
//  621  */
//  622 static void SerialApp_Resp(void)
//  623 {
//  624   if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
//  625                                          (endPointDesc_t *)&SerialApp_epDesc,
//  626                                           SERIALAPP_CLUSTERID2,
//  627                                           SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
//  628                                          &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
//  629   {
//  630     osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
//  631   }
//  632 }
//  633 
//  634 /*********************************************************************
//  635  * @fn      SerialApp_CallBack
//  636  *
//  637  * @brief   Send data OTA.
//  638  *
//  639  * @param   port - UART port.
//  640  * @param   event - the UART port event flag.
//  641  *
//  642  * @return  none
//  643  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  644 static void SerialApp_CallBack(uint8 port, uint8 event)
SerialApp_CallBack:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function SerialApp_CallBack
//  645 {
        FUNCALL SerialApp_CallBack, SerialApp_Send
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  646   (void)port;
//  647 
//  648   if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  649 #if SERIAL_APP_LOOPBACK
//  650       (SerialApp_TxLen < SERIAL_APP_TX_MAX))
//  651 #else
//  652       !SerialApp_TxLen)
        MOV     A,#0x7
        ANL     A,R2
        JZ      ??SerialApp_CallBack_0
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JNZ     ??SerialApp_CallBack_0
//  653 #endif
//  654   {
//  655     SerialApp_Send();
        ; Setup parameters for call to function SerialApp_Send
        LCALL   ??SerialApp_Send?relay
//  656   }
//  657 }
??SerialApp_CallBack_0:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock15

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for time_ok>`:
        DW `?<Constant "time start ok">`

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for time_err>`:
        DW `?<Constant "time not start">`

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for bind_cfg_flag>`:
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Timer_led_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Timer_led_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Timer_ledProcess?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Timer_ledProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessZDOMsgs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??prcess_key2?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    prcess_key2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_CallBack

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "time start ok">`:
        DB "time start ok"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "time not start">`:
        DB "time not start"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "SerialApp">`:
        DB "SerialApp"

        END
//  658 
//  659 /*********************************************************************
//  660 *********************************************************************/
// 
// 1 264 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//     5 bytes in segment XDATA_I
//     5 bytes in segment XDATA_ID
//    61 bytes in segment XDATA_ROM_C
//   316 bytes in segment XDATA_Z
// 
// 1 317 bytes of CODE  memory
//    61 bytes of CONST memory
//     0 bytes of DATA  memory (+ 1 byte shared)
//   321 bytes of XDATA memory
//
//Errors: none
//Warnings: none
