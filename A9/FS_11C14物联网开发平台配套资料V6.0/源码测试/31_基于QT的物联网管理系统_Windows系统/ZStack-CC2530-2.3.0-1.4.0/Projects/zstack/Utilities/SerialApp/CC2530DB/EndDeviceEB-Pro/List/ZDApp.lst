###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                14/Jan/2014  11:34:55 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Com #
#                          ponents\stack\zdo\ZDApp.c                          #
#    Command line       =  -f E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14 #
#                          ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁ #
#                          ªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ        #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0          #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Com #
#                          ponents\stack\zdo\ZDApp.c -D ZIGBEEPRO -D          #
#                          NWK_AUTO_POLL -D HAL_UART=TRUE -D                  #
#                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -D ZAPP_P1 -D   #
#                          xPOWER_SAVING -D SOFT_START=TRUE -lC               #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\EndDevic #
#                          eEB-Pro\List\ -lA E:\ShengLi\01-Farsight\10-ÎïÁªÍø #
#                          Ê¦×Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ #
#                          \31_»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Utilities\SerialApp #
#                          \CC2530DB\EndDeviceEB-Pro\List\ --diag_suppress    #
#                          Pe001,Pa010 -o E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦× #
#                          Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31 #
#                          _»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Utilities\SerialApp\CC #
#                          2530DB\EndDeviceEB-Pro\Obj\ -e                     #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\ShengLi\01-Farsight\10- #
#                          ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´ #
#                          Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Utilities\Ser #
#                          ialApp\CC2530DB\ -I E:\ShengLi\01-Farsight\10-ÎïÁª #
#                          ÍøÊ¦×Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²â #
#                          ÊÔ\31_»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Utilities\SerialA #
#                          pp\CC2530DB\..\SOURCE\ -I                          #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \ZMAIN\TI2530DB\ -I E:\ShengLi\01-Farsight\10-ÎïÁª #
#                          ÍøÊ¦×Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²â #
#                          ÊÔ\31_»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Utilities\SerialA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I       #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\HAL\INCLUDE\ -I                  #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I          #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I               #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\OSAL\INCLUDE\ -I                 #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\AF\ -I                     #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\NWK\ -I                    #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SEC\ -I                    #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SAPI\ -I                   #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SYS\ -I                    #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\ZDO\ -I                    #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\ZMAC\F8W\ -I                     #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\ZMAC\ -I                         #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\SERVICES\SADDR\ -I               #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\SERVICES\SDATA\ -I               #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\INCLUDE\ -I                  #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I               #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I          #
#                          E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ #
#                           -I E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C1 #
#                          4ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎï #
#                          ÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\u #
#                          sr_code\include\ -I "D:\Program Files\IAR          #
#                          Systems\Embedded Workbench 5.3\8051\INC\" -I       #
#                          "D:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3\8051\INC\CLIB\" -Ohz                           #
#    List file          =  E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\EndDevic #
#                          eEB-Pro\List\ZDApp.lst                             #
#    Object file        =  E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁ #
#                          ªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø #
#                          ¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\EndDevic #
#                          eEB-Pro\Obj\ZDApp.r51                              #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShengLi\01-Farsight\10-ÎïÁªÍøÊ¦×Ê°à\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\Ô´Âë²âÊÔ\31_»ùÓÚQTµÄÎïÁªÍø¹ÜÀíÏµÍ³_WindowsÏµÍ³\ZStack-CC2530-2.3.0-1.4.0\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2010-01-04 12:16:55 -0800 (Mon, 04 Jan 2010) $
      4            Revision:       $Revision: 21428 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the use can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com. 
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "ZMac.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Tasks.h"
     48          #include "OSAL_PwrMgr.h"
     49          #include "OSAL_Nv.h"
     50          #include "AF.h"
     51          #include "APSMEDE.h"
     52          #include "NLMEDE.h"
     53          #include "AddrMgr.h"
     54          #include "ZDProfile.h"
     55          #include "ZDObject.h"
     56          #include "ZDConfig.h"
     57          #include "ZDSecMgr.h"
     58          #include "ZDApp.h"
     59          #include "DebugTrace.h"
     60          #include "nwk_util.h"
     61          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     62          #include "ZGlobals.h"
     63          #include "ZDNwkMgr.h"
     64          #include "rtg.h"
     65          
     66          #include "ssp.h"
     67          
     68          /* HAL */
     69          #include "hal_led.h"
     70          #include "hal_lcd.h"
     71          #include "hal_key.h"
     72          
     73          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     74            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     75          #endif
     76          /*********************************************************************
     77           * MACROS
     78           */
     79          
     80          /*********************************************************************
     81           * CONSTANTS
     82           */
     83          #if !defined( NWK_START_DELAY )
     84            #define NWK_START_DELAY             100   // in milliseconds
     85          #endif
     86          
     87          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     88            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     89          #endif
     90          
     91          #if !defined( BEACON_REQUEST_DELAY )
     92            #define BEACON_REQUEST_DELAY        100   // in milliseconds
     93          #endif
     94          
     95          #if !defined( BEACON_REQ_DELAY_MASK )
     96            #define BEACON_REQ_DELAY_MASK       0x007F
     97          #endif
     98          
     99          #define MAX_RESUME_RETRY            3
    100          
    101          #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
    102          
    103          // Beacon Order Settings (see NLMEDE.h)
    104          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    105          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    106          
    107          #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
    108            // The number of times the frame counter can change before
    109            // saving to NV
    110            #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
    111          #endif
    112          
    113          // Leave control bits
    114          #define ZDAPP_LEAVE_CTRL_INIT 0
    115          #define ZDAPP_LEAVE_CTRL_SET  1
    116          #define ZDAPP_LEAVE_CTRL_RA   2
    117          
    118          // Standard time to update NWK NV data
    119          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    120          
    121          // Address Manager Stub Implementation
    122          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    123          
    124          // Size of the ZDO callback function table zdoCBFunc[]
    125          #define MAX_ZDO_CB_FUNC 1
    126          
    127          
    128          /*********************************************************************
    129           * GLOBAL VARIABLES
    130           */
    131          
    132          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          #endif
    135          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    136          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint16 nwkFrameCounterChanges = 0;
   \                     nwkFrameCounterChanges:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    147          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    150          
    151          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    155          
    156          extern afAddrType_t SerialApp_TxAddr;
    157          
    158          /*********************************************************************
    159           * EXTERNAL VARIABLES
    160           */
    161          
    162          /*********************************************************************
    163           * EXTERNAL FUNCTIONS
    164           */
    165          
    166          /*********************************************************************
    167           * LOCAL FUNCTIONS
    168           */
    169          
    170          void ZDApp_NetworkStartEvt( void );
    171          void ZDApp_DeviceAuthEvt( void );
    172          void ZDApp_SaveNetworkStateEvt( void );
    173          
    174          uint8 ZDApp_ReadNetworkRestoreState( void );
    175          uint8 ZDApp_RestoreNetworkState( void );
    176          void ZDAppDetermineDeviceType( void );
    177          void ZDApp_InitUserDesc( void );
    178          void ZDAppCheckForHoldKey( void );
    179          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    180          void ZDApp_ProcessNetworkJoin( void );
    181          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    182          void ZDApp_SaveNwkKey( void );
    183          uint8 ZDApp_RestoreNwkKey( void );
    184            
    185          void ZDApp_SecInit( uint8 state );
    186          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    187          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    188          
    189          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    190          
    191          void ZDApp_ResetTimerStart( uint16 delay );
    192          void ZDApp_ResetTimerCancel( void );
    193          void ZDApp_LeaveCtrlInit( void );
    194          void ZDApp_LeaveCtrlSet( uint8 ra );
    195          uint8 ZDApp_LeaveCtrlBypass( void );
    196          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    197          void ZDApp_LeaveReset( uint8 ra );
    198          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    199                                  uint8 removeChildren );
    200          void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm );
    201          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    202          void ZDApp_RegisterCBs( void );
    203          
    204          /*********************************************************************
    205           * LOCAL VARIABLES
    206           */
    207          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    210          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    212          
    213          #if defined( HOLD_AUTO_START )
    214            devStates_t devState = DEV_HOLD;
    215          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    216            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    217          #endif
    218          
    219          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    221            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    222                                  // to parent. Set to make the device do an Orphan scan.
    223          #else
    224            // Set the default to coodinator
    225            devStartModes_t devStartMode = MODE_HARD;
    226          #endif
    227          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    228          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    229          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    230          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    231          {
    232            ZDO_EP,
    233            &ZDAppTaskID,
    234            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    235            (afNetworkLatencyReq_t)0            // No Network Latency req
    236          };
    237          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    238          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    239          
    240          /*********************************************************************
    241           * @fn      ZDApp_Init
    242           *
    243           * @brief   ZDApp Initialization function.
    244           *
    245           * @param   task_id - ZDApp Task ID
    246           *
    247           * @return  None
    248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    250          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    251            // Save the task ID
    252            ZDAppTaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#ZDAppTaskID
   \   000008   F0           MOVX    @DPTR,A
    253          
    254            // Initialize the ZDO global device short address storage
    255            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   000009   7402         MOV     A,#0x2
   \   00000B   90....       MOV     DPTR,#(ZDAppNwkAddr + 8)
   \   00000E   F0           MOVX    @DPTR,A
    256            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   00000F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000012   74FE         MOV     A,#-0x2
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   74FF         MOV     A,#-0x1
   \   000018   F0           MOVX    @DPTR,A
    257            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   ??NLME_GetExtAddr?relay
    258          
    259            // Check for manual "Hold Auto Start"
    260            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   ??ZDAppCheckForHoldKey?relay
    261          
    262            // Initialize ZDO items and setup the device - type of device to create.
    263            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   ??ZDO_Init?relay
    264          
    265            // Register the endpoint description with the AF
    266            // This task doesn't have a Simple description, but we still need
    267            // to register the endpoint.
    268            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#(ZDApp_epDesc & 0xff)
   \   000024   7B..         MOV     R3,#((ZDApp_epDesc >> 8) & 0xff)
   \   000026   12....       LCALL   ??afRegister?relay
    269          
    270          #if defined( ZDO_USERDESC_RESPONSE )
    271            ZDApp_InitUserDesc();
    272          #endif // ZDO_USERDESC_RESPONSE
    273          
    274            // Start the device?
    275            if ( devState != DEV_HOLD )
   \   000029   90....       MOV     DPTR,#devState
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6009         JZ      ??ZDApp_Init_0
    276            {
    277              ZDOInitDevice( 0 );
   \   00002F                ; Setup parameters for call to function ZDOInitDevice
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   ??ZDOInitDevice?relay
   \   000036   800D         SJMP    ??ZDApp_Init_1
    278            }
    279            else
    280            {
    281              // Blink LED to indicate HOLD_START
    282              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \                     ??ZDApp_Init_0:
   \   000038                ; Setup parameters for call to function HalLedBlink
   \   000038   7CF4         MOV     R4,#-0xc
   \   00003A   7D01         MOV     R5,#0x1
   \   00003C   7B32         MOV     R3,#0x32
   \   00003E   7A00         MOV     R2,#0x0
   \   000040   7908         MOV     R1,#0x8
   \   000042   12....       LCALL   ??HalLedBlink?relay
    283            }
    284            
    285            ZDApp_RegisterCBs();
   \                     ??ZDApp_Init_1:
   \   000045                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000045   12....       LCALL   ??ZDApp_RegisterCBs?relay
    286          } /* ZDApp_Init() */
   \   000048   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    287          
    288          /*********************************************************************
    289           * @fn          ZDApp_SecInit
    290           *
    291           * @brief       ZDApp initialize security.
    292           *
    293           * @param       state - device initialization state
    294           *
    295           * @return      none
    296           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    297          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    298          {  
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    299            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    300            {
    301              // Set the Trust Center bit
    302              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    303            }
    304          
    305            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
    306            {
    307              ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
    308            }
    309              
    310            // Initialize ZigBee Device Security Manager
    311            ZDSecMgrInit(state);
   \   000004                ; Setup parameters for call to function ZDSecMgrInit
   \   000004   12....       LCALL   ??ZDSecMgrInit?relay
    312          
    313            if ( ZG_SECURE_ENABLED )
    314            {
    315              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    316              {
    317                nwkFrameCounter = 0;
    318            
    319                if( _NIB.nwkKeyLoaded == FALSE )
    320                {
    321                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    322                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    323                  {
    324                      SSP_UpdateNwkKey( (byte*)zgPreConfigKey, 0);
    325                      SSP_SwitchNwkKey( 0 );
    326                  }
    327                }
    328              }
    329            }    
    330          }
   \   000007   02....       LJMP    ??Subroutine29_0 & 0xFFFF
    331          
    332          /*********************************************************************
    333           * @fn      ZDApp_event_loop()
    334           *
    335           * @brief   Main event loop for Zigbee device objects task. This function
    336           *          should be called at periodic intervals.
    337           *
    338           * @param   task_id - Task ID
    339           * @param   events  - Bitmap of events
    340           *
    341           * @return  none
    342           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    343          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    344          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    345            uint8 *msg_ptr;
    346          
    347            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??ZDApp_event_loop_0
   \   000010   E9           MOV     A,R1
   \                     ??ZDApp_event_loop_0:
   \   000011   7030         JNZ     ??ZDApp_event_loop_1
    348            {
    349              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    350              {
    351                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    352          
    353                // Release the memory
    354                
    355                osal_msg_deallocate( msg_ptr );
    356              }
    357          
    358              // Return unprocessed events
    359              return (events ^ SYS_EVENT_MSG);
    360            }
    361          
    362            if ( events & ZDO_NETWORK_INIT )
   \   000013   EE           MOV     A,R6
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   5044         JNC     ??ZDApp_event_loop_2
    363            {
    364              // Initialize apps and start the network
    365              devState = DEV_INIT;
   \   000018   7401         MOV     A,#0x1
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   F0           MOVX    @DPTR,A
    366              
    367              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    368                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   00001E                ; Setup parameters for call to function ZDO_StartDevice
   \   00001E   7C0F         MOV     R4,#0xf
   \   000020   7B0F         MOV     R3,#0xf
   \   000022   90....       MOV     DPTR,#devStartMode
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   5407         ANL     A,#0x7
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??ZDO_StartDevice?relay
    369          
    370              // Return unprocessed events
    371              return (events ^ ZDO_NETWORK_INIT);
   \   000031   7401         MOV     A,#0x1
   \                     ??ZDApp_event_loop_3:
   \   000033   6E           XRL     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \                     ??ZDApp_event_loop_4:
   \   000036   FB           MOV     R3,A
   \   000037   8075         SJMP    ??ZDApp_event_loop_5
    372            }
   \                     ??ZDApp_event_loop_6:
   \   000039                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000039   12....       LCALL   ??ZDApp_ProcessOSALMsg?relay
   \   00003C                ; Setup parameters for call to function osal_msg_deallocate
   \   00003C   AA..         MOV     R2,?V0 + 0
   \   00003E   AB..         MOV     R3,?V0 + 1
   \   000040   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??ZDApp_event_loop_1:
   \   000043                ; Setup parameters for call to function osal_msg_receive
   \   000043   90....       MOV     DPTR,#ZDAppTaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   ??osal_msg_receive?relay
   \   00004B   8A..         MOV     ?V0 + 0,R2
   \   00004D   8B..         MOV     ?V0 + 1,R3
   \   00004F   EA           MOV     A,R2
   \   000050   7001         JNZ     ??ZDApp_event_loop_7
   \   000052   EB           MOV     A,R3
   \                     ??ZDApp_event_loop_7:
   \   000053   70E4         JNZ     ??ZDApp_event_loop_6
   \   000055   EE           MOV     A,R6
   \   000056   FA           MOV     R2,A
   \   000057   7480         MOV     A,#-0x80
   \                     ??ZDApp_event_loop_8:
   \   000059   6F           XRL     A,R7
   \   00005A   80DA         SJMP    ??ZDApp_event_loop_4
    373          
    374            if ( ZSTACK_ROUTER_BUILD )
    375            {
    376              if ( events & ZDO_NETWORK_START )
    377              {
    378                ZDApp_NetworkStartEvt();
    379            
    380                // Return unprocessed events
    381                return (events ^ ZDO_NETWORK_START);
    382              }
    383          
    384              if ( events & ZDO_ROUTER_START )
    385              {
    386                if ( nwkStatus == ZSuccess )
    387                {
    388                  if ( devState == DEV_END_DEVICE )
    389                    devState = DEV_ROUTER;
    390            
    391                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    392                }
    393                else
    394                {
    395                  // remain as end device!!
    396                }
    397                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    398            
    399                // Return unprocessed events
    400                return (events ^ ZDO_ROUTER_START);
    401              }
    402            }
    403            
    404            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_2:
   \   00005C   5410         ANL     A,#0x10
   \   00005E   6022         JZ      ??ZDApp_event_loop_9
    405            {
    406              ZDO_UpdateNwkStatus( devState );
   \   000060                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   000060   90....       MOV     DPTR,#devState
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   12....       LCALL   ??ZDO_UpdateNwkStatus?relay
    407              
    408              // At start up, do one MTO route discovery if the device is a concentrator
    409              if ( zgConcentratorEnable == TRUE ) 
   \   000068   90....       MOV     DPTR,#zgConcentratorEnable
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6401         XRL     A,#0x1
   \   00006E   700E         JNZ     ??CrossCallReturnLabel_38
    410              {
    411                // Start next event
    412                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000070                ; Setup parameters for call to function osal_start_timerEx
   \   000070   7C64         MOV     R4,#0x64
   \   000072   7D00         MOV     R5,#0x0
   \   000074   7A00         MOV     R2,#0x0
   \   000076   7B08         MOV     R3,#0x8
   \   000078   90....       MOV     DPTR,#NWK_TaskID
   \   00007B   12....       LCALL   ??Subroutine28_0 & 0xFFFF
    413              }
    414              
    415              // Return unprocessed events
    416              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??CrossCallReturnLabel_38:
   \   00007E   7410         MOV     A,#0x10
   \   000080   80B1         SJMP    ??ZDApp_event_loop_3
    417            }
    418          
    419            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_9:
   \   000082   EE           MOV     A,R6
   \   000083   5408         ANL     A,#0x8
   \   000085   6006         JZ      ??ZDApp_event_loop_10
    420            {
    421              // User defined logic
    422          
    423              // Return unprocessed events
    424              return (events ^ ZDO_COMMAND_CNF);
   \   000087   7408         MOV     A,#0x8
   \   000089   6E           XRL     A,R6
   \   00008A   FA           MOV     R2,A
   \   00008B   8021         SJMP    ??ZDApp_event_loop_5
    425            }
    426            
    427            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_10:
   \   00008D   7402         MOV     A,#0x2
   \   00008F   5F           ANL     A,R7
   \   000090   F9           MOV     R1,A
   \   000091   E4           CLR     A
   \   000092   7001         JNZ     ??ZDApp_event_loop_11
   \   000094   E9           MOV     A,R1
   \                     ??ZDApp_event_loop_11:
   \   000095   6004         JZ      ??ZDApp_event_loop_12
    428            {
    429              ZDApp_SaveNetworkStateEvt();
    430          
    431              // Return unprocessed events
    432              return (events ^ ZDO_NWK_UPDATE_NV);
   \   000097   7402         MOV     A,#0x2
   \   000099   80BE         SJMP    ??ZDApp_event_loop_8
    433            }
    434          
    435            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_12:
   \   00009B   EE           MOV     A,R6
   \   00009C   5404         ANL     A,#0x4
   \   00009E   600A         JZ      ??ZDApp_event_loop_13
    436            {
    437              // The device has been in the UNAUTH state, so reset
    438              // Note: there will be no return from this call
    439              SystemReset();
   \   0000A0   C2AF         CLR     0xa8.7
   \   0000A2   75C9AB       MOV     0xc9,#-0x55
   \   0000A5   75C95B       MOV     0xc9,#0x5b
   \                     ??ZDApp_event_loop_14:
   \   0000A8   80FE         SJMP    ??ZDApp_event_loop_14
    440            }
    441          
    442            if ( ZG_SECURE_ENABLED )
    443            {
    444              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    445            }
    446            else
    447            {
    448              // Discard or make more handlers
    449              return 0;
   \                     ??ZDApp_event_loop_13:
   \   0000AA   7A00         MOV     R2,#0x0
   \   0000AC   7B00         MOV     R3,#0x0
    450            }
   \                     ??ZDApp_event_loop_5:
   \   0000AE   80..         SJMP    ??Subroutine25_0
   \   0000B0                REQUIRE _A_IEN0
   \   0000B0                REQUIRE WDCTL
    451          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??osal_start_timerEx?relay
   \   000005   22           RET
    452          
    453          /*********************************************************************
    454           * @fn      ZDApp_ProcessSecEvent()
    455           *
    456           * @brief   Process incoming security events.
    457           *
    458           * @param   task_id - Task ID
    459           * @param   events  - Bitmap of events
    460           *
    461           * @return  none
    462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    464          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    465            (void)task_id;  // Intentionally unreferenced parameter
    466            
    467            if ( ZSTACK_ROUTER_BUILD )
    468            {
    469              if ( events & ZDO_NEW_DEVICE )
    470              {
    471                // process the new device event
    472                if ( ZDSecMgrNewDeviceEvent() == TRUE )
    473                {
    474                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
    475                }
    476          
    477                // Return unprocessed events
    478                return (events ^ ZDO_NEW_DEVICE);
    479              }
    480            }
    481          
    482            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH) 
    483                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
    484            {
    485              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    486              { 
    487                if ( events & ZDO_SECMGR_EVENT )
    488                {
    489                  ZDSecMgrEvent();
    490          
    491                  // Return unprocessed events
    492                  return (events ^ ZDO_SECMGR_EVENT);
    493                }
    494              }
    495            }
    496            
    497            if ( events & ZDO_DEVICE_AUTH )
   \   000009   EE           MOV     A,R6
   \   00000A   5480         ANL     A,#0x80
   \   00000C   600B         JZ      ??ZDApp_ProcessSecEvent_0
    498            {
    499              ZDApp_DeviceAuthEvt();
   \   00000E                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   00000E   12....       LCALL   ??ZDApp_DeviceAuthEvt?relay
    500          
    501              // Return unprocessed events
    502              return (events ^ ZDO_DEVICE_AUTH);
   \   000011   7480         MOV     A,#-0x80
   \   000013   6E           XRL     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000016   FB           MOV     R3,A
   \   000017   8036         SJMP    ??ZDApp_ProcessSecEvent_2
    503            }
    504          
    505            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000019   7404         MOV     A,#0x4
   \   00001B   5F           ANL     A,R7
   \   00001C   F9           MOV     R1,A
   \   00001D   E4           CLR     A
   \   00001E   7001         JNZ     ??ZDApp_ProcessSecEvent_3
   \   000020   E9           MOV     A,R1
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000021   6028         JZ      ??ZDApp_ProcessSecEvent_4
    506            {
    507              if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
   \   000023   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   7401         MOV     A,#0x1
   \   00002D   28           ADD     A,R0
   \   00002E   FA           MOV     R2,A
   \   00002F   E4           CLR     A
   \   000030   39           ADDC    A,R1
   \   000031   FB           MOV     R3,A
   \   000032   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000035   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000038   C3           CLR     C
   \   000039   E8           MOV     A,R0
   \   00003A   94E9         SUBB    A,#-0x17
   \   00003C   E9           MOV     A,R1
   \   00003D   9403         SUBB    A,#0x3
   \   00003F   4003         JC      ??ZDApp_ProcessSecEvent_5
    508                ZDApp_SaveNwkKey();
   \   000041                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000041   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    509          
    510              // Return unprocessed events
    511              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDApp_ProcessSecEvent_5:
   \   000044   EE           MOV     A,R6
   \   000045   FA           MOV     R2,A
   \   000046   7404         MOV     A,#0x4
   \   000048   6F           XRL     A,R7
   \   000049   80CB         SJMP    ??ZDApp_ProcessSecEvent_1
    512            }
    513            
    514            // Discard or make more handlers
    515            return 0;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   00004B   7A00         MOV     R2,#0x0
   \   00004D   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_2:
   \   00004F   02....       LJMP    ?Subroutine19 & 0xFFFF
    516          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    517          
    518          /*********************************************************************
    519           * Application Functions
    520           */
    521          
    522          /*********************************************************************
    523           * @fn      ZDOInitDevice
    524           *
    525           * @brief   Start the device in the network.  This function will read
    526           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    527           *   restore the network state of the device.
    528           *
    529           * @param   startDelay - timeDelay to start device (in milliseconds).
    530           *      There is a jitter added to this delay:
    531           *              ((NWK_START_DELAY + startDelay)
    532           *              + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    533           *
    534           * NOTE:    If the application would like to force a "new" join, the
    535           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    536           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    537           *          this function. "new" join means to not restore the network
    538           *          state of the device. Use zgWriteStartupOptions() to set these
    539           *          options.
    540           *
    541           * @return
    542           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    543           *          restored.
    544           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    545           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    546           *          it could mean that there was no network state to restore.
    547           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    548           *          with the rejoin option set to TRUE.  So, the device was not
    549           *          started in the network (one time only).  The next time this
    550           *          function is called it will start.
    551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine24_0
   \   000002                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine25_0
   \   000003                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    553          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine3 & 0xFFFF
    554            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    555            uint16 extendedDelay = 0;
    556          
    557            if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_50:
   \   00000D   90....       MOV     DPTR,#devState
   \   000010   E0           MOVX    A,@DPTR
   \   000011   7005         JNZ     ??ZDOInitDevice_0
    558            {    
    559              // Initialize the RAM items table, in case an NV item has been updated.
    560              zgInitItems( FALSE );
   \   000013                ; Setup parameters for call to function zgInitItems
   \   000013   7900         MOV     R1,#0x0
   \   000015   12....       LCALL   ??zgInitItems?relay
    561            }
    562          
    563            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000018                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000018   12....       LCALL   ??ZDConfig_InitDescriptors?relay
    564            //devtag.071807.todo - fix this temporary solution
    565            _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00001B   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   90....       MOV     DPTR,#(_NIB + 14)
   \   000022   F0           MOVX    @DPTR,A
    566            
    567            devState = DEV_INIT;    // Remove the Hold state
   \   000023   7401         MOV     A,#0x1
   \   000025   90....       MOV     DPTR,#devState
   \   000028   F0           MOVX    @DPTR,A
    568          
    569            // Initialize leave control logic
    570            ZDApp_LeaveCtrlInit();
   \   000029                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000029   12....       LCALL   ??ZDApp_LeaveCtrlInit?relay
    571          
    572            // Check leave control reset settings
    573            ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   00002C                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   AC82         MOV     R4,DPL
   \   000034   AD83         MOV     R5,DPH
   \   000036   7A..         MOV     R2,#(devState & 0xff)
   \   000038   7B..         MOV     R3,#((devState >> 8) & 0xff)
   \   00003A   12....       LCALL   ??ZDApp_LeaveCtrlStartup?relay
    574          
    575            // Leave may make the hold state come back
    576            if ( devState == DEV_HOLD )
   \   00003D   90....       MOV     DPTR,#devState
   \   000040   E0           MOVX    A,@DPTR
   \   000041   700E         JNZ     ??ZDOInitDevice_1
    577            {
    578              // Set the NV startup option to force a "new" join.
    579              zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000043                ; Setup parameters for call to function zgWriteStartupOptions
   \   000043   7A02         MOV     R2,#0x2
   \   000045   79FF         MOV     R1,#-0x1
   \   000047   12....       LCALL   ??zgWriteStartupOptions?relay
    580          
    581              // Notify the applications 
    582              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00004A                ; Setup parameters for call to function osal_set_event
   \   00004A   12....       LCALL   ?Subroutine4 & 0xFFFF
    583              
    584              return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \                     ??CrossCallReturnLabel_17:
   \   00004D   7902         MOV     R1,#0x2
   \   00004F   8039         SJMP    ??ZDOInitDevice_2
    585            }
    586          
    587          #if defined ( NV_RESTORE )
    588            // Get Keypad directly to see if a reset nv is needed.
    589            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    590            // while booting to skip past NV Restore.
    591            if ( HalKeyRead() == SW_BYPASS_NV )
    592              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    593            else
    594            {
    595              // Determine if NV should be restored
    596              networkStateNV = ZDApp_ReadNetworkRestoreState();
    597            }
    598          
    599            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    600            {
    601              networkStateNV = ZDApp_RestoreNetworkState();
    602            }
    603            else
    604            {
    605              // Wipe out the network state in NV
    606              NLME_InitNV();
    607              NLME_SetDefaultNV();
    608            }
    609          #endif
    610          
    611            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    612            {
    613              ZDAppDetermineDeviceType();
   \                     ??ZDOInitDevice_1:
   \   000051                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000051   12....       LCALL   ??ZDAppDetermineDeviceType?relay
    614          
    615              // Only delay if joining network - not restoring network state
    616              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    617                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000054                ; Setup parameters for call to function osal_rand
   \   000054   12....       LCALL   ??osal_rand?relay
   \   000057   8A..         MOV     ?V0 + 0,R2
   \   000059   A8..         MOV     R0,?V0 + 0
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   747F         MOV     A,#0x7f
   \   000063   58           ANL     A,R0
   \   000064   F8           MOV     R0,A
   \   000065   E0           MOVX    A,@DPTR
   \   000066   28           ADD     A,R0
   \   000067   F8           MOV     R0,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   3400         ADDC    A,#0x0
   \   00006C   F9           MOV     R1,A
   \   00006D   7464         MOV     A,#0x64
   \   00006F   28           ADD     A,R0
   \   000070   FE           MOV     R6,A
   \   000071   E4           CLR     A
   \   000072   39           ADDC    A,R1
   \   000073   FF           MOV     R7,A
    618            }
    619          
    620            // Initialize the security for type of device
    621            ZDApp_SecInit( networkStateNV );
   \   000074                ; Setup parameters for call to function ZDSecMgrInit
   \   000074   7901         MOV     R1,#0x1
   \   000076   12....       LCALL   ??ZDSecMgrInit?relay
    622            
    623            // Trigger the network start
    624            ZDApp_NetworkInit( extendedDelay );
   \   000079                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   FB           MOV     R3,A
   \   00007D   12....       LCALL   ??ZDApp_NetworkInit?relay
    625          
    626            // set broadcast address mask to support broadcast filtering
    627            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000080                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000080   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??NLME_SetBroadcastFilter?relay
    628            
    629            return ( networkStateNV );
   \   000088   7901         MOV     R1,#0x1
   \                     ??ZDOInitDevice_2:
   \   00008A   02....       LJMP    ?Subroutine18 & 0xFFFF
    630          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7A10         MOV     R2,#0x10
   \   000002   02....       LJMP    ?Subroutine20 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine31_0
   \   000006                ; // Fall through to label ??Subroutine31_0
    631          
    632          /*********************************************************************
    633           * @fn      ZDApp_ReadNetworkRestoreState
    634           *
    635           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    636           *          or not to restore the network state.
    637           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    638           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    639           *
    640           * @param   none
    641           *
    642           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    643           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    644           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    645           *          ZCD_NV_STARTUP_OPTION
    646           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    647          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    648          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    649            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    650          
    651            // Look for the New Network State option.
    652            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5001         JNC     ??ZDApp_ReadNetworkRestoreState_0
    653            {
    654              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   00000F   0E           INC     R6
    655            }
    656          
    657            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000010   EE           MOV     A,R6
   \   000011   F9           MOV     R1,A
   \   000012   02....       LJMP    ?Subroutine19 & 0xFFFF
    658          }
    659          
    660          /*********************************************************************
    661           * @fn      ZDAppDetermineDeviceType()
    662           *
    663           * @brief   Determines the type of device to start. 
    664           *
    665           *          Looks at zgDeviceLogicalType and determines what type of
    666           *          device to start.  The types are:
    667           *            ZG_DEVICETYPE_COORDINATOR
    668           *            ZG_DEVICETYPE_ROUTER
    669           *            ZG_DEVICETYPE_ENDDEVICE
    670           *
    671           * @param   none
    672           *
    673           * @return  none
    674           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    675          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    676          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    677            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    678            {
    679              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   7402         MOV     A,#0x2
   \   00000C   90....       MOV     DPTR,#devStartMode
   \   00000F   F0           MOVX    @DPTR,A
    680              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   802E         SJMP    ??ZDAppDetermineDeviceType_1
    681            }
    682            else
    683            {
    684              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700A         JNZ     ??ZDAppDetermineDeviceType_2
    685                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   4401         ORL     A,#0x1
   \   000024   800D         SJMP    ??ZDAppDetermineDeviceType_3
    686              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6402         XRL     A,#0x2
   \   000029   7009         JNZ     ??ZDAppDetermineDeviceType_4
    687                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   54F8         ANL     A,#0xf8
   \   000031   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000033   F0           MOVX    @DPTR,A
    688              
    689              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    690              // The device shall do rejoin the network. Otherwise, do normal join
    691              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000034                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000034   7A..         MOV     R2,#(AIB_apsUseExtendedPANID & 0xff)
   \   000036   7B..         MOV     R3,#((AIB_apsUseExtendedPANID >> 8) & 0xff)
   \   000038   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   00003B   E9           MOV     A,R1
   \   00003C   7003         JNZ     ??ZDAppDetermineDeviceType_5
    692              {
    693                devStartMode = MODE_JOIN;     // Assume joining
   \   00003E   E4           CLR     A
   \   00003F   8002         SJMP    ??ZDAppDetermineDeviceType_6
    694              }
    695              else
    696              {
    697                devStartMode = MODE_REJOIN;  
   \                     ??ZDAppDetermineDeviceType_5:
   \   000041   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_6:
   \   000043   90....       MOV     DPTR,#devStartMode
   \                     ??ZDAppDetermineDeviceType_1:
   \   000046   F0           MOVX    @DPTR,A
    698              }
    699            }
    700          }
   \   000047   02....       LJMP    ??Subroutine29_0 & 0xFFFF
    701          
    702          /*********************************************************************
    703           * @fn      ZDApp_NetworkStartEvt()
    704           *
    705           * @brief   Process the Network Start Event
    706           *
    707           * @param   none
    708           *
    709           * @return  none
    710           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    711          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    712          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    713            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    714            {
    715              // Successfully started a ZigBee network
    716              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    717              {
    718                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    719              }
    720          
    721              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??osal_pwrmgr_device?relay
    722              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802D         SJMP    ??ZDApp_NetworkStartEvt_2
    723            }
    724            else
    725            {
    726              // Try again with a higher energy threshold !!
    727              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   00001F   E9           MOV     A,R1
   \   000020   F8           MOV     R0,A
   \   000021   7410         MOV     A,#0x10
   \   000023   28           ADD     A,R0
   \   000024   F8           MOV     R0,A
   \   000025   E4           CLR     A
   \   000026   3400         ADDC    A,#0x0
   \   000028   F9           MOV     R1,A
   \   000029   E8           MOV     A,R0
   \   00002A   94FF         SUBB    A,#-0x1
   \   00002C   E9           MOV     A,R1
   \   00002D   9400         SUBB    A,#0x0
   \   00002F   C3           CLR     C
   \   000030   65D0         XRL     A,PSW
   \   000032   33           RLC     A
   \   000033   500E         JNC     ??ZDApp_NetworkStartEvt_3
    728              {
    729                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000035                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000035                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000035   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   000038   E9           MOV     A,R1
   \   000039   2410         ADD     A,#0x10
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ??NLME_SetEnergyThreshold?relay
    730                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00003F                ; Setup parameters for call to function osal_set_event
   \   00003F   7A01         MOV     R2,#0x1
   \   000041   8008         SJMP    ??ZDApp_NetworkStartEvt_4
    731              }
    732              else
    733              {
    734                // Failed to start network. Enter a dormant state (until user intervenes)
    735                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000043   7401         MOV     A,#0x1
   \   000045   90....       MOV     DPTR,#devState
   \   000048   F0           MOVX    @DPTR,A
    736                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000049                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000049   7A10         MOV     R2,#0x10
    737              }
    738            }
   \                     ??ZDApp_NetworkStartEvt_4:
   \   00004B   02....       LJMP    ?Subroutine16 & 0xFFFF
    739          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003                REQUIRE ??Subroutine29_0
   \   000003                ; // Fall through to label ??Subroutine29_0
    740          
    741          /*********************************************************************
    742           * @fn      ZDApp_DeviceAuthEvt()
    743           *
    744           * @brief   Process the Device Authentic Event
    745           *
    746           * @param   none
    747           *
    748           * @return  none
    749           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    750          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    751          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    752            // received authentication from trust center
    753            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   701F         JNZ     ??ZDApp_DeviceAuthEvt_0
    754            {
    755              // Stop the reset timer so it doesn't reset
    756              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerCancel?relay
    757          
    758              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine0 & 0xFFFF
    759              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    760          
    761              // Set the Power Manager Device
    762          #if defined ( POWER_SAVING )
    763              osal_pwrmgr_device( PWRMGR_BATTERY );
    764          #endif
    765          
    766              if ( ZSTACK_ROUTER_BUILD )
    767              {
    768                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
    769                {
    770                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    771                  NLME_StartRouterRequest( 0, 0, false );
    772                }
    773              }
    774          
    775              // Notify to save info into NV
    776              ZDApp_NVUpdate();
    777          
    778              // Save off the security
    779              ZDApp_SaveNwkKey();
   \                     ??CrossCallReturnLabel_23:
   \   000012                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000012   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    780          
    781              ZDApp_AnnounceNewAddress();
   \   000015                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000015   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
    782              
    783              if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   \   000018   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   A2E3         MOV     C,0xE0 /* A   */.3
   \   00001E   400B         JC      ??ZDApp_DeviceAuthEvt_0
    784              {
    785                NLME_SetPollRate( ZDApp_SavedPollRate );
   \   000020                ; Setup parameters for call to function NLME_SetPollRate
   \   000020   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   ??NLME_SetPollRate?relay
    786              }
    787            }
    788            else
    789            {
    790              ZDApp_NVUpdate();
    791            }
    792          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   00002B   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7406         MOV     A,#0x6
   \   000002   90....       MOV     DPTR,#devState
   \   000005   F0           MOVX    @DPTR,A
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006   7A10         MOV     R2,#0x10
   \   000008                REQUIRE ?Subroutine20
   \   000008                ; // Fall through to label ?Subroutine20
    793          
    794          /*********************************************************************
    795           * @fn      ZDApp_SaveNetworkStateEvt()
    796           *
    797           * @brief   Process the Save the Network State Event
    798           *
    799           * @param   none
    800           *
    801           * @return  none
    802           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    803          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    804          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    805          #if defined ( NV_RESTORE )
    806           #if defined ( NV_TURN_OFF_RADIO )
    807            // Turn off the radio's receiver during an NV update
    808            uint8 RxOnIdle;
    809            uint8 x = false;
    810            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    811            ZMacSetReq( ZMacRxOnIdle, &x );
    812           #endif
    813          
    814            // Update the Network State in NV
    815            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    816                           NWK_NV_DEVICELIST_ENABLE |
    817                           NWK_NV_BINDING_ENABLE    |
    818                           NWK_NV_ADDRMGR_ENABLE );
    819          
    820            // Reset the NV startup option to resume from NV by
    821            // clearing the "New" join option.
    822            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    823          
    824           #if defined ( NV_TURN_OFF_RADIO )
    825            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    826           #endif
    827          #endif  // NV_RESTORE
    828          }
   \   000000   02....       LJMP    ?BRET
    829          
    830          /*********************************************************************
    831           * @fn      ZDApp_RestoreNetworkState()
    832           *
    833           * @brief   This function will restore the network state of the
    834           *          device if the network state is stored in NV.
    835           *
    836           * @param   none
    837           *
    838           * @return
    839           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    840           *          restored.
    841           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    842           *          This could mean that zgStartupOption said to not restore, or
    843           *          it could mean that there was no network state to restore.
    844           *
    845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    846          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    847          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    848            uint8 nvStat;
    849            nwkActiveKeyItems keyItems;
    850          
    851            // Initialize NWK NV items
    852            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   ??NLME_InitNV?relay
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    853          
    854            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   602F         JZ      ??ZDApp_RestoreNetworkState_0
    855            {
    856              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   ??NLME_RestoreFromNV?relay
   \   000012   E9           MOV     A,R1
   \   000013   6029         JZ      ??ZDApp_RestoreNetworkState_0
    857              {
    858                // Are we a coordinator
    859                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    860                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_47:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   E0           MOVX    A,@DPTR
   \   000022   7002         JNZ     ??ZDApp_RestoreNetworkState_1
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000026   7007         JNZ     ??ZDApp_RestoreNetworkState_2
    861                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000028   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   54F8         ANL     A,#0xf8
   \   00002E   F0           MOVX    @DPTR,A
    862                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   00002F   7401         MOV     A,#0x1
   \   000031   90....       MOV     DPTR,#devStartMode
   \   000034   12....       LCALL   ?Subroutine1 & 0xFFFF
    863                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    864              }
    865              else
    866                nvStat = NV_ITEM_UNINIT;
    867          
    868              if ( ZG_SECURE_ENABLED )
    869              {
    870                nwkFrameCounterChanges = 0;
    871                osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
    872                osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
    873          
    874                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    875                {
    876                  ZDApp_RestoreNwkKey();
    877                }
    878              }
    879          
    880              // The default for RxOnWhenIdle is true for Routers and false for end devices
    881              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
    882              // other than default.
    883            }
    884          
    885            if ( nvStat == ZSUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000037   EE           MOV     A,R6
   \   000038   7004         JNZ     ??ZDApp_RestoreNetworkState_0
    886              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   8002         SJMP    ??ZDApp_RestoreNetworkState_3
    887            else
    888              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   00003E   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_3:
   \   000040                REQUIRE ?Subroutine19
   \   000040                ; // Fall through to label ?Subroutine19
    889          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#((_NIB + 53) & 0xff)
   \   000003   7D..         MOV     R5,#(((_NIB + 53) >> 8) & 0xff)
   \   000005   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000007   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000009   12....       LCALL   ??sAddrExtCpy?relay
   \   00000C   22           RET
    890          
    891          /*********************************************************************
    892           * @fn      ZDApp_InitUserDesc()
    893           *
    894           * @brief   Initialize the User Descriptor, the descriptor is read from NV
    895           *          when needed.  If you want to initialize the User descriptor to
    896           *          something other than all zero, do it here.
    897           *
    898           * @param   none
    899           *
    900           * @return  none
    901           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    902          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
    903          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    904            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
    905          
    906            // Initialize the User Descriptor, the descriptor is read from NV
    907            // when needed.  If you want to initialize the User descriptor to something
    908            // other than all zero, do it here.
    909            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   12....       LCALL   ?Subroutine13 & 0xFFFF
    910            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
    911                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_12:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV     R4,#0x11
   \   000014   7D00         MOV     R5,#0x0
   \   000016   7A81         MOV     R2,#-0x7f
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??osal_nv_item_init?relay
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   E9           MOV     A,R1
   \   000023   7033         JNZ     ??ZDApp_InitUserDesc_0
    912            {
    913              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
    914                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV     ?V0 + 0,#0x11
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A81         MOV     R2,#-0x7f
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   ??osal_nv_read?relay
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   E9           MOV     A,R1
   \   000046   7010         JNZ     ??ZDApp_InitUserDesc_0
    915              {
    916                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6007         JZ      ??ZDApp_InitUserDesc_0
    917                {
    918                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000051   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000054   E0           MOVX    A,@DPTR
   \   000055   D2E4         SETB    0xE0 /* A   */.4
   \   000057   F0           MOVX    @DPTR,A
    919                }
    920              }
    921            }
    922          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000058   7411         MOV     A,#0x11
   \   00005A   02....       LJMP    ??Subroutine24_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   AA82         MOV     R2,DPL
   \   00000C   AB83         MOV     R3,DPH
   \   00000E   12....       LCALL   ??osal_memset?relay
   \   000011                ; Setup parameters for call to function osal_nv_item_init
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   8582..       MOV     ?V0 + 0,DPL
   \   00001A   8583..       MOV     ?V0 + 1,DPH
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   22           RET
    923          
    924          /*********************************************************************
    925           * @fn      ZDAppCheckForHoldKey()
    926           *
    927           * @brief   Check for key to set the device into Hold Auto Start
    928           *
    929           * @param   none
    930           *
    931           * @return  none
    932           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    933          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
    934          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    935          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    936            // Get Keypad directly to see if a HOLD_START is needed.
    937            // Hold down the SW_BYPASS_START key (see OnBoard.h)
    938            // while booting to avoid starting up the device.
    939            if ( HalKeyRead () == SW_BYPASS_START)
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   E9           MOV     A,R1
   \   000008   6401         XRL     A,#0x1
   \   00000A   7005         JNZ     ??ZDAppCheckForHoldKey_0
    940            {
    941              // Change the device state to HOLD on start up
    942              devState = DEV_HOLD;
   \   00000C   E4           CLR     A
   \   00000D   90....       MOV     DPTR,#devState
   \   000010   F0           MOVX    @DPTR,A
    943            }
    944          #endif // HAL_KEY
    945          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000011   02....       LJMP    ??Subroutine29_0 & 0xFFFF
    946          
    947          /*********************************************************************
    948           * @fn      ZDApp_ProcessOSALMsg()
    949           *
    950           * @brief   Process the incoming task message.
    951           *
    952           * @param   msgPtr - message to process
    953           *
    954           * @return  none
    955           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    956          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
    957          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    958            // Data Confirmation message fields
    959            uint8 sentEP;       // This should always be 0
    960            uint8 sentStatus;
    961            afDataConfirm_t *afDataConfirm;
    962            uint8 tmp;
    963          
    964            switch ( msgPtr->event )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E0           MOVX    A,@DPTR
   \   000013   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessOSALMsg>_0`:
   \   000016   00           DB        0
   \   000017   05           DB        5
   \   000018   01           DB        1
   \   000019   ....         DW        ??ZDApp_ProcessOSALMsg_0
   \   00001B   02           DB        2
   \   00001C   ....         DW        ??ZDApp_ProcessOSALMsg_1
   \   00001E   03           DB        3
   \   00001F   ....         DW        ??ZDApp_ProcessOSALMsg_2
   \   000021   1A           DB        26
   \   000022   ....         DW        ??ZDApp_ProcessOSALMsg_3
   \   000024   D3           DB        211
   \   000025   ....         DW        ??ZDApp_ProcessOSALMsg_4
   \   000027   ....         DW        ??ZDApp_ProcessOSALMsg_5
    965            {
    966              // Incoming ZDO Message
    967              case AF_INCOMING_MSG_CMD:
    968                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000029                ; Setup parameters for call to function ZDP_IncomingData
   \   000029   12....       LCALL   ??ZDP_IncomingData?relay
   \   00002C   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    969                break;
    970                
    971              case ZDO_CB_MSG:
    972                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   00002F                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   00002F   12....       LCALL   ??ZDApp_ProcessMsgCBs?relay
   \   000032   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    973                break;
    974          
    975              case AF_DATA_CONFIRM_CMD:
    976                // This message is received as a confirmation of a data packet sent.
    977                // The status is of ZStatus_t type [defined in NLMEDE.h]
    978                // The message fields are defined in AF.h
    979                afDataConfirm = (afDataConfirm_t *)msgPtr;
    980                sentEP = afDataConfirm->endpoint;
    981                sentStatus = afDataConfirm->hdr.status;
    982          
    983                // Action taken when confirmation is received.
    984          #if defined ( ZIGBEE_FREQ_AGILITY )
    985                if ( pZDNwkMgr_ProcessDataConfirm )
    986                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
    987          #endif
    988                (void)sentEP;
    989                (void)sentStatus;
    990                break;
    991          
    992              case ZDO_NWK_DISC_CNF:
    993                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000035   90....       MOV     DPTR,#devState
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6402         XRL     A,#0x2
   \   00003B   6003         JZ      $+5
   \   00003D   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    994                  break;
    995                
    996                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000040   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   6008         JZ      ??ZDApp_ProcessOSALMsg_6
   \   000048   E0           MOVX    A,@DPTR
   \   000049   6402         XRL     A,#0x2
   \   00004B   6003         JZ      $+5
   \   00004D   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    997                {
    998                  if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   6003         JZ      $+5
   \   000058   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   \   00005B   90....       MOV     DPTR,#zdoDiscCounter
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   C3           CLR     C
   \   000060   9403         SUBB    A,#0x3
   \   000062   5003         JNC     $+5
   \   000064   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
    999                  {
   1000                    if ( devStartMode == MODE_JOIN )
   \   000067   EE           MOV     A,R6
   \   000068   2404         ADD     A,#0x4
   \   00006A   F8           MOV     R0,A
   \   00006B   EF           MOV     A,R7
   \   00006C   3400         ADDC    A,#0x0
   \   00006E   F9           MOV     R1,A
   \   00006F   88..         MOV     ?V0 + 0,R0
   \   000071   89..         MOV     ?V0 + 1,R1
   \   000073   EE           MOV     A,R6
   \   000074   2403         ADD     A,#0x3
   \   000076   18           DEC     R0
   \   000077   EF           MOV     A,R7
   \   000078   3400         ADDC    A,#0x0
   \   00007A   F9           MOV     R1,A
   \   00007B   88..         MOV     ?V0 + 2,R0
   \   00007D   89..         MOV     ?V0 + 3,R1
   \   00007F   EE           MOV     A,R6
   \   000080   2402         ADD     A,#0x2
   \   000082   18           DEC     R0
   \   000083   EF           MOV     A,R7
   \   000084   3400         ADDC    A,#0x0
   \   000086   F9           MOV     R1,A
   \   000087   88..         MOV     ?V0 + 4,R0
   \   000089   89..         MOV     ?V0 + 5,R1
   \   00008B   90....       MOV     DPTR,#devStartMode
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   703E         JNZ     ??ZDApp_ProcessOSALMsg_8
   1001                    {
   1002                      devState = DEV_NWK_JOINING;
   \   000091   7403         MOV     A,#0x3
   \   000093   90....       MOV     DPTR,#devState
   \   000096   F0           MOVX    @DPTR,A
   1003            
   1004                      ZDApp_NodeProfileSync((ZDO_NetworkDiscoveryCfm_t *)msgPtr);
   \   000097                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   000097   12....       LCALL   ??ZDApp_NodeProfileSync?relay
   1005            
   1006                      if ( NLME_JoinRequest( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->extendedPANID,
   1007                           BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB ),
   1008                           ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel,
   1009                           ZDO_Config_Node_Descriptor.CapabilityFlags ) != ZSuccess )
   \   00009A                ; Setup parameters for call to function NLME_JoinRequest
   \   00009A   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F5..         MOV     ?V0 + 6,A
   \   0000A0   78..         MOV     R0,#?V0 + 6
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A5   85..82       MOV     DPL,?V0 + 0
   \   0000A8   85..83       MOV     DPH,?V0 + 1
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F9           MOV     R1,A
   \   0000AD   85..82       MOV     DPL,?V0 + 4
   \   0000B0   85..83       MOV     DPH,?V0 + 5
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   FC           MOV     R4,A
   \   0000B5   85..82       MOV     DPL,?V0 + 2
   \   0000B8   85..83       MOV     DPH,?V0 + 3
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   FD           MOV     R5,A
   \   0000BD   EE           MOV     A,R6
   \   0000BE   2406         ADD     A,#0x6
   \   0000C0   FA           MOV     R2,A
   \   0000C1   EF           MOV     A,R7
   \   0000C2   3400         ADDC    A,#0x0
   \   0000C4   FB           MOV     R3,A
   \   0000C5   12....       LCALL   ??NLME_JoinRequest?relay
   \   0000C8   7401         MOV     A,#0x1
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   807A         SJMP    ??ZDApp_ProcessOSALMsg_9
   1010                      {
   1011                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1012                            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1013                      }
   1014                    }
   1015                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   0000CF   6403         XRL     A,#0x3
   \   0000D1   707C         JNZ     ??CrossCallReturnLabel_6
   1016                    {
   1017                      devState = DEV_NWK_REJOIN;
   \   0000D3   7404         MOV     A,#0x4
   \   0000D5   90....       MOV     DPTR,#devState
   \   0000D8   F0           MOVX    @DPTR,A
   1018          
   1019                      // Before trying to do rejoin, check if the device has a valid short address
   1020                      // If not, generate a random short address for itself
   1021                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   0000D9   90....       MOV     DPTR,#(_NIB + 20)
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   64FE         XRL     A,#0xfe
   \   0000DF   7004         JNZ     ??ZDApp_ProcessOSALMsg_10
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0000E5   7012         JNZ     ??ZDApp_ProcessOSALMsg_11
   1022                      {
   1023                        _NIB.nwkDevAddress = osal_rand();
   \   0000E7                ; Setup parameters for call to function osal_rand
   \   0000E7   12....       LCALL   ??osal_rand?relay
   \   0000EA   90....       MOV     DPTR,#(_NIB + 20)
   \   0000ED   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   1024                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \                     ??CrossCallReturnLabel_48:
   \   0000F0                ; Setup parameters for call to function ZMacSetReq
   \   0000F0   7A..         MOV     R2,#((_NIB + 20) & 0xff)
   \   0000F2   7B..         MOV     R3,#(((_NIB + 20) >> 8) & 0xff)
   \   0000F4   7953         MOV     R1,#0x53
   \   0000F6   12....       LCALL   ??ZMacSetReq?relay
   1025                      }
   1026          
   1027                      if ( ZG_SECURE_ENABLED )
   1028                      {
   1029                        ZDApp_RestoreNwkKey();
   1030                      }
   1031                      
   1032                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1033                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0000F9   90....       MOV     DPTR,#(_NIB + 33)
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   64FE         XRL     A,#0xfe
   \   0000FF   7004         JNZ     ??ZDApp_ProcessOSALMsg_12
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   000105   7021         JNZ     ??ZDApp_ProcessOSALMsg_13
   1034                      {
   1035                        _NIB.nwkPanId = BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB );
   \   000107   85..82       MOV     DPL,?V0 + 4
   \   00010A   85..83       MOV     DPH,?V0 + 5
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   FA           MOV     R2,A
   \   00010F   85..82       MOV     DPL,?V0 + 2
   \   000112   85..83       MOV     DPH,?V0 + 3
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F9           MOV     R1,A
   \   000117   EA           MOV     A,R2
   \   000118   90....       MOV     DPTR,#(_NIB + 33)
   \   00011B   F0           MOVX    @DPTR,A
   \   00011C   A3           INC     DPTR
   \   00011D   E9           MOV     A,R1
   \   00011E   F0           MOVX    @DPTR,A
   1036                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   00011F                ; Setup parameters for call to function ZMacSetReq
   \   00011F   7A..         MOV     R2,#((_NIB + 33) & 0xff)
   \   000121   7B..         MOV     R3,#(((_NIB + 33) >> 8) & 0xff)
   \   000123   7950         MOV     R1,#0x50
   \   000125   12....       LCALL   ??ZMacSetReq?relay
   1037                      }
   1038          
   1039                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   000128   7401         MOV     A,#0x1
   \   00012A   85..82       MOV     DPL,?XSP + 0
   \   00012D   85..83       MOV     DPH,?XSP + 1
   \   000130   F0           MOVX    @DPTR,A
   1040                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin 
   \   000131                ; Setup parameters for call to function ZMacSetReq
   \   000131   AA82         MOV     R2,DPL
   \   000133   AB83         MOV     R3,DPH
   \   000135   7952         MOV     R1,#0x52
   \   000137   12....       LCALL   ??ZMacSetReq?relay
   1041                      if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel) != ZSuccess )
   \   00013A                ; Setup parameters for call to function NLME_ReJoinRequest
   \   00013A   85..82       MOV     DPL,?V0 + 0
   \   00013D   85..83       MOV     DPH,?V0 + 1
   \   000140   E0           MOVX    A,@DPTR
   \   000141   F9           MOV     R1,A
   \   000142   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000144   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000146   12....       LCALL   ??NLME_ReJoinRequest?relay
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000149   E9           MOV     A,R1
   \   00014A   6003         JZ      ??CrossCallReturnLabel_6
   1042                      {
   1043                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1044                            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   00014C                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00014C                ; Setup parameters for call to function osal_rand
   \   00014C   12....       LCALL   ?Subroutine9 & 0xFFFF
   1045                      }
   1046                    }
   1047            
   1048                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_6:
   \   00014F   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000152   E0           MOVX    A,@DPTR
   \   000153   A2E3         MOV     C,0xE0 /* A   */.3
   \   000155   5062         JNC     ??ZDApp_ProcessOSALMsg_5
   1049                    {
   1050                      // The receiver is on, turn network layer polling off.
   1051                      NLME_SetPollRate( 0 );
   \   000157                ; Setup parameters for call to function NLME_SetPollRate
   \   000157   12....       LCALL   ?Subroutine12 & 0xFFFF
   1052                      NLME_SetQueuedPollRate( 0 );
   1053                      NLME_SetResponseRate( 0 );
   1054                    }
   1055                    else
   1056                    {
   1057                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1058                      {
   1059                        ZDApp_SavedPollRate = zgPollRate;
   1060                        NLME_SetPollRate( zgRejoinPollRate );
   1061                      }
   1062                    }
   1063                  }
   \                     ??CrossCallReturnLabel_10:
   \   00015A   805D         SJMP    ??ZDApp_ProcessOSALMsg_5
   1064                  else
   1065                  {
   1066                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   00015C   90....       MOV     DPTR,#continueJoining
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   6057         JZ      ??ZDApp_ProcessOSALMsg_5
   1067                    {
   1068              #if defined ( MANAGED_SCAN )
   1069                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1070              #else
   1071                      zdoDiscCounter++;
   \   000162   90....       MOV     DPTR,#zdoDiscCounter
   \   000165   E0           MOVX    A,@DPTR
   \   000166   04           INC     A
   \   000167   F0           MOVX    @DPTR,A
   1072                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1073                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   000168                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000168                ; Setup parameters for call to function osal_rand
   \   000168   12....       LCALL   ??osal_rand?relay
   \   00016B   8A..         MOV     ?V0 + 0,R2
   \   00016D   74FF         MOV     A,#-0x1
   \   00016F   55..         ANL     A,?V0 + 0
   \   000171   F8           MOV     R0,A
   \   000172   7464         MOV     A,#0x64
   \   000174   28           ADD     A,R0
   \   000175   FA           MOV     R2,A
   \   000176   E4           CLR     A
   \   000177   3400         ADDC    A,#0x0
   \   000179   FB           MOV     R3,A
   \   00017A   803A         SJMP    ??ZDApp_ProcessOSALMsg_14
   1074              #endif
   1075                    }
   1076                  }
   1077                }
   1078                break;
   1079          
   1080              case ZDO_NWK_JOIN_IND:
   1081                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   00017C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   6401         XRL     A,#0x1
   \   000182   6005         JZ      ??ZDApp_ProcessOSALMsg_15
   \   000184   E0           MOVX    A,@DPTR
   \   000185   6402         XRL     A,#0x2
   \   000187   7030         JNZ     ??ZDApp_ProcessOSALMsg_5
   1082                {
   1083                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   000189                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   000189   12....       LCALL   ??ZDApp_ProcessNetworkJoin?relay
   \   00018C   802B         SJMP    ??ZDApp_ProcessOSALMsg_5
   1084                }
   1085                break;
   1086          
   1087              case ZDO_NWK_JOIN_REQ:
   1088                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   00018E   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000191   E0           MOVX    A,@DPTR
   \   000192   6401         XRL     A,#0x1
   \   000194   6005         JZ      ??ZDApp_ProcessOSALMsg_16
   \   000196   E0           MOVX    A,@DPTR
   \   000197   6402         XRL     A,#0x2
   \   000199   701E         JNZ     ??ZDApp_ProcessOSALMsg_5
   1089                {
   1090                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   00019B   E4           CLR     A
   \   00019C   90....       MOV     DPTR,#retryCnt
   \   00019F   F0           MOVX    @DPTR,A
   1091                  devStartMode = MODE_RESUME;
   \   0001A0   7401         MOV     A,#0x1
   \   0001A2   90....       MOV     DPTR,#devStartMode
   \   0001A5   F0           MOVX    @DPTR,A
   1092                  _tmpRejoinState = true;
   \   0001A6   90....       MOV     DPTR,#_tmpRejoinState
   \   0001A9   12....       LCALL   ?Subroutine1 & 0xFFFF
   1093                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1094                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \                     ??CrossCallReturnLabel_1:
   \   0001AC   7402         MOV     A,#0x2
   \   0001AE   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   0001B1   F0           MOVX    @DPTR,A
   1095                  ZDApp_NetworkInit( 0 );
   \   0001B2                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001B2   7A00         MOV     R2,#0x0
   \   0001B4   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   0001B6   12....       LCALL   ??ZDApp_NetworkInit?relay
   1096                }
   1097                break;
   1098          
   1099              default:
   1100                if ( ZG_SECURE_ENABLED )
   1101                  ZDApp_ProcessSecMsg( msgPtr );
   1102                break;
   1103            }
   1104          
   1105          }
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   0001B9   7401         MOV     A,#0x1
   \   0001BB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001BE   7F07         MOV     R7,#0x7
   \   0001C0   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
   \   000004   12....       LCALL   ??NLME_SetPollRate?relay
   \   000007                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000007                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   ??NLME_SetQueuedPollRate?relay
   \   00000E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ??NLME_SetResponseRate?relay
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ??osal_rand?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   747F         MOV     A,#0x7f
   \   000007   55..         ANL     A,?V0 + 0
   \   000009   F8           MOV     R0,A
   \   00000A   7464         MOV     A,#0x64
   \   00000C   28           ADD     A,R0
   \   00000D   FA           MOV     R2,A
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   12....       LCALL   ??ZDApp_NetworkInit?relay
   \   000013   22           RET
   1106          
   1107          /*********************************************************************
   1108           * @fn      ZDApp_ProcessMsgCBs()
   1109           *
   1110           * @brief   Process response messages
   1111           *
   1112           * @param   none
   1113           *
   1114           * @return  none
   1115           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1116          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1117          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine11 & 0xFFFF
   1118            switch ( inMsg->clusterID )
   \                     ??CrossCallReturnLabel_39:
   \   00000D   F5..         MOV     ?V0 + 0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000018   0200         DW        2
   \   00001A   2100         DW        33
   \   00001C   2200         DW        34
   \   00001E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000020   0080         DW        32768
   \   000022   0180         DW        32769
   \   000024   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000026   0000         DW        0
   \   000028   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1119            {
   1120          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1121              case NWK_addr_rsp:
   1122              case IEEE_addr_rsp:
   1123                {
   1124                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1125                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00002A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002A   12....       LCALL   ??ZDO_ParseAddrRsp?relay
   \   00002D   8A..         MOV     ?V0 + 0,R2
   \   00002F   8B..         MOV     ?V0 + 1,R3
   \   000031   AE..         MOV     R6,?V0 + 0
   \   000033   AF..         MOV     R7,?V0 + 1
   1126                  if ( pAddrRsp )
   \   000035   EE           MOV     A,R6
   \   000036   7001         JNZ     ??ZDApp_ProcessMsgCBs_3
   \   000038   EF           MOV     A,R7
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   000039   603F         JZ      ??ZDApp_ProcessMsgCBs_2
   1127                  {
   1128                    if ( pAddrRsp->status == ZSuccess )
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   7011         JNZ     ??ZDApp_ProcessMsgCBs_4
   1129                    {
   1130                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000042                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000042   EE           MOV     A,R6
   \   000043   2403         ADD     A,#0x3
   \   000045   FC           MOV     R4,A
   \   000046   EF           MOV     A,R7
   \   000047   3400         ADDC    A,#0x0
   \   000049   FD           MOV     R5,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FB           MOV     R3,A
   \   000050   12....       LCALL   ??ZDO_UpdateAddrManager?relay
   1131                    }
   1132                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   000053                ; Setup parameters for call to function osal_mem_free
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   EF           MOV     A,R7
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   ??osal_mem_free?relay
   \   00005A   801E         SJMP    ??ZDApp_ProcessMsgCBs_2
   1133                  }
   1134                }
   1135                break;
   1136          #endif
   1137                
   1138          #if defined ( REFLECTOR )
   1139              case Bind_req:
   1140              case Unbind_req:
   1141                {
   1142                  ZDO_BindUnbindReq_t bindReq;
   1143                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   00005C                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   AC82         MOV     R4,DPL
   \   000064   AD83         MOV     R5,DPH
   \   000066   12....       LCALL   ??ZDO_ParseBindUnbindReq?relay
   1144                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000069                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   AC82         MOV     R4,DPL
   \   000071   AD83         MOV     R5,DPH
   \   000073   EE           MOV     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   ??ZDO_ProcessBindUnbindReq?relay
   1145                }
   1146                break;
   1147          #endif      
   1148          
   1149          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1150              case Bind_rsp:
   1151              case Unbind_rsp:
   1152                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1153                {
   1154                  ZDMatchSendState(
   1155                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1156                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1157                }
   1158                break;
   1159                
   1160              case End_Device_Bind_req:
   1161                if (ZG_DEVICE_COORDINATOR_TYPE)
   1162                {
   1163                  ZDEndDeviceBind_t bindReq;
   1164                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1165                  ZDO_MatchEndDeviceBind( &bindReq );
   1166                  
   1167                  SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;      //modify by jacky
   1168                  SerialApp_TxAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   1169                  SerialApp_TxAddr.endPoint = 11; 
   1170                  
   1171                  // Freeing the cluster lists - if allocated.
   1172                  if ( bindReq.numInClusters )      
   1173                    osal_mem_free( bindReq.inClusters );
   1174                  if ( bindReq.numOutClusters )
   1175                    osal_mem_free( bindReq.outClusters );
   1176                }
   1177                break;
   1178          #endif
   1179            }
   1180          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00007A                REQUIRE ?Subroutine23
   \   00007A                ; // Fall through to label ?Subroutine23

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine24_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   EE           MOV     A,R6
   \   000005   240C         ADD     A,#0xc
   \   000007                REQUIRE ??Subroutine30_0
   \   000007                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
   1181          
   1182          /*********************************************************************
   1183           * @fn      ZDApp_RegisterCBs()
   1184           *
   1185           * @brief   Process response messages
   1186           *
   1187           * @param   none
   1188           *
   1189           * @return  none
   1190           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1191          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1192          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1193          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1194            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   12....       LCALL   ?Subroutine5 & 0xFFFF
   1195          #endif
   1196          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1197            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_28:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   12....       LCALL   ?Subroutine5 & 0xFFFF
   1198          #endif  
   1199          #if ZG_BUILD_COORDINATOR_TYPE
   1200            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1201            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1202            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1203          #endif
   1204          #if defined ( REFLECTOR )
   1205            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_29:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV     R2,#0x21
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   1206            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_30:
   \   000015                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000015   7A22         MOV     R2,#0x22
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   1207          #endif  
   1208          }
   \                     ??CrossCallReturnLabel_31:
   \   00001C   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7B80         MOV     R3,#-0x80
   \   000002                REQUIRE ??Subroutine26_0
   \   000002                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   \   000008   22           RET
   1209          
   1210          /*********************************************************************
   1211           * @fn      ZDApp_ProcessSecMsg()
   1212           *
   1213           * @brief   Process the incoming security message.
   1214           *
   1215           * @param   msgPtr - message to process
   1216           *
   1217           * @return  none
   1218           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1219          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1220          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1221            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessSecMsg>_0`:
   \   00000C   00           DB        0
   \   00000D   02           DB        2
   \   00000E   06           DB        6
   \   00000F   ....         DW        ??ZDApp_ProcessSecMsg_0
   \   000011   0A           DB        10
   \   000012   ....         DW        ??ZDApp_ProcessSecMsg_1
   \   000014   ....         DW        ??ZDApp_ProcessSecMsg_2
   1222            {
   1223              case ZDO_ESTABLISH_KEY_CFM:
   1224                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1225                {
   1226                  ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
   1227                }
   1228                break;
   1229          
   1230              case ZDO_ESTABLISH_KEY_IND:
   1231                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1232                {
   1233                  if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1234                  {
   1235                    ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
   1236                  }
   1237                }
   1238                break;
   1239          
   1240              case ZDO_TRANSPORT_KEY_IND:
   1241                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000016   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6401         XRL     A,#0x1
   \   00001C   6005         JZ      ??ZDApp_ProcessSecMsg_3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6402         XRL     A,#0x2
   \   000021   7015         JNZ     ??ZDApp_ProcessSecMsg_2
   1242                {
   1243                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000023                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000023   12....       LCALL   ??ZDSecMgrTransportKeyInd?relay
   \   000026   8010         SJMP    ??ZDApp_ProcessSecMsg_2
   1244                }
   1245                break;
   1246          
   1247              case ZDO_UPDATE_DEVICE_IND:
   1248                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1249                {
   1250                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1251                }
   1252                break;
   1253          
   1254              case ZDO_REMOVE_DEVICE_IND:
   1255                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1256                {
   1257                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1258                }
   1259                break;
   1260          
   1261              case ZDO_REQUEST_KEY_IND:
   1262                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1263                {
   1264                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1265                  {
   1266                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1267                  }
   1268                }
   1269                break;
   1270          
   1271              case ZDO_SWITCH_KEY_IND:
   1272                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000028   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6401         XRL     A,#0x1
   \   00002E   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6402         XRL     A,#0x2
   \   000033   7003         JNZ     ??ZDApp_ProcessSecMsg_2
   1273                {
   1274                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000035                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000035   12....       LCALL   ??ZDSecMgrSwitchKeyInd?relay
   1275                }
   1276                break;
   1277              
   1278              case ZDO_AUTHENTICATE_IND:
   1279                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1280                {
   1281                  ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
   1282                }
   1283                break;
   1284          
   1285              case ZDO_AUTHENTICATE_CFM:
   1286                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1287                {
   1288                  ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
   1289                }
   1290                break;
   1291          
   1292              default:
   1293                // Unsupported messages
   1294                break;
   1295            }
   1296          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000038   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   1297          
   1298          /*********************************************************************
   1299           * @fn      ZDApp_ProcessNetworkJoin()
   1300           *
   1301           * @brief
   1302           *
   1303           *   Save off the Network key information.
   1304           *
   1305           * @param   none
   1306           *
   1307           * @return  none
   1308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1309          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1310          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1311            if ( (devState == DEV_NWK_JOINING) ||
   1312                ((devState == DEV_NWK_ORPHAN)  &&
   1313                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1314            {
   1315              // Result of a Join attempt by this device.
   1316              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7017         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1317              {
   1318                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   12....       LCALL   ?Subroutine4 & 0xFFFF
   1319          
   1320          #if defined ( POWER_SAVING )
   1321                osal_pwrmgr_device( PWRMGR_BATTERY );
   1322          #endif
   1323          
   1324                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1325                {
   1326                  // wait for auth from trust center!!
   1327                  devState = DEV_END_DEVICE_UNAUTH;
   1328          
   1329                  // Start the reset timer for MAX UNAUTH time
   1330                  ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
   1331                }
   1332                else
   1333                {
   1334                  if ( ZSTACK_ROUTER_BUILD )
   1335                  {
   1336                    if ( devState == DEV_NWK_ORPHAN 
   1337                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1338                    {
   1339                      // Change NIB state to router for restore
   1340                      _NIB.nwkState = NWK_ROUTER;
   1341                    }
   1342                  }
   1343                          
   1344                  if ( devState == DEV_NWK_JOINING )
   \                     ??CrossCallReturnLabel_18:
   \   000030   90....       MOV     DPTR,#devState
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6403         XRL     A,#0x3
   \   000036   7003         JNZ     ??ZDApp_ProcessNetworkJoin_4
   1345                  {
   1346                    ZDApp_AnnounceNewAddress();
   \   000038                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000038   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1347                  }
   1348                  
   1349                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   00003B   7406         MOV     A,#0x6
   \   00003D   90....       MOV     DPTR,#devState
   \   000040   F0           MOVX    @DPTR,A
   1350                  if ( ZSTACK_ROUTER_BUILD )
   \   000041   02....       LJMP    ??CrossCallReturnLabel_19 & 0xFFFF
   1351                  {
   1352                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1353                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1354                    {
   1355                      NLME_StartRouterRequest( 0, 0, false );
   1356                    }
   1357                  }
   1358                }
   1359              }
   1360              else
   1361              {
   1362                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000044   90....       MOV     DPTR,#devStartMode
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6401         XRL     A,#0x1
   \   00004A   7031         JNZ     ??ZDApp_ProcessNetworkJoin_5
   \   00004C   90....       MOV     DPTR,#retryCnt
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   04           INC     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   C3           CLR     C
   \   000053   9403         SUBB    A,#0x3
   \   000055   4026         JC      ??ZDApp_ProcessNetworkJoin_5
   1363                {
   1364                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000057   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00005A   7003         JNZ     ??ZDApp_ProcessNetworkJoin_6
   \   00005C   74FF         MOV     A,#-0x1
   \   00005E   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00005F   600A         JZ      ??ZDApp_ProcessNetworkJoin_7
   \   000061   74FE         MOV     A,#-0x2
   \   000063   68           XRL     A,R0
   \   000064   7003         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   000066   74FF         MOV     A,#-0x1
   \   000068   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000069   7006         JNZ     ??ZDApp_ProcessNetworkJoin_9
   1365                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   00006B   E4           CLR     A
   \   00006C   90....       MOV     DPTR,#devStartMode
   \   00006F   800B         SJMP    ??ZDApp_ProcessNetworkJoin_10
   1366                  else
   1367                  {
   1368                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000071   7403         MOV     A,#0x3
   \   000073   90....       MOV     DPTR,#devStartMode
   \   000076   F0           MOVX    @DPTR,A
   1369                    _tmpRejoinState = true;
   \   000077   7401         MOV     A,#0x1
   \   000079   90....       MOV     DPTR,#_tmpRejoinState
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   00007C   F0           MOVX    @DPTR,A
   1370                  }
   1371                }
   1372          
   1373                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1374                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00007D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00007D   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000080   8A..         MOV     ?V0 + 0,R2
   \   000082   8B..         MOV     ?V0 + 1,R3
   \   000084   74FE         MOV     A,#-0x2
   \   000086   65..         XRL     A,?V0 + 0
   \   000088   7004         JNZ     ??ZDApp_ProcessNetworkJoin_11
   \   00008A   74FF         MOV     A,#-0x1
   \   00008C   65..         XRL     A,?V0 + 1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   00008E   700E         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   000090   90....       MOV     DPTR,#(_NIB + 20)
   \   000093   E0           MOVX    A,@DPTR
   \   000094   64FE         XRL     A,#0xfe
   \   000096   7004         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   00009C   6026         JZ      ??ZDApp_ProcessNetworkJoin_14
   1375                {
   1376                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   00009E   85..82       MOV     DPL,?XSP + 0
   \   0000A1   85..83       MOV     DPH,?XSP + 1
   \   0000A4   74FE         MOV     A,#-0x2
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   74FF         MOV     A,#-0x1
   \   0000AA   F0           MOVX    @DPTR,A
   1377                  // Invalidate nwk addr so end device does not use in its data reqs.
   1378                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000AB   90....       MOV     DPTR,#(_NIB + 20)
   \   0000AE   74FE         MOV     A,#-0x2
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   74FF         MOV     A,#-0x1
   \   0000B4   F0           MOVX    @DPTR,A
   1379                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000B5                ; Setup parameters for call to function ZMacSetReq
   \   0000B5   85..82       MOV     DPL,?XSP + 0
   \   0000B8   85..83       MOV     DPH,?XSP + 1
   \   0000BB   AA82         MOV     R2,DPL
   \   0000BD   AB83         MOV     R3,DPH
   \   0000BF   7953         MOV     R1,#0x53
   \   0000C1   12....       LCALL   ??ZMacSetReq?relay
   1380                }
   1381          
   1382                // Clear the neighbor Table and network discovery tables.
   1383                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000C4                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000C4   12....       LCALL   ??nwkNeighborInitTable?relay
   1384                NLME_NwkDiscTerm();
   \   0000C7                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000C7   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1385          
   1386                zdoDiscCounter = 1;
   \   0000CA   7401         MOV     A,#0x1
   \   0000CC   90....       MOV     DPTR,#zdoDiscCounter
   \   0000CF   F0           MOVX    @DPTR,A
   1387          
   1388          //      ZDApp_NetworkInit( (uint16)
   1389          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1390          //                          (NWK_START_DELAY * 5)) );
   1391                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1392                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000D0                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000D0                ; Setup parameters for call to function osal_rand
   1393              }
   1394            }
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000D0   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000D3   8077         SJMP    ??CrossCallReturnLabel_19
   1395            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   6404         XRL     A,#0x4
   \   0000D8   7064         JNZ     ??ZDApp_ProcessNetworkJoin_16
   1396            {
   1397              // results of an orphaning attempt by this device
   1398              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   0000DA   90....       MOV     DPTR,#nwkStatus
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   7013         JNZ     ??ZDApp_ProcessNetworkJoin_17
   1399              {
   1400                if ( ZG_SECURE_ENABLED )
   1401                {
   1402                  ZDApp_RestoreNwkKey();
   1403                }
   1404                
   1405                devState = DEV_END_DEVICE;
   \   0000E0   12....       LCALL   ?Subroutine0 & 0xFFFF
   1406                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1407                // setup Power Manager Device
   1408          #if defined ( POWER_SAVING )
   1409                osal_pwrmgr_device( PWRMGR_BATTERY );
   1410          #endif
   1411          
   1412                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_24:
   \   0000E3   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000E9   5003         JNC     ??CrossCallReturnLabel_11
   1413                {
   1414                  // The receiver is on, turn network layer polling off.
   1415                  NLME_SetPollRate( 0 );
   \   0000EB                ; Setup parameters for call to function NLME_SetPollRate
   \   0000EB   12....       LCALL   ?Subroutine12 & 0xFFFF
   1416                  NLME_SetQueuedPollRate( 0 );
   1417                  NLME_SetResponseRate( 0 );
   1418                }
   1419          
   1420                if ( ZSTACK_ROUTER_BUILD )
   1421                {
   1422                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1423                  if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1424                  {
   1425                    NLME_StartRouterRequest( 0, 0, false );
   1426                  }
   1427                }
   1428                
   1429                ZDApp_AnnounceNewAddress();
   \                     ??CrossCallReturnLabel_11:
   \   0000EE                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0000EE   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   \   0000F1   8059         SJMP    ??CrossCallReturnLabel_19
   1430              }
   1431              else
   1432              {
   1433                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   0000F3   90....       MOV     DPTR,#devStartMode
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   6401         XRL     A,#0x1
   \   0000F9   703B         JNZ     ??ZDApp_ProcessNetworkJoin_18
   1434                {
   1435                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   0000FB   90....       MOV     DPTR,#retryCnt
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   04           INC     A
   \   000100   F0           MOVX    @DPTR,A
   \   000101   C3           CLR     C
   \   000102   9404         SUBB    A,#0x4
   \   000104   5028         JNC     ??ZDApp_ProcessNetworkJoin_19
   1436                  {
   1437                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000106   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000109   7003         JNZ     ??ZDApp_ProcessNetworkJoin_20
   \   00010B   74FF         MOV     A,#-0x1
   \   00010D   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   00010E   600A         JZ      ??ZDApp_ProcessNetworkJoin_21
   \   000110   74FE         MOV     A,#-0x2
   \   000112   68           XRL     A,R0
   \   000113   7003         JNZ     ??ZDApp_ProcessNetworkJoin_22
   \   000115   74FF         MOV     A,#-0x1
   \   000117   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000118   7007         JNZ     ??ZDApp_ProcessNetworkJoin_23
   1438                      devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   00011A   E4           CLR     A
   \   00011B   90....       MOV     DPTR,#devStartMode
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   00011E   F0           MOVX    @DPTR,A
   \   00011F   8015         SJMP    ??ZDApp_ProcessNetworkJoin_18
   1439                    else
   1440                    {
   1441                      devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000121   7403         MOV     A,#0x3
   \   000123   90....       MOV     DPTR,#devStartMode
   \   000126   F0           MOVX    @DPTR,A
   1442                      _tmpRejoinState = true;
   \   000127   7401         MOV     A,#0x1
   \   000129   90....       MOV     DPTR,#_tmpRejoinState
   \   00012C   80F0         SJMP    ??ZDApp_ProcessNetworkJoin_24
   1443                    }
   1444                  }
   1445                  // Do a normal join to the network after certain times of rejoin retries
   1446                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   00012E   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   000131   E0           MOVX    A,@DPTR
   \   000132   6401         XRL     A,#0x1
   \   000134   60E4         JZ      ??ZDApp_ProcessNetworkJoin_21
   1447                  {
   1448                    devStartMode = MODE_JOIN;
   1449                  }
   1450                }
   1451          
   1452                // Clear the neighbor Table and network discovery tables.
   1453                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   000136                ; Setup parameters for call to function nwkNeighborInitTable
   \   000136   12....       LCALL   ??nwkNeighborInitTable?relay
   1454                NLME_NwkDiscTerm();
   \   000139                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000139   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1455          
   1456                // setup a retry for later...
   1457                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1458                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   00013C                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00013C                ; Setup parameters for call to function osal_rand
   \   00013C   8092         SJMP    ??ZDApp_ProcessNetworkJoin_15
   1459              }
   1460            }
   1461          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1462            else
   1463            {
   1464              // Assume from address conflict
   1465              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   00013E   90....       MOV     DPTR,#(_NIB + 96)
   \   000141   E0           MOVX    A,@DPTR
   \   000142   6402         XRL     A,#0x2
   \   000144   7006         JNZ     ??CrossCallReturnLabel_19
   1466              {
   1467                // Notify the network
   1468                ZDApp_AnnounceNewAddress();
   \   000146                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000146   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1469                
   1470                // Notify apps
   1471                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000149                ; Setup parameters for call to function osal_set_event
   \   000149   12....       LCALL   ?Subroutine4 & 0xFFFF
   1472              }
   1473            }
   1474          #endif
   1475          }
   \                     ??CrossCallReturnLabel_19:
   \   00014C   02....       LJMP    ?Subroutine18 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#(_NIB + 33)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   74FF         MOV     A,#-0x1
   \   00000A   68           XRL     A,R0
   \   00000B   22           RET
   1476          
   1477          /*********************************************************************
   1478           * @fn      ZDApp_SaveNwkKey()
   1479           *
   1480           * @brief   Save off the Network key information.
   1481           *
   1482           * @param   none
   1483           *
   1484           * @return  none
   1485           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1486          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1487          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1488            nwkActiveKeyItems keyItems;
   1489          
   1490            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AA82         MOV     R2,DPL
   \   000012   AB83         MOV     R3,DPH
   \   000014   12....       LCALL   ??SSP_ReadNwkActiveKey?relay
   1491            keyItems.frameCounter++;
   \   000017   90....       MOV     DPTR,#__Constant_1
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?L_MOV_X
   \   00001F   7411         MOV     A,#0x11
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_ADD_TO_X
   1492          
   1493            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1494                          (void *)&keyItems );
   \   000029                ; Setup parameters for call to function osal_nv_write
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   8582..       MOV     ?V0 + 0,DPL
   \   000032   8583..       MOV     ?V0 + 1,DPH
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..15       MOV     ?V0 + 0,#0x15
   \   00003D   75..00       MOV     ?V0 + 1,#0x0
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   1495          
   1496            nwkFrameCounterChanges = 0;
   \   00004B   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   F0           MOVX    @DPTR,A
   1497          }
   \   000052                REQUIRE ?Subroutine21
   \   000052                ; // Fall through to label ?Subroutine21

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7415         MOV     A,#0x15
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F04         MOV     R7,#0x4
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   7C00         MOV     R4,#0x0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A82         MOV     R2,#-0x7e
   \   000006                REQUIRE ??Subroutine27_0
   \   000006                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_nv_write?relay
   \   000005   7404         MOV     A,#0x4
   \   000007   22           RET
   1498          
   1499          /*********************************************************************
   1500           * @fn      ZDApp_ResetNwkKey()
   1501           *
   1502           * @brief   Reset the Network key information in NV.
   1503           *
   1504           * @param   none
   1505           *
   1506           * @return  none
   1507           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1508          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1509          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1510            nwkActiveKeyItems keyItems;
   1511          
   1512            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   12....       LCALL   ?Subroutine13 & 0xFFFF
   1513            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1514                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_13:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV     ?V0 + 0,#0x15
   \   000015   75..00       MOV     ?V0 + 1,#0x0
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
   1515          }
   \   000023   02....       LJMP    ?Subroutine23 & 0xFFFF
   1516          
   1517          /*********************************************************************
   1518           * @fn      ZDApp_RestoreNwkKey()
   1519           *
   1520           * @brief
   1521           *
   1522           *   Save off the Network key information.
   1523           *
   1524           * @param   none
   1525           *
   1526           * @return  true if restored from NV, false if not
   1527           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1528          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1529          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1530            nwkActiveKeyItems keyItems;
   1531            uint8 ret = false;
   \   00000A   7E00         MOV     R6,#0x0
   1532          
   1533            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1534                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   8582..       MOV     ?V0 + 0,DPL
   \   000015   8583..       MOV     ?V0 + 1,DPH
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV     ?V0 + 0,#0x15
   \   000020   8E..         MOV     ?V0 + 1,R6
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A82         MOV     R2,#-0x7e
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ??osal_nv_read?relay
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   E9           MOV     A,R1
   \   000038   702F         JNZ     ??ZDApp_RestoreNwkKey_0
   1535            {
   1536              if ( keyItems.frameCounter > 0 )
   \   00003A   7411         MOV     A,#0x11
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?L_MOV_X
   \   000044   90....       MOV     DPTR,#__Constant_0
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?L_EQ_X
   \   00004C   6011         JZ      ??ZDApp_RestoreNwkKey_1
   1537              {
   1538                // Restore the key information
   1539                keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
   1540                nwkFrameCounter = keyItems.frameCounter;
   \   00004E   90....       MOV     DPTR,#__Constant_3e8
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?L_ADD_X
   \   000056   90....       MOV     DPTR,#nwkFrameCounter
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?L_MOV_TO_X
   1541                ret = true;
   \   00005E   0E           INC     R6
   1542              }
   1543          
   1544              // Force a save for the first frame counter increment
   1545              nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   00005F   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000062   74E9         MOV     A,#-0x17
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   7403         MOV     A,#0x3
   \   000068   F0           MOVX    @DPTR,A
   1546            }
   1547            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000069   EE           MOV     A,R6
   \   00006A   F9           MOV     R1,A
   \   00006B   02....       LJMP    ?Subroutine21 & 0xFFFF
   1548          }
   1549          
   1550          /*********************************************************************
   1551           * @fn      ZDApp_ResetTimerStart
   1552           *
   1553           * @brief   Start the reset timer.
   1554           *
   1555           * @param   delay - delay time(ms) before reset
   1556           *
   1557           * @return  none
   1558           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1559          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1560          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1561            // Start the rest timer
   1562            osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
   \   000008   7A04         MOV     R2,#0x4
   \   00000A   12....       LCALL   ?Subroutine7 & 0xFFFF
   1563          }
   \                     ??CrossCallReturnLabel_36:
   \   00000D   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005                REQUIRE ??Subroutine28_0
   \   000005                ; // Fall through to label ??Subroutine28_0
   1564          
   1565          /*********************************************************************
   1566           * @fn      ZDApp_ResetTimerCancel
   1567           *
   1568           * @brief   Cancel the reset timer.
   1569           *
   1570           * @param   none
   1571           *
   1572           * @return  none
   1573           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1574          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1575          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1576            // Cancel the reset timer
   1577            osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_stop_timerEx?relay
   1578          }
   \   000010   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   1579          
   1580          /*********************************************************************
   1581           * @fn      ZDApp_LeaveCtrlInit
   1582           *
   1583           * @brief   Initialize the leave control logic.
   1584           *
   1585           * @param   none
   1586           *
   1587           * @return  none
   1588           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1589          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1590          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1591            uint8 status;
   1592          
   1593          
   1594            // Initialize control state
   1595            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   12....       LCALL   ?Subroutine2 & 0xFFFF
   1596          
   1597            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1598                                        sizeof(ZDApp_LeaveCtrl),
   1599                                        &ZDApp_LeaveCtrl );
   1600          
   1601            if ( status == ZSUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   7C01         MOV     R4,#0x1
   \   00000D   7D00         MOV     R5,#0x0
   \   00000F   7A85         MOV     R2,#-0x7b
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_nv_item_init?relay
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B   E9           MOV     A,R1
   \   00001C   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1602            {
   1603              // Read saved control
   1604              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1605                            0,
   1606                            sizeof( uint8 ),
   1607                            &ZDApp_LeaveCtrl);
   \   00001E                ; Setup parameters for call to function osal_nv_read
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV     R4,#0x0
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A85         MOV     R2,#-0x7b
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??osal_nv_read?relay
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   1608            }
   1609          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   00003E   02....       LJMP    ??Subroutine25_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E4           CLR     A
   \   000001   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_write
   \   000005   75....       MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
   \   000008   75....       MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   22           RET
   1610          
   1611          /*********************************************************************
   1612           * @fn      ZDApp_LeaveCtrlSet
   1613           *
   1614           * @brief   Set the leave control logic.
   1615           *
   1616           * @param   ra - reassociate flag
   1617           *
   1618           * @return  none
   1619           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1620          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1621          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1622            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000005   7401         MOV     A,#0x1
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   F0           MOVX    @DPTR,A
   1623          
   1624            if ( ra == TRUE )
   \   00000B   69           XRL     A,R1
   \   00000C   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1625            {
   1626              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   00000E   7403         MOV     A,#0x3
   \   000010   F0           MOVX    @DPTR,A
   1627            }
   1628          
   1629            // Write the leave control
   1630            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1631                           0,
   1632                           sizeof( uint8 ),
   1633                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   75....       MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
   \   000014   75....       MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   75..01       MOV     ?V0 + 0,#0x1
   \   00001F   75..00       MOV     ?V0 + 1,#0x0
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A85         MOV     R2,#-0x7b
   \   00002D   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000030   02....       LJMP    ??Subroutine24_0 & 0xFFFF
   1634          }
   1635          
   1636          /*********************************************************************
   1637           * @fn      ZDApp_LeaveCtrlBypass
   1638           *
   1639           * @brief   Check if NV restore should be skipped during a leave reset.
   1640           *
   1641           * @param   none
   1642           *
   1643           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1644           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1645          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1646          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1647            uint8 bypass;
   1648          
   1649            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1650            {
   1651              bypass = TRUE;
   1652            }
   1653            else
   1654            {
   1655              bypass = FALSE;
   1656            }
   1657          
   1658            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   92E0         MOV     0xE0 /* A   */.0,C
   \   00000D   F9           MOV     R1,A
   \   00000E   80..         SJMP    ??Subroutine29_0
   1659          }
   1660          
   1661          /*********************************************************************
   1662           * @fn      ZDApp_LeaveCtrlStartup
   1663           *
   1664           * @brief   Check for startup conditions during a leave reset.
   1665           *
   1666           * @param   state      - devState_t determined by leave control logic
   1667           * @param   startDelay - startup delay
   1668           *
   1669           * @return  none
   1670           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1671          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1672          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1673            *startDelay = 0;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   E4           CLR     A
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   1674          
   1675            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000D   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000010   E0           MOVX    A,@DPTR
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5033         JNC     ??ZDApp_LeaveCtrlStartup_0
   1676            {
   1677              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000015   A2E1         MOV     C,0xE0 /* A   */.1
   \   000017   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1678              {
   1679                *startDelay = 5000;
   \   000019   8C82         MOV     DPL,R4
   \   00001B   8D83         MOV     DPH,R5
   \   00001D   7488         MOV     A,#-0x78
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   7413         MOV     A,#0x13
   \   000023   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1680              }
   1681              else
   1682              {
   1683                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000025   E4           CLR     A
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   00002A   F0           MOVX    @DPTR,A
   1684              }
   1685          
   1686              // Set leave control to initialized state
   1687              ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   00002B   12....       LCALL   ?Subroutine2 & 0xFFFF
   1688          
   1689              // Write initialized control
   1690              osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1691                            0,
   1692                            sizeof( uint8 ),
   1693                            &ZDApp_LeaveCtrl);
   1694            }
   \                     ??CrossCallReturnLabel_3:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..01       MOV     ?V0 + 0,#0x1
   \   000034   75..00       MOV     ?V0 + 1,#0x0
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV     R4,#0x0
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7A85         MOV     R2,#-0x7b
   \   000042   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1695          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   000048   02....       LJMP    ??Subroutine25_0 & 0xFFFF
   1696          
   1697          /*********************************************************************
   1698           * @fn      ZDApp_LeaveReset
   1699           *
   1700           * @brief   Setup a device reset due to a leave indication/confirm.
   1701           *
   1702           * @param   ra - reassociate flag
   1703           *
   1704           * @return  none
   1705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1706          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1707          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1708            ZDApp_LeaveCtrlSet( ra );
   \   000004                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000004   12....       LCALL   ??ZDApp_LeaveCtrlSet?relay
   1709          
   1710            ZDApp_ResetTimerStart( 5000 );
   \   000007                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000007   7A88         MOV     R2,#-0x78
   \   000009   7B13         MOV     R3,#0x13
   \   00000B   12....       LCALL   ??ZDApp_ResetTimerStart?relay
   1711          }
   \   00000E   80..         SJMP    ??Subroutine29_0
   1712          
   1713          /*********************************************************************
   1714           * @fn      ZDApp_LeaveUpdate
   1715           *
   1716           * @brief   Update local device data related to leaving device.
   1717           *
   1718           * @param   nwkAddr        - NWK address of leaving device
   1719           * @param   extAddr        - EXT address of leaving device
   1720           * @param   removeChildren - remove children of leaving device
   1721           *
   1722           * @return  none
   1723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1724          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1725                                  uint8 removeChildren )
   1726          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1727            /*
   1728            AddrMgrEntry_t entry;
   1729            */
   1730            (void)nwkAddr;  // Intentionally unreferenced parameter
   1731          
   1732            // Remove if child
   1733            if ( ZSTACK_ROUTER_BUILD )
   1734            {
   1735              NLME_RemoveChild( extAddr, removeChildren );
   1736            }
   1737          
   1738            /*
   1739            // Set NWK address to invalid
   1740            entry.user    = ADDRMGR_USER_DEFAULT;
   1741            entry.nwkAddr = INVALID_NODE_ADDR;
   1742            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   1743            AddrMgrEntryUpdate( &entry );
   1744          
   1745            // Check
   1746            if ( removeChildren == TRUE )
   1747            {
   1748              // Set index to INVALID_NODE_ADDR to start search
   1749              entry.index = INVALID_NODE_ADDR;
   1750          
   1751              // Get first entry
   1752              AddrMgrEntryGetNext( &entry );
   1753          
   1754              // Remove all descendents
   1755              while ( entry.index != INVALID_NODE_ADDR )
   1756              {
   1757                // Check NWK address allocation algorithm
   1758                if ( RTG_ANCESTOR( entry.nwkAddr, thisAddr ) != 0 )
   1759                {
   1760                  // Set NWK address to invalid
   1761                  entry.nwkAddr = INVALID_NODE_ADDR;
   1762                  AddrMgrEntryUpdate( &entry );
   1763                }
   1764          
   1765                // Get next entry
   1766                AddrMgrEntryGetNext( &entry );
   1767              }
   1768            }
   1769            */
   1770          }
   \   000000   02....       LJMP    ?BRET
   1771          
   1772          /*********************************************************************
   1773           * CALLBACK FUNCTIONS
   1774           */
   1775          
   1776          
   1777          /*********************************************************************
   1778           * @fn      ZDApp_SendEventMsg()
   1779           *
   1780           * @brief
   1781           *
   1782           *   Sends a Network Join message
   1783           *
   1784           * @param  cmd - command ID
   1785           * @param  len - length (in bytes) of the buf field
   1786           * @param  buf - buffer for the rest of the message.
   1787           *
   1788           * @return  none
   1789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1790          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   1791          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1792            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000004                ; Setup parameters for call to function ZDApp_SendMsg
   \   000004   EA           MOV     A,R2
   \   000005   FB           MOV     R3,A
   \   000006   E9           MOV     A,R1
   \   000007   FA           MOV     R2,A
   \   000008                REQUIRE ?Subroutine22
   \   000008                ; // Fall through to label ?Subroutine22
   1793          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   80..         SJMP    ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDApp_SendMsg?relay
   \   000008   22           RET
   1794          
   1795          /*********************************************************************
   1796           * @fn      ZDApp_SendMsg()
   1797           *
   1798           * @brief   Sends a OSAL message
   1799           *
   1800           * @param  taskID - Where to send the message
   1801           * @param  cmd - command ID
   1802           * @param  len - length (in bytes) of the buf field
   1803           * @param  buf - buffer for the rest of the message.
   1804           *
   1805           * @return  none
   1806           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1807          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   1808          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 7,R1
   \   000007   8A..         MOV     ?V0 + 8,R2
   \   000009   8B..         MOV     ?V0 + 4,R3
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   8D..         MOV     ?V0 + 3,R5
   1809            osal_event_hdr_t *msgPtr;
   1810          
   1811            // Send the address to the task
   1812            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   8B82         MOV     DPL,R3
   \   000011   8582..       MOV     ?V0 + 0,DPL
   \   000014                ; Setup parameters for call to function osal_msg_allocate
   \   000014   AA..         MOV     R2,?V0 + 0
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   ??osal_msg_allocate?relay
   \   00001B   8A..         MOV     ?V0 + 10,R2
   \   00001D   8B..         MOV     ?V0 + 11,R3
   \   00001F   AE..         MOV     R6,?V0 + 10
   \   000021   AF..         MOV     R7,?V0 + 11
   1813            if ( msgPtr )
   \   000023   EE           MOV     A,R6
   \   000024   7001         JNZ     ??ZDApp_SendMsg_0
   \   000026   EF           MOV     A,R7
   \                     ??ZDApp_SendMsg_0:
   \   000027   6036         JZ      ??ZDApp_SendMsg_1
   1814            {
   1815              if ( (len > 0) && (buf != NULL) )
   \   000029   E5..         MOV     A,?V0 + 4
   \   00002B   6022         JZ      ??ZDApp_SendMsg_2
   \   00002D   E5..         MOV     A,?V0 + 2
   \   00002F   7002         JNZ     ??ZDApp_SendMsg_3
   \   000031   E5..         MOV     A,?V0 + 3
   \                     ??ZDApp_SendMsg_3:
   \   000033   601A         JZ      ??ZDApp_SendMsg_2
   1816                osal_memcpy( msgPtr, buf, len );
   \   000035                ; Setup parameters for call to function osal_memcpy
   \   000035   85....       MOV     ?V0 + 4,?V0 + 2
   \   000038   85....       MOV     ?V0 + 5,?V0 + 3
   \   00003B   75..00       MOV     ?V0 + 6,#0x0
   \   00003E   78..         MOV     R0,#?V0 + 4
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000043   AC..         MOV     R4,?V0 + 0
   \   000045   7D00         MOV     R5,#0x0
   \   000047   12....       LCALL   ??osal_memcpy?relay
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   1817          
   1818              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_2:
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   E5..         MOV     A,?V0 + 8
   \   000055   F0           MOVX    @DPTR,A
   1819              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000056                ; Setup parameters for call to function osal_msg_send
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   A9..         MOV     R1,?V0 + 7
   \   00005C   12....       LCALL   ??osal_msg_send?relay
   1820            }
   1821          }
   \                     ??ZDApp_SendMsg_1:
   \   00005F   7F0C         MOV     R7,#0xc
   \   000061   02....       LJMP    ?BANKED_LEAVE_XDATA
   1822          
   1823          /*********************************************************************
   1824           * Call Back Functions from NWK  - API
   1825           */
   1826          
   1827          /*********************************************************************
   1828           * @fn          ZDO_NetworkDiscoveryConfirmCB
   1829           *
   1830           * @brief       This function returns a choice of PAN to join.
   1831           *
   1832           * @param       ResultCount - Number of routers discovered
   1833           * @param               NetworkList - Pointer to list of network descriptors
   1834           *
   1835           * @return      ZStatus_t
   1836           */
   1837          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1838          ZStatus_t ZDO_NetworkDiscoveryConfirmCB( uint8 ResultCount,
   \                     ZDO_NetworkDiscoveryConfirmCB:
   1839                                                   networkDesc_t *NetworkList )
   1840          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 7,R1
   \   00000C   8A..         MOV     ?V0 + 4,R2
   \   00000E   8B..         MOV     ?V0 + 5,R3
   1841            networkDesc_t *pNwkDesc = NetworkList;
   1842            ZDO_NetworkDiscoveryCfm_t msg;
   1843            uint8 i = ResultCount;
   1844            uint8 stackProfile;
   1845            uint8 stackProfilePro;
   1846            uint8 selected;
   1847          
   1848          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1849            if ( zdappMgmtNwkDiscReqInProgress )
   1850            {
   1851              zdappMgmtNwkDiscReqInProgress = false;
   1852              ZDO_FinishProcessingMgmtNwkDiscReq( ResultCount, NetworkList );
   1853              return ( ZSuccess );
   1854            }
   1855          #endif
   1856          
   1857            // process discovery results
   1858            stackProfilePro = FALSE;
   \   000010   75..00       MOV     ?V0 + 8,#0x0
   1859            selected = FALSE;
   1860          
   1861            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000013   75..00       MOV     ?V0 + 6,#0x0
   1862            {
   1863              pNwkDesc = NetworkList;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000016   AE..         MOV     R6,?V0 + 4
   \   000018   AF..         MOV     R7,?V0 + 5
   1864              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00001A   75..00       MOV     ?V0 + 9,#0x0
   \   00001D   8020         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   1865              {
   1866                if ( zgConfigPANID != 0xFFFF )
   1867                {
   1868                  // PAN Id is preconfigured. check if it matches
   1869                  if ( pNwkDesc->panId != zgConfigPANID )
   1870                    continue;
   1871                }
   1872                
   1873          
   1874                if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true ) 
   1875                {
   1876                  // If the extended Pan ID is commissioned to a non zero value
   1877                  // Only join the Pan that has match EPID
   1878                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   1879                    continue;
   1880                  
   1881                }
   1882          
   1883          
   1884                  // check that network is allowing joining
   1885                  if ( ZSTACK_ROUTER_BUILD )
   1886                  {
   1887                    if ( stackProfilePro == FALSE )
   1888                    {
   1889                      if ( !pNwkDesc->routerCapacity )
   1890                      {
   1891                        continue;
   1892                      }
   1893                    }
   1894                    else
   1895                    {
   1896                      if ( !pNwkDesc->deviceCapacity )
   1897                      {
   1898                        continue;
   1899                      }
   1900                    }
   1901                  }
   1902                  else if ( ZSTACK_END_DEVICE_BUILD )
   1903                  {
   1904                    if ( !pNwkDesc->deviceCapacity )
   1905                    {
   1906                      continue;
   1907                    }
   1908                  }
   1909          
   1910                  // check version of zigbee protocol
   1911                  if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   1912                    continue;
   1913          
   1914                  // check version of stack profile
   1915                  if ( pNwkDesc->stackProfile != zgStackProfile  )
   1916                  {
   1917                    if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE)) 
   1918                        || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_2:
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6402         XRL     A,#0x2
   \   000022   7008         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
   \   000024   7401         MOV     A,#0x1
   \   000026   6A           XRL     A,R2
   \   000027   7003         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
   1919                      stackProfilePro = TRUE;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_4:
   \   000029   75..01       MOV     ?V0 + 8,#0x1
   1920                    
   1921                    if ( stackProfile == 0 )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_3:
   \   00002C   E5..         MOV     A,?V0 + 6
   \   00002E   6003         JZ      $+5
   \   000030   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_5 & 0xFFFF
   \                     ??ZDO_NetworkDiscoveryConfirmCB_6:
   \   000033   05..         INC     ?V0 + 9
   \   000035   EE           MOV     A,R6
   \   000036   2416         ADD     A,#0x16
   \   000038   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00003B   FE           MOV     R6,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FF           MOV     R7,A
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   00003F   EE           MOV     A,R6
   \   000040   2407         ADD     A,#0x7
   \   000042   F5..         MOV     ?V0 + 0,A
   \   000044   EF           MOV     A,R7
   \   000045   3400         ADDC    A,#0x0
   \   000047   F5..         MOV     ?V0 + 1,A
   \   000049   EE           MOV     A,R6
   \   00004A   240D         ADD     A,#0xd
   \   00004C   F5..         MOV     ?V0 + 2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   3400         ADDC    A,#0x0
   \   000051   F5..         MOV     ?V0 + 3,A
   \   000053   E5..         MOV     A,?V0 + 9
   \   000055   C3           CLR     C
   \   000056   95..         SUBB    A,?V0 + 7
   \   000058   4003         JC      $+5
   \   00005A   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_7 & 0xFFFF
   \   00005D   90....       MOV     DPTR,#zgConfigPANID
   \   000060   E0           MOVX    A,@DPTR
   \   000061   64FF         XRL     A,#0xff
   \   000063   7004         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_8
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   64FF         XRL     A,#0xff
   \                     ??ZDO_NetworkDiscoveryConfirmCB_8:
   \   000069   6015         JZ      ??ZDO_NetworkDiscoveryConfirmCB_9
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F8           MOV     R0,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   90....       MOV     DPTR,#zgConfigPANID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   68           XRL     A,R0
   \   000079   7003         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_10
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   69           XRL     A,R1
   \                     ??ZDO_NetworkDiscoveryConfirmCB_10:
   \   00007E   70B3         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_9:
   \   000080                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000080   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000082   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000084   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   000087   E9           MOV     A,R1
   \   000088   6401         XRL     A,#0x1
   \   00008A   700E         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_11
   \   00008C                ; Setup parameters for call to function sAddrExtCmp
   \   00008C   AC..         MOV     R4,?V0 + 2
   \   00008E   AD..         MOV     R5,?V0 + 3
   \   000090   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000092   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000094   12....       LCALL   ??sAddrExtCmp?relay
   \   000097   E9           MOV     A,R1
   \   000098   6099         JZ      ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_11:
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   608C         JZ      ??ZDO_NetworkDiscoveryConfirmCB_6
   \   0000A7   85..82       MOV     DPL,?V0 + 0
   \   0000AA   85..83       MOV     DPH,?V0 + 1
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   FA           MOV     R2,A
   \   0000AF   90....       MOV     DPTR,#(_NIB + 17)
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   6A           XRL     A,R2
   \   0000B4   6003         JZ      $+5
   \   0000B6   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   FA           MOV     R2,A
   \   0000C7   90....       MOV     DPTR,#zgStackProfile
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   6A           XRL     A,R2
   \   0000CC   6033         JZ      ??ZDO_NetworkDiscoveryConfirmCB_5
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   6401         XRL     A,#0x1
   \   0000D1   6003         JZ      $+5
   \   0000D3   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_2 & 0xFFFF
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   6A           XRL     A,R2
   \   0000D9   6003         JZ      $+5
   \   0000DB   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_3 & 0xFFFF
   \   0000DE   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_4 & 0xFFFF
   1922                    {
   1923                      continue;
   1924                    }
   1925                  }
   1926          
   1927                // check if beacon order is the right value..
   1928                //  if ( pNwkDesc->beaconOrder < ZDO_CONFIG_MAX_BO )
   1929                //    continue;
   1930          
   1931                // choose this pan for joining
   1932                break;
   1933              } 
   1934              if (i < ResultCount)
   1935              {
   1936               selected = TRUE;
   1937                break;
   1938              }
   1939             
   1940              // break if selected or stack profile pro wasn't found
   1941              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_7:
   \   0000E1   E5..         MOV     A,?V0 + 8
   \   0000E3   600C         JZ      ??ZDO_NetworkDiscoveryConfirmCB_12
   1942              {
   1943                break;
   1944              }
   1945            }
   \   0000E5   05..         INC     ?V0 + 6
   \   0000E7   E5..         MOV     A,?V0 + 6
   \   0000E9   C3           CLR     C
   \   0000EA   9402         SUBB    A,#0x2
   \   0000EC   5003         JNC     $+5
   \   0000EE   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_0 & 0xFFFF
   1946          
   1947            if ( i == ResultCount )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_12:
   \   0000F1   E5..         MOV     A,?V0 + 7
   \   0000F3   65..         XRL     A,?V0 + 9
   \   0000F5   700A         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_5
   1948            {
   1949              msg.hdr.status = ZDO_FAIL;   // couldn't find appropriate PAN to join !
   \   0000F7   7401         MOV     A,#0x1
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   7401         MOV     A,#0x1
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   8058         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_13
   1950            }
   1951            else
   1952            {
   1953              msg.hdr.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_5:
   \   000101   7401         MOV     A,#0x1
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   E4           CLR     A
   \   000107   F0           MOVX    @DPTR,A
   1954              msg.panIdLSB = LO_UINT16( pNwkDesc->panId );
   \   000108   8E82         MOV     DPL,R6
   \   00010A   8F83         MOV     DPH,R7
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   C0E0         PUSH    A
   \   00010F   7402         MOV     A,#0x2
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   D0E0         POP     A
   \   000116   F0           MOVX    @DPTR,A
   1955              msg.panIdMSB = HI_UINT16( pNwkDesc->panId );
   \   000117   8E82         MOV     DPL,R6
   \   000119   8F83         MOV     DPH,R7
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   C0E0         PUSH    A
   \   00011F   7403         MOV     A,#0x3
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   D0E0         POP     A
   \   000126   F0           MOVX    @DPTR,A
   1956              msg.logicalChannel = pNwkDesc->logicalChannel;
   \   000127   8E82         MOV     DPL,R6
   \   000129   8F83         MOV     DPH,R7
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   C0E0         PUSH    A
   \   000130   7404         MOV     A,#0x4
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   D0E0         POP     A
   \   000137   F0           MOVX    @DPTR,A
   1957              msg.version = pNwkDesc->version;
   \   000138   85..82       MOV     DPL,?V0 + 0
   \   00013B   85..83       MOV     DPH,?V0 + 1
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   C0E0         PUSH    A
   \   000141   7405         MOV     A,#0x5
   \   000143   12....       LCALL   ?XSTACK_DISP0_8
   \   000146   D0E0         POP     A
   \   000148   F0           MOVX    @DPTR,A
   1958              osal_cpyExtAddr( msg.extendedPANID, pNwkDesc->extendedPANID );
   \   000149                ; Setup parameters for call to function sAddrExtCpy
   \   000149   AC..         MOV     R4,?V0 + 2
   \   00014B   AD..         MOV     R5,?V0 + 3
   \   00014D   7406         MOV     A,#0x6
   \   00014F   12....       LCALL   ?XSTACK_DISP0_8
   \   000152   AA82         MOV     R2,DPL
   \   000154   AB83         MOV     R3,DPH
   \   000156   12....       LCALL   ??sAddrExtCpy?relay
   1959            }
   1960          
   1961            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(ZDO_NetworkDiscoveryCfm_t), (uint8 *)&msg );
   \                     ??ZDO_NetworkDiscoveryConfirmCB_13:
   \   000159                ; Setup parameters for call to function ZDApp_SendMsg
   \   000159   85..82       MOV     DPL,?XSP + 0
   \   00015C   85..83       MOV     DPH,?XSP + 1
   \   00015F   AC82         MOV     R4,DPL
   \   000161   AD83         MOV     R5,DPH
   \   000163   7B0E         MOV     R3,#0xe
   \   000165   7A01         MOV     R2,#0x1
   \   000167   12....       LCALL   ?Subroutine6 & 0xFFFF
   1962          
   1963            return (ZSuccess);
   \                     ??CrossCallReturnLabel_26:
   \   00016A   7900         MOV     R1,#0x0
   \   00016C   740E         MOV     A,#0xe
   \   00016E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000171   7F0A         MOV     R7,#0xa
   \   000173   02....       LJMP    ?BANKED_LEAVE_XDATA
   1964          }  // ZDO_NetworkDiscoveryConfirmCB
   1965          
   1966          /*********************************************************************
   1967           * @fn          ZDO_NetworkFormationConfirmCB
   1968           *
   1969           * @brief       This function reports the results of the request to
   1970           *              initialize a coordinator in a network.
   1971           *
   1972           * @param       Status - Result of NLME_NetworkFormationRequest()
   1973           *
   1974           * @return      none
   1975           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1976          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   1977          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1978            nwkStatus = (byte)Status;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#nwkStatus
   \   000008   F0           MOVX    @DPTR,A
   1979          
   1980            if ( Status == ZSUCCESS )
   \   000009   700A         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   1981            {
   1982              // LED on shows Coordinator started
   1983              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000B                ; Setup parameters for call to function HalLedSet
   \   00000B   12....       LCALL   ?Subroutine15 & 0xFFFF
   1984          
   1985              // LED off forgets HOLD_AUTO_START
   1986              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   1987          
   1988          #if defined ( ZBIT )
   1989              SIM_SetColor(0xd0ffd0);
   1990          #endif
   1991          
   1992              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_14:
   \   00000E   700C         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   1993              {
   1994                // Began with HOLD_AUTO_START
   1995                devState = DEV_COORD_STARTING;
   \   000010   7408         MOV     A,#0x8
   \   000012   F0           MOVX    @DPTR,A
   \   000013   8007         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   1996              }
   1997            }
   1998          #if defined(BLINK_LEDS)
   1999            else
   2000              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7904         MOV     R1,#0x4
   \   000019   12....       LCALL   ??HalLedSet?relay
   2001          #endif
   2002          
   2003            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00001C                ; Setup parameters for call to function osal_set_event
   \   00001C   7A02         MOV     R2,#0x2
   \   00001E   02....       LJMP    ?Subroutine16 & 0xFFFF
   2004          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   7A01         MOV     R2,#0x1
   \   000002   7904         MOV     R1,#0x4
   \   000004   12....       LCALL   ??HalLedSet?relay
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7908         MOV     R1,#0x8
   \   00000B   12....       LCALL   ??HalLedSet?relay
   \   00000E   90....       MOV     DPTR,#devState
   \   000011   E0           MOVX    A,@DPTR
   \   000012   22           RET
   2005          
   2006          /*********************************************************************
   2007           * @fn          ZDO_StartRouterConfirmCB
   2008           *
   2009           * @brief       This function reports the results of the request to
   2010           *              start functioning as a router in a network.
   2011           *
   2012           * @param       Status - Result of NLME_StartRouterRequest()
   2013           *
   2014           * @return      none
   2015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2016          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2017          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2018            nwkStatus = (byte)Status;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#nwkStatus
   \   000008   F0           MOVX    @DPTR,A
   2019          
   2020            if ( Status == ZSUCCESS )
   \   000009   700A         JNZ     ??ZDO_StartRouterConfirmCB_0
   2021            {
   2022              // LED on shows Router started
   2023              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000B                ; Setup parameters for call to function HalLedSet
   \   00000B   12....       LCALL   ?Subroutine15 & 0xFFFF
   2024              // LED off forgets HOLD_AUTO_START
   2025              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2026              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_15:
   \   00000E   700C         JNZ     ??ZDO_StartRouterConfirmCB_1
   2027              {
   2028                // Began with HOLD_AUTO_START
   2029                devState = DEV_END_DEVICE;
   \   000010   7406         MOV     A,#0x6
   \   000012   F0           MOVX    @DPTR,A
   \   000013   8007         SJMP    ??ZDO_StartRouterConfirmCB_1
   2030              }
   2031            }
   2032          #if defined(BLINK_LEDS)
   2033            else
   2034              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7904         MOV     R1,#0x4
   \   000019   12....       LCALL   ??HalLedSet?relay
   2035          #endif
   2036          
   2037            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00001C                ; Setup parameters for call to function osal_set_event
   \   00001C   7A20         MOV     R2,#0x20
   \   00001E   02....       LJMP    ?Subroutine16 & 0xFFFF
   2038          }
   2039          
   2040          /*********************************************************************
   2041           * @fn          ZDO_JoinConfirmCB
   2042           *
   2043           * @brief       This function allows the next hight layer to be notified
   2044           *              of the results of its request to join itself or another
   2045           *              device to a network.
   2046           *
   2047           * @param       Status - Result of NLME_JoinRequest()
   2048           *
   2049           * @return      none
   2050           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2051          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2052          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2053            (void)PanId;  // remove if this parameter is used.
   2054            
   2055            nwkStatus = (byte)Status;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#nwkStatus
   \   000008   F0           MOVX    @DPTR,A
   2056          
   2057            if ( Status == ZSUCCESS )
   \   000009   700A         JNZ     ??ZDO_JoinConfirmCB_0
   2058            {
   2059              // LED on shows device joined
   2060              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000B                ; Setup parameters for call to function HalLedSet
   \   00000B   12....       LCALL   ?Subroutine15 & 0xFFFF
   2061              // LED off forgets HOLD_AUTO_START
   2062              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2063              if ( (devState == DEV_HOLD) )
   \                     ??CrossCallReturnLabel_16:
   \   00000E   700C         JNZ     ??ZDO_JoinConfirmCB_1
   2064              {
   2065                // Began with HOLD_AUTO_START
   2066                devState = DEV_NWK_JOINING;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   \   000013   8007         SJMP    ??ZDO_JoinConfirmCB_1
   2067              }
   2068          
   2069              if ( !ZG_SECURE_ENABLED )
   2070              {
   2071                // Notify to save info into NV
   2072                ZDApp_NVUpdate();
   2073              }
   2074            }
   2075            else
   2076            {
   2077          #if defined(BLINK_LEDS)
   2078              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7904         MOV     R1,#0x4
   \   000019   12....       LCALL   ??HalLedSet?relay
   2079          #endif
   2080            }
   2081          
   2082            // Notify ZDApp
   2083            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_1:
   \   00001C                ; Setup parameters for call to function ZDApp_SendMsg
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7B02         MOV     R3,#0x2
   \   000022   7A02         MOV     R2,#0x2
   \   000024   02....       LJMP    ?Subroutine22 & 0xFFFF
   2084          }
   2085          
   2086          /*********************************************************************
   2087           * @fn          ZDO_AddrChangeIndicationCB
   2088           *
   2089           * @brief       This function notifies the application that this
   2090           *              device's address has changed.  Could happen in 
   2091           *              a network with stochastic addressing (PRO).
   2092           *
   2093           * @param       newAddr - the new address
   2094           *
   2095           * @return      none
   2096           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2097          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2098          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2099            (void)newAddr;  // remove if this parameter is used
   2100            
   2101            // Notify to save info into NV
   2102            ZDApp_NVUpdate();
   2103          
   2104            // Notify the applications   
   2105            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   12....       LCALL   ?Subroutine4 & 0xFFFF
   2106          
   2107            // Send out a device announce
   2108            ZDApp_AnnounceNewAddress();
   \                     ??CrossCallReturnLabel_20:
   \   000007                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000007   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   2109          }
   \   00000A   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2110          
   2111          /*********************************************************************
   2112           * @fn          ZDO_JoinIndicationCB
   2113           *
   2114           * @brief       This function allows the next higher layer of a
   2115           *              coordinator to be notified of a remote join request.
   2116           *
   2117           * @param       ShortAddress - 16-bit address
   2118           * @param       ExtendedAddress - IEEE (64-bit) address
   2119           * @param       CapabilityInformation - Association Capability Information
   2120           * @param       type - of joining - 
   2121           *                          NWK_ASSOC_JOIN
   2122           *                          NWK_ASSOC_REJOIN_UNSECURE
   2123           *                          NWK_ASSOC_REJOIN_SECURE
   2124           *
   2125           * @return      ZStatus_t
   2126           */
   2127          ZStatus_t ZDO_JoinIndicationCB( uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2128                                          uint8 CapabilityInformation, uint8 type )
   2129          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2130            (void)ShortAddress;
   2131            (void)ExtendedAddress;
   2132            (void)CapabilityInformation;
   2133            
   2134              // Notify to save info into NV
   2135              ZDApp_NVUpdate();
   2136            
   2137              // send notification to TC of new device..
   2138              if ( ZG_SECURE_ENABLED )
   2139              {
   2140                if ( type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE )
   2141                {
   2142                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
   2143                }
   2144              }
   2145            
   2146              return ( ZSuccess );
   \   000000                REQUIRE ?Subroutine17
   \   000000                ; // Fall through to label ?Subroutine17

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   2147          }
   2148          
   2149          /*********************************************************************
   2150           * @fn          ZDO_ConcentratorIndicationCB
   2151           *
   2152           * @brief       This function allows the next higher layer of a
   2153           *              device to be notified of existence of the concentrator.
   2154           *
   2155           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2156           *
   2157           * @return      void 
   2158           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2159          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr )
   \                     ZDO_ConcentratorIndicationCB:
   2160          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2161            // Write your code here to do something with the concentrator's
   2162            // address.
   2163            (void)nwkAddr;
   2164          }
   \   000000   02....       LJMP    ?BRET
   2165          
   2166          /*********************************************************************
   2167           * @fn          ZDO_LeaveCnf
   2168           *
   2169           * @brief       This function allows the next higher layer to be
   2170           *              notified of the results of its request for this or
   2171           *              a child device to leave the network.
   2172           *
   2173           * @param       cnf - NLME_LeaveCnf_t
   2174           *
   2175           * @return      none
   2176           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2177          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2178          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2179            // Check for this device
   2180            if ( osal_ExtAddrEqual( cnf->extAddr,
   2181                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function sAddrExtCmp
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00000C   EA           MOV     A,R2
   \   00000D   FC           MOV     R4,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FD           MOV     R5,A
   \   000010   EE           MOV     A,R6
   \   000011   2402         ADD     A,#0x2
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   3400         ADDC    A,#0x0
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??sAddrExtCmp?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   6401         XRL     A,#0x1
   \   00001E   7006         JNZ     ??CrossCallReturnLabel_8
   2182            {
   2183              // Prepare to leave with reset
   2184              ZDApp_LeaveReset( cnf->rejoin );
   \   000020                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000020   EE           MOV     A,R6
   \   000021   240B         ADD     A,#0xb
   \   000023   12....       LCALL   ?Subroutine10 & 0xFFFF
   2185            }
   2186            else if ( ZSTACK_ROUTER_BUILD )
   2187            {
   2188              // Remove device address(optionally descendents) from data
   2189              ZDApp_LeaveUpdate( cnf->dstAddr,
   2190                                 cnf->extAddr,
   2191                                 cnf->removeChildren );
   2192            }
   2193          }
   \                     ??CrossCallReturnLabel_8:
   \   000026   02....       LJMP    ?Subroutine19 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   00000C   22           RET
   2194          
   2195          /*********************************************************************
   2196           * @fn          ZDO_LeaveInd
   2197           *
   2198           * @brief       This function allows the next higher layer of a
   2199           *              device to be notified of a remote leave request or
   2200           *              indication.
   2201           *
   2202           * @param       ind - NLME_LeaveInd_t
   2203           *
   2204           * @return      none
   2205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2206          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2207          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2208            uint8 leave;
   2209          
   2210          
   2211            // Parent is requesting the leave - NWK layer filters out illegal
   2212            // requests
   2213            if ( ind->request == TRUE )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6401         XRL     A,#0x1
   \   00001A   7008         JNZ     ??ZDO_LeaveInd_0
   2214            {
   2215              // Notify network of leave
   2216              if ( ZSTACK_ROUTER_BUILD )
   2217              {
   2218                NLME_LeaveRsp_t rsp;
   2219                rsp.rejoin         = ind->rejoin;
   2220                rsp.removeChildren = ind->removeChildren;
   2221                NLME_LeaveRsp( &rsp );
   2222              }
   2223          
   2224              // Prepare to leave with reset
   2225              ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_1:
   \   00001C                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00001C   EE           MOV     A,R6
   \   00001D   240C         ADD     A,#0xc
   \   00001F   12....       LCALL   ?Subroutine10 & 0xFFFF
   2226            }
   \                     ??CrossCallReturnLabel_9:
   \   000022   802C         SJMP    ??ZDO_LeaveInd_2
   2227            else
   2228            {
   2229              leave = FALSE;
   2230          
   2231              // Check if this device needs to leave as a child or descendent
   2232              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000024                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000024   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   000027   8A..         MOV     ?V0 + 0,R2
   \   000029   8B..         MOV     ?V0 + 1,R3
   \   00002B   A8..         MOV     R0,?V0 + 0
   \   00002D   A9..         MOV     R1,?V0 + 1
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   68           XRL     A,R0
   \   000035   7003         JNZ     ??ZDO_LeaveInd_3
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   69           XRL     A,R1
   \                     ??ZDO_LeaveInd_3:
   \   00003A   7014         JNZ     ??ZDO_LeaveInd_2
   2233              {
   2234                if ( ( ind->removeChildren == TRUE               ) ||
   2235                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2236                       NODETYPE_DEVICE                           )    )
   \   00003C   EE           MOV     A,R6
   \   00003D   240B         ADD     A,#0xb
   \   00003F   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   2237                {
   2238                  leave = TRUE;
   2239                }
   2240              }
   2241              else if ( ind->removeChildren == TRUE )
   2242              {
   2243                // Check NWK address allocation algorithm
   2244                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2245              }
   2246          
   2247              if ( leave == TRUE )
   2248              {
   2249                // Prepare to leave with reset
   2250                ZDApp_LeaveReset( ind->rejoin );
   2251              }
   2252              else
   2253              {
   2254                // Remove device address(optionally descendents) from data
   2255                ZDApp_LeaveUpdate( ind->srcAddr,
   2256                                   ind->extAddr,
   2257                                   ind->removeChildren );
   2258              }
   2259            }
   \                     ??CrossCallReturnLabel_42:
   \   000042   6401         XRL     A,#0x1
   \   000044   60D6         JZ      ??ZDO_LeaveInd_1
   \   000046   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   5407         ANL     A,#0x7
   \   00004C   6402         XRL     A,#0x2
   \   00004E   60CC         JZ      ??ZDO_LeaveInd_1
   2260          }
   \                     ??ZDO_LeaveInd_2:
   \   000050   02....       LJMP    ??Subroutine25_0 & 0xFFFF
   2261          
   2262          /*********************************************************************
   2263           * @fn          ZDO_SyncIndicationCB
   2264           *
   2265           * @brief       This function allows the next higher layer of a
   2266           *              coordinator to be notified of a loss of synchronization
   2267           *                          with the parent/child device.
   2268           *
   2269           * @param       type: 0 - child; 1 - parent
   2270           *
   2271           *
   2272           * @return      none
   2273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2274          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2275          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2276            (void)shortAddr;  // Remove this line if this parameter is used.
   2277            
   2278            if ( ZSTACK_END_DEVICE_BUILD
   2279              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityInfo & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2280            {
   2281              if ( type == 1 )
   \   000004   7401         MOV     A,#0x1
   \   000006   69           XRL     A,R1
   \   000007   700E         JNZ     ??CrossCallReturnLabel_27
   2282              {
   2283                // We lost contact with our parent.  Clear the neighbor Table.
   2284                nwkNeighborInitTable();
   \   000009                ; Setup parameters for call to function nwkNeighborInitTable
   \   000009   12....       LCALL   ??nwkNeighborInitTable?relay
   2285                
   2286                // Start the rejoin process.
   2287                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   00000C                ; Setup parameters for call to function ZDApp_SendMsg
   \   00000C   7C00         MOV     R4,#0x0
   \   00000E   7D00         MOV     R5,#0x0
   \   000010   7B02         MOV     R3,#0x2
   \   000012   7A03         MOV     R2,#0x3
   \   000014   12....       LCALL   ?Subroutine6 & 0xFFFF
   2288              }
   2289            }
   2290          }
   \                     ??CrossCallReturnLabel_27:
   \   000017   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2291          
   2292          /*********************************************************************
   2293           * @fn          ZDO_ManytoOneFailureIndicationCB
   2294           *
   2295           * @brief       This function allows the next higher layer of a
   2296           *              concentrator to be notified of a many-to-one route 
   2297           *              failure. 
   2298           *
   2299           * @param       none
   2300           *
   2301           *
   2302           * @return      none
   2303           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2304          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2305          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2306            // By default, the concentrator automatically redo many-to-one route 
   2307            // discovery to update all many-to-one routes in the network
   2308            // If you want anything processing other than the default,
   2309            // please replace the following code.
   2310            
   2311            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   ??RTG_MTORouteReq?relay
   2312          }
   \   000007   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2313          
   2314          
   2315          /*********************************************************************
   2316           * @fn          ZDO_PollConfirmCB
   2317           *
   2318           * @brief       This function allows the next higher layer to be
   2319           *              notified of a Poll Confirm.
   2320           *
   2321           * @param       none
   2322           *
   2323           * @return      none
   2324           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2325          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2326          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2327            (void)status;  // Remove this line if this parameter is used.
   2328            return;
   \   000000   02....       LJMP    ?BRET
   2329          }
   2330          
   2331          /******************************************************************************
   2332           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2333           *
   2334           * @brief       Stub routine implemented by NHLE. NHLE should call
   2335           *              <AddrMgrWriteNV> when appropriate.
   2336           *
   2337           * @param       none
   2338           *
   2339           * @return      none
   2340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2341          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2342          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2343          #if defined ( NV_RESTORE )  
   2344            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   2345            {
   2346              // Trigger to save info into NV
   2347              ZDApp_NVUpdate();
   2348            }
   2349          #endif
   2350          }
   \   000000   02....       LJMP    ?BRET
   2351          
   2352          /*********************************************************************
   2353           * Call Back Functions from Security  - API
   2354           */
   2355          
   2356           /*********************************************************************
   2357           * @fn          ZDO_UpdateDeviceIndication
   2358           *
   2359           * @brief       This function notifies the "Trust Center" of a
   2360           *              network when a device joins or leaves the network.
   2361           *
   2362           * @param       extAddr - pointer to 64 bit address of new device
   2363           * @param       status  - 0 if a new device joined securely
   2364           *                      - 1 if a new device joined un-securely
   2365           *                      - 2 if a device left the network
   2366           *
   2367           * @return      true if newly joined device should be allowed to
   2368           *                                              remain on network
   2369           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2370          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2371          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2372            // can implement a network access policy based on the
   2373            // IEEE address of newly joining devices...
   2374            (void)extAddr;
   2375            (void)status;
   2376            
   2377            return ZSuccess;
   \   000000   02....       LJMP    ?Subroutine17 & 0xFFFF
   2378          }
   2379          
   2380          /*********************************************************************
   2381           * @fn          ZDApp_InMsgCB
   2382           *
   2383           * @brief       This function is called to pass up any message that is
   2384           *              not yet supported.  This allows for the developer to
   2385           *              support features themselves..
   2386           *
   2387           * @return      none
   2388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2389          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2390          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine11 & 0xFFFF
   2391            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \                     ??CrossCallReturnLabel_40:
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   7480         MOV     A,#-0x80
   \   00000E   59           ANL     A,R1
   \   00000F   FB           MOV     R3,A
   \   000010   E4           CLR     A
   \   000011   7001         JNZ     ??ZDApp_InMsgCB_0
   \   000013   EB           MOV     A,R3
   \                     ??ZDApp_InMsgCB_0:
   \   000014   7049         JNZ     ??ZDApp_InMsgCB_1
   2392            {
   2393              // Handle the response message
   2394            }
   2395            else
   2396            {
   2397              // Handle the request message by sending a generic "not supported".
   2398              // Device Announce doesn't have a response.
   2399              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000016   EE           MOV     A,R6
   \   000017   240B         ADD     A,#0xb
   \   000019   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00001C   7041         JNZ     ??ZDApp_InMsgCB_1
   \   00001E   7413         MOV     A,#0x13
   \   000020   68           XRL     A,R0
   \   000021   7001         JNZ     ??ZDApp_InMsgCB_2
   \   000023   E9           MOV     A,R1
   \                     ??ZDApp_InMsgCB_2:
   \   000024   6039         JZ      ??ZDApp_InMsgCB_1
   2400              {
   2401                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2402                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   E8           MOV     A,R0
   \   000027   F5..         MOV     ?V0 + 0,A
   \   000029   7480         MOV     A,#-0x80
   \   00002B   49           ORL     A,R1
   \   00002C   F5..         MOV     ?V0 + 1,A
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   75..00       MOV     ?V0 + 0,#0x0
   \   000036   75..00       MOV     ?V0 + 1,#0x0
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   EE           MOV     A,R6
   \   00003F   240E         ADD     A,#0xe
   \   000041   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   2403              }
   2404            }
   \                     ??CrossCallReturnLabel_44:
   \   000044   FD           MOV     R5,A
   \   000045   7C84         MOV     R4,#-0x7c
   \   000047   EE           MOV     A,R6
   \   000048   2402         ADD     A,#0x2
   \   00004A   0A           INC     R2
   \   00004B   0A           INC     R2
   \   00004C   EF           MOV     A,R7
   \   00004D   3400         ADDC    A,#0x0
   \   00004F   FB           MOV     R3,A
   \   000050   EE           MOV     A,R6
   \   000051   240F         ADD     A,#0xf
   \   000053   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000056   F9           MOV     R1,A
   \   000057   12....       LCALL   ??ZDP_GenericRsp?relay
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   2405          }
   \                     ??ZDApp_InMsgCB_1:
   \   00005F   02....       LJMP    ??Subroutine25_0 & 0xFFFF
   2406          
   2407          
   2408          /*********************************************************************
   2409           * @fn      ZDApp_ChangeMatchDescRespPermission()
   2410           *
   2411           * @brief   Changes the Match Descriptor Response permission.
   2412           *
   2413           * @param   endpoint - endpoint to allow responses
   2414           * @param   action - true to allow responses, false to not
   2415           *
   2416           * @return  none
   2417           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2418          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   2419          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2420            // Store the action
   2421            afSetMatch( endpoint, action );
   \   000004                ; Setup parameters for call to function afSetMatch
   \   000004   12....       LCALL   ??afSetMatch?relay
   2422          }
   \   000007   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2423          
   2424          /*********************************************************************
   2425           * @fn      ZDApp_NetworkInit()
   2426           *
   2427           * @brief   Used to start the network joining process
   2428           *
   2429           * @param   delay - mSec delay to wait before starting
   2430           *
   2431           * @return  none
   2432           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2433          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   2434          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2435            if ( delay )
   \   000004   EA           MOV     A,R2
   \   000005   7001         JNZ     ??ZDApp_NetworkInit_0
   \   000007   EB           MOV     A,R3
   \                     ??ZDApp_NetworkInit_0:
   \   000008   600B         JZ      ??ZDApp_NetworkInit_1
   2436            {
   2437              // Wait awhile before starting the device
   2438              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   00000A                ; Setup parameters for call to function osal_start_timerEx
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   12....       LCALL   ?Subroutine7 & 0xFFFF
   2439            }
   \                     ??CrossCallReturnLabel_37:
   \   000013   8005         SJMP    ??CrossCallReturnLabel_22
   2440            else
   2441            {
   2442              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_1:
   \   000015                ; Setup parameters for call to function osal_set_event
   \   000015   7A01         MOV     R2,#0x1
   \   000017   12....       LCALL   ?Subroutine20 & 0xFFFF
   2443            }
   2444          }
   \                     ??CrossCallReturnLabel_22:
   \   00001A   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2445          
   2446          /*********************************************************************
   2447           * @fn      ZDApp_NwkStateUpdateCB()
   2448           *
   2449           * @brief   This function notifies that this device's network 
   2450           *          state info has been changed.
   2451           *
   2452           * @param   none
   2453           *
   2454           * @return  none
   2455           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2456          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   2457          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2458            // Notify to save info into NV
   2459            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B02         MOV     R3,#0x2
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_get_timeoutEx?relay
   2460            {
   2461              // Trigger to save info into NV
   2462              ZDApp_NVUpdate();
   2463            }
   2464          }
   \   000010   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2465          
   2466          /*********************************************************************
   2467           * @fn      ZDApp_NodeProfileSync()
   2468           *
   2469           * @brief   Sync node with stack profile.
   2470           *
   2471           * @param   cfm - ZDO_NetworkDiscoveryCfm_t
   2472           *
   2473           * @return  none
   2474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2475          void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm )
   \                     ZDApp_NodeProfileSync:
   2476          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2477            networkDesc_t* desc;
   2478            uint16         panID;
   2479          
   2480            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000005   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000008   E0           MOVX    A,@DPTR
   \   000009   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000B   5058         JNC     ??ZDApp_NodeProfileSync_0
   2481            {
   2482              panID = BUILD_UINT16( cfm->panIdLSB, cfm->panIdMSB );
   2483          
   2484              desc = nwk_getNetworkDesc( cfm->extendedPANID, panID, cfm->logicalChannel );
   \   00000D                ; Setup parameters for call to function nwk_getNetworkDesc
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FE           MOV     R6,A
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FD           MOV     R5,A
   \   000028   EE           MOV     A,R6
   \   000029   FC           MOV     R4,A
   \   00002A   EA           MOV     A,R2
   \   00002B   2406         ADD     A,#0x6
   \   00002D   FA           MOV     R2,A
   \   00002E   EB           MOV     A,R3
   \   00002F   3400         ADDC    A,#0x0
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??nwk_getNetworkDesc?relay
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   2485          
   2486              if (desc != NULL)
   \   000039   E582         MOV     A,DPL
   \   00003B   7002         JNZ     ??ZDApp_NodeProfileSync_1
   \   00003D   E583         MOV     A,DPH
   \                     ??ZDApp_NodeProfileSync_1:
   \   00003F   6024         JZ      ??ZDApp_NodeProfileSync_0
   2487              {
   2488                if ( desc->stackProfile != zgStackProfile )
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FA           MOV     R2,A
   \   00004B   90....       MOV     DPTR,#zgStackProfile
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6A           XRL     A,R2
   \   000050   6013         JZ      ??ZDApp_NodeProfileSync_0
   2489                {
   2490                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000052   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000055   E0           MOVX    A,@DPTR
   \   000056   54F8         ANL     A,#0xf8
   \   000058   4402         ORL     A,#0x2
   \   00005A   F0           MOVX    @DPTR,A
   2491                  ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00005B   740C         MOV     A,#0xc
   \   00005D   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000060   F0           MOVX    @DPTR,A
   2492                  NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000061                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000061   F9           MOV     R1,A
   \   000062   12....       LCALL   ??NLME_SetBroadcastFilter?relay
   2493                }
   2494              }
   2495            }
   2496          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000065   02....       LJMP    ??Subroutine25_0 & 0xFFFF
   2497          
   2498          /*********************************************************************
   2499           * @fn      ZDApp_StartJoiningCycle()
   2500           *
   2501           * @brief   Starts the joining cycle of a device.  This will only 
   2502           *          continue an already started (or stopped) joining cycle.
   2503           *
   2504           * @param   none
   2505           *
   2506           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2507           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2508          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   2509          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2510            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   2511            {
   2512              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   7401         MOV     A,#0x1
   \   000013   90....       MOV     DPTR,#continueJoining
   \   000016   F0           MOVX    @DPTR,A
   2513              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??ZDApp_NetworkInit?relay
   2514          
   2515              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   2516            }
   2517            else
   2518              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2519          }
   2520          
   2521          /*********************************************************************
   2522           * @fn      ZDApp_StopJoiningCycle()
   2523           *
   2524           * @brief   Stops the joining or rejoining process of a device.
   2525           *
   2526           * @param   none
   2527           *
   2528           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2530          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   2531          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2532            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   2533            {
   2534              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   E4           CLR     A
   \   000012   90....       MOV     DPTR,#continueJoining
   \   000015   F0           MOVX    @DPTR,A
   2535              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   2536            }
   2537            else
   2538              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2539          }
   2540          
   2541          /*********************************************************************
   2542           * @fn      ZDApp_AnnounceNewAddress()
   2543           *
   2544           * @brief   Send Device Announce and hold all transmissions for 
   2545           *          new address timeout.
   2546           *
   2547           * @param   none
   2548           *
   2549           * @return  none
   2550           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2551          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   2552          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2553          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2554            // Turn off data request hold
   2555            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   ??APSME_HoldDataRequests?relay
   2556          #endif
   2557            
   2558            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   2559                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00000F   8A..         MOV     ?V0 + 0,R2
   \   000011   8B..         MOV     ?V0 + 1,R3
   \   000013   AE..         MOV     R6,?V0 + 0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV     ?V0 + 0,#0x0
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   EE           MOV     A,R6
   \   000026   FC           MOV     R4,A
   \   000027   AD..         MOV     R5,?V0 + 1
   \   000029   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   2560            
   2561          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2562            // Setup the timeout
   2563            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   ??APSME_HoldDataRequests?relay
   2564          #endif  
   2565          }
   \   000038   02....       LJMP    ??Subroutine25_0 & 0xFFFF
   2566          
   2567          /*********************************************************************
   2568           * @fn          ZDApp_NVUpdate
   2569           *
   2570           * @brief       Set the NV Update Timer.
   2571           *
   2572           * @param       none
   2573           *
   2574           * @return      none
   2575           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2576          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   2577          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2578          #if defined ( NV_RESTORE )
   2579            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   2580          #endif
   2581          }
   \   000000   02....       LJMP    ?BRET
   2582          
   2583          /*********************************************************************
   2584           * @fn      ZDApp_CoordStartPANIDConflictCB()
   2585           *
   2586           * @brief   Returns a PAN ID for the network layer to use during
   2587           *          a coordinator start and there is another network with 
   2588           *          the intended PANID.
   2589           *
   2590           * @param   panid - the intended PAN ID
   2591           *
   2592           * @return  PANID to try
   2593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2594          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   2595          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2596            return ( panid + 1 );
   \   000000   7401         MOV     A,#0x1
   \   000002   2A           ADD     A,R2
   \   000003   0A           INC     R2
   \   000004   E4           CLR     A
   \   000005   3B           ADDC    A,R3
   \   000006   FB           MOV     R3,A
   \   000007   02....       LJMP    ?BRET
   2597          }
   2598          
   2599          /*********************************************************************
   2600           * @fn          ZDO_SrcRtgIndCB
   2601           *
   2602           * @brief       This function notifies the ZDO available src route record received.
   2603           *
   2604           * @param       srcAddr - source address of the source route
   2605           * @param       relayCnt - number of devices in the relay list
   2606           * @param       relayList - relay list of the source route
   2607           *
   2608           * @return      none
   2609           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2610          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   2611          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   2612            zdoSrcRtg_t srcRtg;
   2613            
   2614            srcRtg.srcAddr = srcAddr;
   \   000009   12....       LCALL   ?Subroutine3 & 0xFFFF
   2615            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_51:
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E9           MOV     A,R1
   \   000012   F0           MOVX    @DPTR,A
   2616            srcRtg.pRelayList = pRelayList;
   \   000013   7403         MOV     A,#0x3
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   EC           MOV     A,R4
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   ED           MOV     A,R5
   \   00001C   F0           MOVX    @DPTR,A
   2617            
   2618            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001D   90....       MOV     DPTR,#zdoCBFunc
   \   000020   E0           MOVX    A,@DPTR
   \   000021   7002         JNZ     ??ZDO_SrcRtgIndCB_0
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000025   6018         JZ      ??ZDO_SrcRtgIndCB_1
   2619            {
   2620              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000027                ; Setup parameters for indirect call
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AA82         MOV     R2,DPL
   \   00002F   AB83         MOV     R3,DPH
   \   000031   90....       MOV     DPTR,#zdoCBFunc
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F8           MOV     R0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F583         MOV     DPH,A
   \   00003A   8882         MOV     DPL,R0
   \   00003C   12....       LCALL   ?CALL_IND
   2621            }
   2622          }
   \                     ??ZDO_SrcRtgIndCB_1:
   \   00003F   7405         MOV     A,#0x5
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2623          
   2624          
   2625          /*********************************************************************
   2626           * @fn          ZDO_RegisterForZdoCB
   2627           *
   2628           * @brief       Call this function to register the higher layer (for 
   2629           *              example, the Application layer or MT layer) with ZDO 
   2630           *              callbacks to get notified of some ZDO indication like
   2631           *              existence of a concentrator or receipt of a source 
   2632           *              route record.
   2633           *
   2634           * @param       indID - ZDO Indication ID
   2635           * @param       pFn   - Callback function pointer
   2636           *
   2637           * @return      ZSuccess - successful, ZInvalidParameter if not
   2638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2639          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   2640          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2641            // Check the range of the indication ID
   2642            if ( indID < MAX_ZDO_CB_FUNC )
   \   000004   E9           MOV     A,R1
   \   000005   700A         JNZ     ??ZDO_RegisterForZdoCB_0
   2643            {
   2644              zdoCBFunc[indID] = pFn;
   \   000007   90....       MOV     DPTR,#zdoCBFunc
   \   00000A   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   2645              return ZSuccess;
   \                     ??CrossCallReturnLabel_49:
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   2646            }
   2647            
   2648            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000011   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000013   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2649          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....0000     DW ZDAppTaskID, 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SecInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDOInitDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ReadNetworkRestoreState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppDetermineDeviceType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkStartEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceAuthEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNetworkStateEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNetworkState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitUserDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppCheckForHoldKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessOSALMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RegisterCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessNetworkJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerCancel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlBypass?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlStartup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendEventMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkDiscoveryConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkFormationConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartRouterConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AddrChangeIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConcentratorIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveCnf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SyncIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ManytoOneFailureIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PollConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AddrMgrWriteNVRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateDeviceIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeMatchDescRespPermission?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkStateUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NodeProfileSync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StartJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StopJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AnnounceNewAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NVUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_CoordStartPANIDConflictCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SrcRtgIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB
   2650          
   2651          /*********************************************************************
   2652          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     AddrMgrWriteNVRequest              0      0      0
     ZDAppCheckForHoldKey               2      0      0
       -> HalKeyRead                    4      0      0
     ZDAppDetermineDeviceType           2      0     12
       -> nwk_ExtPANIDValid             4      0      0
     ZDApp_AnnounceNewAddress           0      0     23
       -> APSME_HoldDataRequests        0      0     20
       -> NLME_GetExtAddr               0      0     20
       -> NLME_GetShortAddr             0      0     20
       -> ZDP_DeviceAnnce               0      0     22
       -> APSME_HoldDataRequests        0      0     20
     ZDApp_ChangeMatchDescRespPermission
                                        2      0      0
       -> afSetMatch                    4      0      0
     ZDApp_CoordStartPANIDConflictCB
                                        0      0      0
     ZDApp_DeviceAuthEvt                2      0      9
       -> ZDApp_ResetTimerCancel        4      0      0
       -> osal_set_event                4      0      0
       -> ZDApp_SaveNwkKey              4      0      0
       -> ZDApp_AnnounceNewAddress      4      0      0
       -> NLME_SetPollRate              4      0      0
     ZDApp_InMsgCB                      0      0     14
       -> ZDP_GenericRsp                0      0     28
     ZDApp_Init                         2      0      0
       -> NLME_GetExtAddr               4      0      0
       -> ZDAppCheckForHoldKey          4      0      0
       -> ZDO_Init                      4      0      0
       -> afRegister                    4      0      0
       -> ZDOInitDevice                 4      0      0
       -> HalLedBlink                   4      0      0
       -> ZDApp_RegisterCBs             4      0      0
     ZDApp_InitUserDesc                 0      0     31
       -> osal_memset                   0      0     54
       -> osal_nv_item_init             0      0     58
       -> osal_nv_read                  0      0     62
     ZDApp_LeaveCtrlBypass              2      0      0
     ZDApp_LeaveCtrlInit                0      0     26
       -> osal_nv_item_init             0      0     24
       -> osal_nv_read                  0      0     28
     ZDApp_LeaveCtrlSet                 0      0     14
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveCtrlStartup             1      0     26
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveReset                   2      0     10
       -> ZDApp_LeaveCtrlSet            4      0      0
       -> ZDApp_ResetTimerStart         4      0      0
     ZDApp_LeaveUpdate                  0      0      0
     ZDApp_NVUpdate                     0      0      0
     ZDApp_NetworkInit                  2      0     16
       -> osal_start_timerEx            4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NetworkStartEvt              2      0      0
       -> osal_pwrmgr_device            4      0      0
       -> osal_set_event                4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_SetEnergyThreshold       4      0      0
       -> osal_set_event                4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NodeProfileSync              0      0     26
       -> nwk_getNetworkDesc            0      0     20
       -> NLME_SetBroadcastFilter       0      0     20
     ZDApp_NwkStateUpdateCB             2      0      0
       -> osal_get_timeoutEx            4      0      0
     ZDApp_ProcessMsgCBs                0      0     47
       -> ZDO_ParseAddrRsp              0      0     62
       -> ZDO_UpdateAddrManager         0      0     62
       -> osal_mem_free                 0      0     62
       -> ZDO_ParseBindUnbindReq        0      0     62
       -> ZDO_ProcessBindUnbindReq      0      0     62
     ZDApp_ProcessNetworkJoin           0      0     28
       -> osal_set_event                0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> NLME_GetShortAddr             0      0     24
       -> ZMacSetReq                    0      0     24
       -> nwkNeighborInitTable          0      0     24
       -> NLME_NwkDiscTerm              0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> osal_set_event                0      0     24
       -> NLME_SetPollRate              0      0     24
       -> NLME_SetQueuedPollRate        0      0     24
       -> NLME_SetResponseRate          0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> nwkNeighborInitTable          0      0     24
       -> NLME_NwkDiscTerm              0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> osal_set_event                0      0     24
     ZDApp_ProcessOSALMsg               1      0     27
       -> ZDP_IncomingData              0      0     32
       -> ZDApp_ProcessMsgCBs           0      0     32
       -> ZDApp_NodeProfileSync         0      0     32
       -> NLME_JoinRequest              0      0     34
       -> osal_rand                     0      0     32
       -> ZDApp_NetworkInit             0      0     32
       -> osal_rand                     0      0     32
       -> ZMacSetReq                    0      0     32
       -> ZMacSetReq                    0      0     32
       -> ZMacSetReq                    0      0     32
       -> NLME_ReJoinRequest            0      0     32
       -> osal_rand                     0      0     32
       -> ZDApp_NetworkInit             0      0     32
       -> NLME_SetPollRate              0      0     32
       -> NLME_SetQueuedPollRate        0      0     32
       -> NLME_SetResponseRate          0      0     32
       -> osal_rand                     0      0     32
       -> ZDApp_NetworkInit             0      0     32
       -> ZDApp_ProcessNetworkJoin      0      0     32
       -> sAddrExtCpy                   0      0     32
       -> ZDApp_NetworkInit             0      0     32
     ZDApp_ProcessSecEvent              0      0      9
       -> ZDApp_DeviceAuthEvt           0      0     18
       -> ZDApp_SaveNwkKey              0      0     18
     ZDApp_ProcessSecMsg                2      0      0
       -> ZDSecMgrTransportKeyInd       4      0      0
       -> ZDSecMgrSwitchKeyInd          4      0      0
     ZDApp_ReadNetworkRestoreState      0      0      9
       -> zgReadStartupOptions          0      0     18
     ZDApp_RegisterCBs                  2      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
     ZDApp_ResetNwkKey                  0      0     35
       -> osal_memset                   0      0     62
       -> osal_nv_write                 0      0     70
     ZDApp_ResetTimerCancel             2      0      0
       -> osal_stop_timerEx             4      0      0
     ZDApp_ResetTimerStart              2      0      0
       -> osal_start_timerEx            4      0      0
     ZDApp_RestoreNetworkState          0      0      9
       -> NLME_InitNV                   0      0     18
       -> NLME_RestoreFromNV            0      0     18
       -> NLME_GetShortAddr             0      0     18
       -> sAddrExtCpy                   0      0     18
     ZDApp_RestoreNwkKey                0      0     37
       -> osal_nv_read                  0      0     74
     ZDApp_SaveNetworkStateEvt          0      0      0
     ZDApp_SaveNwkKey                   0      0     46
       -> SSP_ReadNwkActiveKey          0      0     66
       -> osal_nv_write                 0      0     74
     ZDApp_SecInit                      2      0      0
       -> ZDSecMgrInit                  4      0      0
     ZDApp_SendEventMsg                 2      0      0
       -> ZDApp_SendMsg                 4      0      0
     ZDApp_SendMsg                      1      0     55
       -> osal_msg_allocate             0      0     40
       -> osal_memcpy                   0      0     46
       -> osal_msg_send                 0      0     40
     ZDApp_StartJoiningCycle            2      0      0
       -> ZDApp_NetworkInit             4      0      0
     ZDApp_StopJoiningCycle             2      0      0
     ZDApp_event_loop                   0      0     10
       -> ZDO_StartDevice               0      0     20
       -> ZDApp_ProcessOSALMsg          0      0     20
       -> osal_msg_deallocate           0      0     20
       -> osal_msg_receive              0      0     20
       -> ZDO_UpdateNwkStatus           0      0     20
       -> osal_start_timerEx            0      0     20
     ZDOInitDevice                      0      0     12
       -> zgInitItems                   0      0     24
       -> ZDConfig_InitDescriptors      0      0     24
       -> ZDApp_LeaveCtrlInit           0      0     24
       -> ZDApp_LeaveCtrlStartup        0      0     24
       -> zgWriteStartupOptions         0      0     24
       -> osal_set_event                0      0     24
       -> ZDAppDetermineDeviceType      0      0     24
       -> osal_rand                     0      0     24
       -> ZDSecMgrInit                  0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> NLME_SetBroadcastFilter       0      0     24
     ZDO_AddrChangeIndicationCB         2      0      0
       -> osal_set_event                4      0      0
       -> ZDApp_AnnounceNewAddress      4      0      0
     ZDO_ConcentratorIndicationCB       0      0      0
     ZDO_JoinConfirmCB                  2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> ZDApp_SendMsg                 4      0      0
     ZDO_JoinIndicationCB               0      0      1
     ZDO_LeaveCnf                       0      0      9
       -> NLME_GetExtAddr               0      0     18
       -> sAddrExtCmp                   0      0     18
       -> ZDApp_LeaveReset              0      0     18
     ZDO_LeaveInd                       0      0     10
       -> ZDApp_LeaveReset              0      0     20
       -> NLME_GetCoordShortAddr        0      0     20
     ZDO_ManytoOneFailureIndicationCB
                                        2      0      0
       -> RTG_MTORouteReq               4      0      0
     ZDO_NetworkDiscoveryConfirmCB      1      0     32
       -> nwk_ExtPANIDValid             0      0     64
       -> sAddrExtCmp                   0      0     64
       -> sAddrExtCpy                   0      0     64
       -> ZDApp_SendMsg                 0      0     64
     ZDO_NetworkFormationConfirmCB      2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_set_event                4      0      0
     ZDO_PollConfirmCB                  0      0      0
     ZDO_RegisterForZdoCB               2      0      0
     ZDO_SrcRtgIndCB                    3      0      5
     ZDO_StartRouterConfirmCB           2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_set_event                4      0      0
     ZDO_SyncIndicationCB               2      0      0
       -> nwkNeighborInitTable          4      0      0
       -> ZDApp_SendMsg                 4      0      0
     ZDO_UpdateDeviceIndication         0      0      0


   Segment part sizes:

     Function/Label                              Bytes
     --------------                              -----
     _A_IEN0                                        1
     WDCTL                                          1
     MatchRsps                                      1
     zdoDiscCounter                                 1
     ZDAppNwkAddr                                   9
     zdappMgmtNwkDiscRspTransSeq                    1
     zdappMgmtNwkDiscReqInProgress                  1
     zdappMgmtNwkDiscRspAddr                        9
     zdappMgmtNwkDiscStartIndex                     1
     zdappMgmtSavedNwkState                         1
     nwkFrameCounterChanges                         2
     continueJoining                                1
     _tmpRejoinState                                1
     ZDO_UseExtendedPANID                           8
     zdoCBFunc                                      2
     ZDAppTaskID                                    1
     nwkStatus                                      1
     ZDApp_AutoFindMode_epDesc                      2
     ZDApp_LeaveCtrl                                1
     devState                                       1
     devStartMode                                   1
     retryCnt                                       1
     ZDApp_epDesc                                   6
     ZDApp_SavedPollRate                            2
     ZDApp_Init                                    75
     ??Subroutine29_0                               7
     ZDApp_SecInit                                 10
     ZDApp_event_loop                             176
     ??Subroutine25_0                               5
     ??Subroutine28_0                               6
     ZDApp_ProcessSecEvent                         82
     ?Subroutine19                                  5
     ??Subroutine31_0                               6
     ?Subroutine18                                  2
     ??Subroutine24_0                               3
     ZDOInitDevice                                141
     ?Subroutine20                                 11
     ?Subroutine4                                   5
     ?Subroutine3                                   6
     ZDApp_ReadNetworkRestoreState                 21
     ZDAppDetermineDeviceType                      74
     ZDApp_NetworkStartEvt                         78
     ?Subroutine16                                  3
     ZDApp_DeviceAuthEvt                           46
     ?Subroutine0                                   8
     ZDApp_SaveNetworkStateEvt                      3
     ZDApp_RestoreNetworkState                     64
     ?Subroutine1                                  13
     ZDApp_InitUserDesc                            93
     ?Subroutine13                                 32
     ZDAppCheckForHoldKey                          20
     ZDApp_ProcessOSALMsg                         451
     ?Subroutine12                                 22
     ?Subroutine9                                  20
     ZDApp_ProcessMsgCBs                          122
     ?Subroutine23                                  5
     ?Subroutine11                                  7
     ??Subroutine30_0                               9
     ZDApp_RegisterCBs                             31
     ?Subroutine5                                   2
     ??Subroutine26_0                               9
     ZDApp_ProcessSecMsg                           59
     ZDApp_ProcessNetworkJoin                     335
     ?Subroutine8                                  12
     ZDApp_SaveNwkKey                              82
     ?Subroutine21                                 10
     ?Subroutine14                                  6
     ??Subroutine27_0                               8
     ZDApp_ResetNwkKey                             38
     ZDApp_RestoreNwkKey                          110
     ZDApp_ResetTimerStart                         16
     ?Subroutine7                                   5
     ZDApp_ResetTimerCancel                        19
     ZDApp_LeaveCtrlInit                           65
     ?Subroutine2                                  14
     ZDApp_LeaveCtrlSet                            51
     ZDApp_LeaveCtrlBypass                         16
     ZDApp_LeaveCtrlStartup                        75
     ZDApp_LeaveReset                              16
     ZDApp_LeaveUpdate                              3
     ZDApp_SendEventMsg                             8
     ?Subroutine22                                  5
     ?Subroutine6                                   9
     ZDApp_SendMsg                                100
     ZDO_NetworkDiscoveryConfirmCB                374
     ZDO_NetworkFormationConfirmCB                 33
     ?Subroutine15                                 19
     ZDO_StartRouterConfirmCB                      33
     ZDO_JoinConfirmCB                             39
     ZDO_AddrChangeIndicationCB                    13
     ZDO_JoinIndicationCB                           0
     ?Subroutine17                                  5
     ZDO_ConcentratorIndicationCB                   3
     ZDO_LeaveCnf                                  41
     ?Subroutine10                                 13
     ZDO_LeaveInd                                  83
     ZDO_SyncIndicationCB                          26
     ZDO_ManytoOneFailureIndicationCB
                                                   10
     ZDO_PollConfirmCB                              3
     AddrMgrWriteNVRequest                          3
     ZDO_UpdateDeviceIndication                     3
     ZDApp_InMsgCB                                 98
     ZDApp_ChangeMatchDescRespPermission
                                                   10
     ZDApp_NetworkInit                             29
     ZDApp_NwkStateUpdateCB                        19
     ZDApp_NodeProfileSync                        104
     ZDApp_StartJoiningCycle                       39
     ZDApp_StopJoiningCycle                        31
     ZDApp_AnnounceNewAddress                      59
     ZDApp_NVUpdate                                 3
     ZDApp_CoordStartPANIDConflictCB
                                                   10
     ZDO_SrcRtgIndCB                               71
     ZDO_RegisterForZdoCB                          22
     ?<Initializer for zdoDiscCounter>              1
     ?<Initializer for continueJoining>             1
     ?<Initializer for devState>                    1
     ?<Initializer for ZDApp_epDesc>                6
     ?<Initializer for ZDApp_SavedPollRate>         2
     __Constant_1                                   4
     __Constant_0                                   4
     __Constant_3e8                                 4
     ??ZDApp_Init?relay                             6
     ??ZDApp_SecInit?relay                          6
     ??ZDApp_event_loop?relay                       6
     ??ZDApp_ProcessSecEvent?relay                  6
     ??ZDOInitDevice?relay                          6
     ??ZDApp_ReadNetworkRestoreState?relay          6
     ??ZDAppDetermineDeviceType?relay               6
     ??ZDApp_NetworkStartEvt?relay                  6
     ??ZDApp_DeviceAuthEvt?relay                    6
     ??ZDApp_SaveNetworkStateEvt?relay              6
     ??ZDApp_RestoreNetworkState?relay              6
     ??ZDApp_InitUserDesc?relay                     6
     ??ZDAppCheckForHoldKey?relay                   6
     ??ZDApp_ProcessOSALMsg?relay                   6
     ??ZDApp_ProcessMsgCBs?relay                    6
     ??ZDApp_RegisterCBs?relay                      6
     ??ZDApp_ProcessSecMsg?relay                    6
     ??ZDApp_ProcessNetworkJoin?relay               6
     ??ZDApp_SaveNwkKey?relay                       6
     ??ZDApp_ResetNwkKey?relay                      6
     ??ZDApp_RestoreNwkKey?relay                    6
     ??ZDApp_ResetTimerStart?relay                  6
     ??ZDApp_ResetTimerCancel?relay                 6
     ??ZDApp_LeaveCtrlInit?relay                    6
     ??ZDApp_LeaveCtrlSet?relay                     6
     ??ZDApp_LeaveCtrlBypass?relay                  6
     ??ZDApp_LeaveCtrlStartup?relay                 6
     ??ZDApp_LeaveReset?relay                       6
     ??ZDApp_LeaveUpdate?relay                      6
     ??ZDApp_SendEventMsg?relay                     6
     ??ZDApp_SendMsg?relay                          6
     ??ZDO_NetworkDiscoveryConfirmCB?relay          6
     ??ZDO_NetworkFormationConfirmCB?relay          6
     ??ZDO_StartRouterConfirmCB?relay               6
     ??ZDO_JoinConfirmCB?relay                      6
     ??ZDO_AddrChangeIndicationCB?relay             6
     ??ZDO_JoinIndicationCB?relay                   6
     ??ZDO_ConcentratorIndicationCB?relay           6
     ??ZDO_LeaveCnf?relay                           6
     ??ZDO_LeaveInd?relay                           6
     ??ZDO_SyncIndicationCB?relay                   6
     ??ZDO_ManytoOneFailureIndicationCB?relay       6
     ??ZDO_PollConfirmCB?relay                      6
     ??AddrMgrWriteNVRequest?relay                  6
     ??ZDO_UpdateDeviceIndication?relay             6
     ??ZDApp_InMsgCB?relay                          6
     ??ZDApp_ChangeMatchDescRespPermission?relay    6
     ??ZDApp_NetworkInit?relay                      6
     ??ZDApp_NwkStateUpdateCB?relay                 6
     ??ZDApp_NodeProfileSync?relay                  6
     ??ZDApp_StartJoiningCycle?relay                6
     ??ZDApp_StopJoiningCycle?relay                 6
     ??ZDApp_AnnounceNewAddress?relay               6
     ??ZDApp_NVUpdate?relay                         6
     ??ZDApp_CoordStartPANIDConflictCB?relay        6
     ??ZDO_SrcRtgIndCB?relay                        6
     ??ZDO_RegisterForZdoCB?relay                   6

 
 3 931 bytes in segment BANKED_CODE
   342 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
    11 bytes in segment XDATA_I
    11 bytes in segment XDATA_ID
    12 bytes in segment XDATA_ROM_C
    43 bytes in segment XDATA_Z
 
 4 284 bytes of CODE  memory
     0 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  2 bytes shared)
    54 bytes of XDATA memory

Errors: none
Warnings: none
