###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                01/Jul/2015  15:37:29 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\Source\SerialApp.c #
#    Command line       =  -f E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ #
#                          ÉÕÐ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ         #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0           #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\Source\SerialApp.c #
#                           -D ZIGBEEPRO -D HAL_UART=TRUE -D                  #
#                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC             #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\Coordinat #
#                          orEB-Pro\List\ -lA E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ #
#                          ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ´¾µÏñ\ZigBee\ZigBee\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Utilities\SerialApp #
#                          \CC2530DB\CoordinatorEB-Pro\List\ --diag_suppress  #
#                          Pe001,Pa010 -o E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨Å #
#                          äÌ××ÊÁÏV6.0\ÉÕÐ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2 #
#                          .3.0-1.4.0\Projects\zstack\Utilities\SerialApp\CC2 #
#                          530DB\CoordinatorEB-Pro\Obj\ -e                    #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø #
#                          ¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ´¾µÏñ\ZigBee\ZigBee\ZStack #
#                          -CC2530-2.3.0-1.4.0\Projects\zstack\Utilities\Seri #
#                          alApp\CC2530DB\ -I E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ #
#                          ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ´¾µÏñ\ZigBee\ZigBee\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Utilities\SerialApp #
#                          \CC2530DB\..\SOURCE\ -I E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø #
#                          ¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ´¾µÏñ\ZigBee\ZigBee\ZStack #
#                          -CC2530-2.3.0-1.4.0\Projects\zstack\Utilities\Seri #
#                          alApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I         #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\MT\ -I E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø #
#                          ¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ´¾µÏñ\ZigBee\ZigBee\ZStack #
#                          -CC2530-2.3.0-1.4.0\Projects\zstack\Utilities\Seri #
#                          alApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLU #
#                          DE\ -I E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV #
#                          6.0\ÉÕÐ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4 #
#                          .0\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I                #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\OSAL\INCLUDE\ -I                  #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\STACK\AF\ -I                      #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\STACK\NWK\ -I                     #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\STACK\SEC\ -I                     #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\STACK\SAPI\ -I                    #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\STACK\SYS\ -I                     #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\STACK\ZDO\ -I                     #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\ZMAC\F8W\ -I                      #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\ZMAC\ -I                          #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\SERVICES\SADDR\ -I                #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\SERVICES\SDATA\ -I                #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\MAC\INCLUDE\ -I                   #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I                #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I           #
#                          E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\  #
#                          -I "C:\Program Files\IAR Systems\Embedded          #
#                          Workbench 5.3\8051\INC\" -I "C:\Program Files\IAR  #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\Coordinat #
#                          orEB-Pro\List\SerialApp.lst                        #
#    Object file        =  E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ #
#                          ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\Coordinat #
#                          orEB-Pro\Obj\SerialApp.r51                         #
#                                                                             #
#                                                                             #
###############################################################################

E:\Æ½Ì¨×ÊÁÏ\FS_11C14ÎïÁªÍø¿ª·¢Æ½Ì¨ÅäÌ××ÊÁÏV6.0\ÉÕÐ´¾µÏñ\ZigBee\ZigBee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
      1          /**************************************************************************************************
      2            Filename:       SerialApp.c
      3            Revised:        $Date: 2009-03-29 10:51:47 -0700 (Sun, 29 Mar 2009) $
      4            Revision:       $Revision: 19585 $
      5          
      6            Description -   Serial Transfer Application (no Profile).
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This sample application is basically a cable replacement
     42            and it should be customized for your application. A PC
     43            (or other device) sends data via the serial port to this
     44            application's device.  This device transmits the message
     45            to another device with the same application running. The
     46            other device receives the over-the-air message and sends
     47            it to a PC (or other device) connected to its serial port.
     48          				
     49            This application doesn't have a profile, so it handles everything directly.
     50          
     51            Key control:
     52              SW1:
     53              SW2:  initiates end device binding
     54              SW3:
     55              SW4:  initiates a match description request
     56          *********************************************************************/
     57          
     58          /*********************************************************************
     59           * INCLUDES
     60           */
     61          
     62          #include "AF.h"
     63          #include "OnBoard.h"
     64          #include "OSAL_Tasks.h"
     65          #include "SerialApp.h"
     66          #include "ZDApp.h"
     67          #include "ZDObject.h"
     68          #include "ZDProfile.h"
     69          
     70          #include "hal_drivers.h"
     71          #include "hal_key.h"
     72          #if defined ( LCD_SUPPORTED )
     73            #include "hal_lcd.h"
     74          #endif
     75          #include "hal_led.h"
     76          #include "hal_uart.h"
     77          
     78          /*********************************************************************
     79           * MACROS
     80           */
     81          
     82          /*********************************************************************
     83           * CONSTANTS
     84           */
     85          
     86          #if !defined( SERIAL_APP_PORT )
     87          #define SERIAL_APP_PORT  0
     88          #endif
     89          
     90          #if !defined( SERIAL_APP_BAUD )
     91          #define SERIAL_APP_BAUD  HAL_UART_BR_38400
     92          //#define SERIAL_APP_BAUD  HAL_UART_BR_115200
     93          #endif
     94          
     95          // When the Rx buf space is less than this threshold, invoke the Rx callback.
     96          #if !defined( SERIAL_APP_THRESH )
     97          #define SERIAL_APP_THRESH  64
     98          #endif
     99          
    100          #if !defined( SERIAL_APP_RX_SZ )
    101          #define SERIAL_APP_RX_SZ  128
    102          #endif
    103          
    104          #if !defined( SERIAL_APP_TX_SZ )
    105          #define SERIAL_APP_TX_SZ  128
    106          #endif
    107          
    108          // Millisecs of idle time after a byte is received before invoking Rx callback.
    109          #if !defined( SERIAL_APP_IDLE )
    110          #define SERIAL_APP_IDLE  6
    111          #endif
    112          
    113          // Loopback Rx bytes to Tx for throughput testing.
    114          #if !defined( SERIAL_APP_LOOPBACK )
    115          #define SERIAL_APP_LOOPBACK  FALSE
    116          #endif
    117          
    118          // This is the max byte count per OTA message.
    119          #if !defined( SERIAL_APP_TX_MAX )
    120          #define SERIAL_APP_TX_MAX  80
    121          #endif
    122          
    123          #define SERIAL_APP_RSP_CNT  4
    124          
    125          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    126          const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
   \                     SerialApp_ClusterList:
   \   000000   01000200     DW 1, 2
    127          {
    128            SERIALAPP_CLUSTERID1,
    129            SERIALAPP_CLUSTERID2
    130          };
    131          

   \                                 In  segment XDATA_ROM_C, align 1
    132          const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
   \                     SerialApp_SimpleDesc:
   \   000000   0B           DB 11
   \   000001   050F0100     DW 3845, 1
   \   000005   0002         DB 0, 2
   \   000007   ....         DW SerialApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SerialApp_ClusterList
    133          {
    134            SERIALAPP_ENDPOINT,              //  int   Endpoint;
    135            SERIALAPP_PROFID,                //  uint16 AppProfId[2];
    136            SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    137            SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    138            SERIALAPP_FLAGS,                 //  int   AppFlags:4;
    139            SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    140            (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;
    141            SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
    142            (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;
    143          };
    144          

   \                                 In  segment XDATA_ROM_C, align 1
    145          const endPointDesc_t SerialApp_epDesc =
   \                     SerialApp_epDesc:
   \   000000   0B           DB 11
   \   000001   ........     DW SerialApp_TaskID, SerialApp_SimpleDesc
   \   000005   00           DB 0
    146          {
    147            SERIALAPP_ENDPOINT,
    148           &SerialApp_TaskID,
    149            (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc,
    150            noLatencyReqs
    151          };
    152          
    153          /*********************************************************************
    154           * TYPEDEFS
    155           */
    156          
    157          /*********************************************************************
    158           * GLOBAL VARIABLES
    159           */
    160          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
   \                     SerialApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    162          
    163          /*********************************************************************
    164           * EXTERNAL VARIABLES
    165           */
    166          
    167          /*********************************************************************
    168           * EXTERNAL FUNCTIONS
    169           */
    170          
    171          /*********************************************************************
    172           * LOCAL VARIABLES
    173           */
    174          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          static uint8 SerialApp_MsgID;
   \                     SerialApp_MsgID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          static afAddrType_t SerialApp_TxAddr;
   \                     SerialApp_TxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          static uint8 SerialApp_TxSeq;
   \                     SerialApp_TxSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
   \                     SerialApp_TxBuf:
   \   000000                DS 81
   \   000051                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180          static uint8 SerialApp_TxLen;
   \                     SerialApp_TxLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    181          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          static afAddrType_t SerialApp_RxAddr;
   \                     SerialApp_RxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          static uint8 SerialApp_RxSeq;
   \                     SerialApp_RxSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
   \                     SerialApp_RspBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    185          
    186          /*********************************************************************
    187           * LOCAL FUNCTIONS
    188           */
    189          
    190          static void SerialApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    191          static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
    192          static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
    193          static void SerialApp_Send(void);
    194          static void SerialApp_Resp(void);
    195          static void SerialApp_CallBack(uint8 port, uint8 event);
    196          
    197          /*********************************************************************
    198           * @fn      SerialApp_Init
    199           *
    200           * @brief   This is called during OSAL tasks' initialization.
    201           *
    202           * @param   task_id - the Task ID assigned by OSAL.
    203           *
    204           * @return  none
    205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          void SerialApp_Init( uint8 task_id )
   \                     SerialApp_Init:
    207          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    208            halUARTCfg_t uartConfig;
    209          
    210            SerialApp_TaskID = task_id;
   \   00000C   90....       MOV     DPTR,#SerialApp_TaskID
   \   00000F   F0           MOVX    @DPTR,A
    211            SerialApp_RxSeq = 0xC3;
   \   000010   74C3         MOV     A,#-0x3d
   \   000012   90....       MOV     DPTR,#SerialApp_RxSeq
   \   000015   F0           MOVX    @DPTR,A
    212          
    213            afRegister( (endPointDesc_t *)&SerialApp_epDesc );
   \   000016                ; Setup parameters for call to function afRegister
   \   000016   7A..         MOV     R2,#(SerialApp_epDesc & 0xff)
   \   000018   7B..         MOV     R3,#((SerialApp_epDesc >> 8) & 0xff)
   \   00001A   12....       LCALL   ??afRegister?relay
    214          
    215            RegisterForKeys( task_id );
   \   00001D                ; Setup parameters for call to function RegisterForKeys
   \   00001D   EE           MOV     A,R6
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   ??RegisterForKeys?relay
    216          
    217            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   000022   7401         MOV     A,#0x1
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   F0           MOVX    @DPTR,A
    218            uartConfig.baudRate             = SERIAL_APP_BAUD;
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   7402         MOV     A,#0x2
   \   000030   F0           MOVX    @DPTR,A
    219            uartConfig.flowControl          = TRUE;
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   7401         MOV     A,#0x1
   \   000036   F0           MOVX    @DPTR,A
    220            uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   7440         MOV     A,#0x40
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
    221            uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
   \   000042   740A         MOV     A,#0xa
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   7480         MOV     A,#-0x80
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   E4           CLR     A
   \   00004C   F0           MOVX    @DPTR,A
    222            uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
   \   00004D   7412         MOV     A,#0x12
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   7480         MOV     A,#-0x80
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
    223            uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
   \   000058   7405         MOV     A,#0x5
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   7406         MOV     A,#0x6
   \   00005F   F0           MOVX    @DPTR,A
    224            uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
   \   000060   7416         MOV     A,#0x16
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   7401         MOV     A,#0x1
   \   000067   F0           MOVX    @DPTR,A
    225            uartConfig.callBackFunc         = SerialApp_CallBack;
   \   000068   741B         MOV     A,#0x1b
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   74..         MOV     A,#(??SerialApp_CallBack?relay & 0xff)
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   74..         MOV     A,#((??SerialApp_CallBack?relay >> 8) & 0xff)
   \   000073   12....       LCALL   ?Subroutine0 & 0xFFFF
    226            HalUARTOpen (SERIAL_APP_PORT, &uartConfig);
   \                     ??CrossCallReturnLabel_0:
   \   000076   AA82         MOV     R2,DPL
   \   000078   AB83         MOV     R3,DPH
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   12....       LCALL   ??HalUARTOpen?relay
    227          
    228          #if defined ( LCD_SUPPORTED )
    229            HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
   \   00007F                ; Setup parameters for call to function HalLcdWriteString
   \   00007F   7902         MOV     R1,#0x2
   \   000081   7A..         MOV     R2,#(`?<Constant "SerialApp">` & 0xff)
   \   000083   7B..         MOV     R3,#((`?<Constant "SerialApp">` >> 8) & 0xff)
   \   000085   12....       LCALL   ??HalLcdWriteString?relay
    230          #endif
    231            
    232            ZDO_RegisterForZDOMsg( SerialApp_TaskID, End_Device_Bind_rsp );
   \   000088                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000088   7A20         MOV     R2,#0x20
   \   00008A   7B80         MOV     R3,#-0x80
   \   00008C   90....       MOV     DPTR,#SerialApp_TaskID
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F9           MOV     R1,A
   \   000091   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    233            ZDO_RegisterForZDOMsg( SerialApp_TaskID, Match_Desc_rsp );
   \   000094                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000094   7A06         MOV     R2,#0x6
   \   000096   7B80         MOV     R3,#-0x80
   \   000098   90....       MOV     DPTR,#SerialApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    234          }
   \   0000A0   741D         MOV     A,#0x1d
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   7F01         MOV     R7,#0x1
   \   0000A7   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    235          
    236          /*********************************************************************
    237           * @fn      SerialApp_ProcessEvent
    238           *
    239           * @brief   Generic Application Task event processor.
    240           *
    241           * @param   task_id  - The OSAL assigned task ID.
    242           * @param   events   - Bit map of events to process.
    243           *
    244           * @return  Event flags of all unprocessed events.
    245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
   \                     SerialApp_ProcessEvent:
    247          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
    248            (void)task_id;  // Intentionally unreferenced parameter
    249            
    250            if ( events & SYS_EVENT_MSG )
   \   00000E   7480         MOV     A,#-0x80
   \   000010   55..         ANL     A,?V0 + 1
   \   000012   F9           MOV     R1,A
   \   000013   E4           CLR     A
   \   000014   7001         JNZ     ??SerialApp_ProcessEvent_0
   \   000016   E9           MOV     A,R1
   \                     ??SerialApp_ProcessEvent_0:
   \   000017   701F         JNZ     ??SerialApp_ProcessEvent_1
    251            {
    252              afIncomingMSGPacket_t *MSGpkt;
    253          
    254              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
    255              {
    256                switch ( MSGpkt->hdr.event )
    257                {
    258                case ZDO_CB_MSG:
    259                  SerialApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    260                  break;
    261                    
    262                case KEY_CHANGE:
    263                  SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    264                  break;
    265          
    266                case AF_INCOMING_MSG_CMD:
    267                  SerialApp_ProcessMSGCmd( MSGpkt );
    268                  break;
    269          
    270                default:
    271                  break;
    272                }
    273          
    274                osal_msg_deallocate( (uint8 *)MSGpkt );
    275              }
    276          
    277              return ( events ^ SYS_EVENT_MSG );
    278            }
    279          
    280            if ( events & SERIALAPP_SEND_EVT )
   \   000019   EA           MOV     A,R2
   \   00001A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001C   4003         JC      $+5
   \   00001E   02....       LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
    281            {
    282              SerialApp_Send();
   \   000021                ; Setup parameters for call to function SerialApp_Send
   \   000021   12....       LCALL   ??SerialApp_Send?relay
    283              return ( events ^ SERIALAPP_SEND_EVT );
   \   000024   7401         MOV     A,#0x1
   \                     ??SerialApp_ProcessEvent_3:
   \   000026   65..         XRL     A,?V0 + 0
   \   000028   FA           MOV     R2,A
   \   000029   AB..         MOV     R3,?V0 + 1
   \   00002B   02....       LJMP    ??SerialApp_ProcessEvent_4 & 0xFFFF
    284            }
   \                     ??SerialApp_ProcessEvent_5:
   \   00002E                ; Setup parameters for call to function SerialApp_ProcessMSGCmd
   \   00002E   12....       LCALL   ??SerialApp_ProcessMSGCmd?relay
   \                     ??SerialApp_ProcessEvent_6:
   \   000031                ; Setup parameters for call to function osal_msg_deallocate
   \   000031   AA..         MOV     R2,?V0 + 2
   \   000033   AB..         MOV     R3,?V0 + 3
   \   000035   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??SerialApp_ProcessEvent_1:
   \   000038                ; Setup parameters for call to function osal_msg_receive
   \   000038   90....       MOV     DPTR,#SerialApp_TaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??osal_msg_receive?relay
   \   000040   8A..         MOV     ?V0 + 2,R2
   \   000042   8B..         MOV     ?V0 + 3,R3
   \   000044   EA           MOV     A,R2
   \   000045   7001         JNZ     ??SerialApp_ProcessEvent_7
   \   000047   EB           MOV     A,R3
   \                     ??SerialApp_ProcessEvent_7:
   \   000048   7003         JNZ     $+5
   \   00004A   02....       LJMP    ??SerialApp_ProcessEvent_8 & 0xFFFF
   \   00004D   8A82         MOV     DPL,R2
   \   00004F   8B83         MOV     DPH,R3
   \   000051   E0           MOVX    A,@DPTR
   \   000052   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for SerialApp_ProcessEvent>_0`:
   \   000055   00           DB        0
   \   000056   03           DB        3
   \   000057   1A           DB        26
   \   000058   ....         DW        ??SerialApp_ProcessEvent_5
   \   00005A   C0           DB        192
   \   00005B   ....         DW        ??SerialApp_ProcessEvent_9
   \   00005D   D3           DB        211
   \   00005E   ....         DW        ??SerialApp_ProcessEvent_10
   \   000060   ....         DW        ??SerialApp_ProcessEvent_6
   \                     ??SerialApp_ProcessEvent_10:
   \   000062   EA           MOV     A,R2
   \   000063   240C         ADD     A,#0xc
   \   000065   F582         MOV     DPL,A
   \   000067   EB           MOV     A,R3
   \   000068   3400         ADDC    A,#0x0
   \   00006A   F583         MOV     DPH,A
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F5..         MOV     ?V0 + 4,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F5..         MOV     ?V0 + 5,A
   \   000073   78..         MOV     R0,#?V0 + 4
   \   000075   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for SerialApp_ProcessEvent>_1`:
   \   000078   0000         DW        0
   \   00007A   0200         DW        2
   \   00007C   0680         DW        32774
   \   00007E   ....         DW        ??SerialApp_ProcessEvent_11
   \   000080   2080         DW        32800
   \   000082   ....         DW        ??SerialApp_ProcessEvent_12
   \   000084   ....         DW        ??SerialApp_ProcessEvent_6
   \                     ??SerialApp_ProcessEvent_12:
   \   000086   EA           MOV     A,R2
   \   000087   2413         ADD     A,#0x13
   \   000089   F582         MOV     DPL,A
   \   00008B   EB           MOV     A,R3
   \   00008C   3400         ADDC    A,#0x0
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F8           MOV     R0,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F583         MOV     DPH,A
   \   000096   8882         MOV     DPL,R0
   \   000098   E0           MOVX    A,@DPTR
   \   000099   7009         JNZ     ??SerialApp_ProcessEvent_13
   \   00009B                ; Setup parameters for call to function HalLedSet
   \   00009B   7A01         MOV     R2,#0x1
   \                     ??SerialApp_ProcessEvent_14:
   \   00009D   7908         MOV     R1,#0x8
   \   00009F   12....       LCALL   ??HalLedSet?relay
   \   0000A2   808D         SJMP    ??SerialApp_ProcessEvent_6
   \                     ??SerialApp_ProcessEvent_13:
   \   0000A4                ; Setup parameters for call to function HalLedSet
   \   0000A4   7A04         MOV     R2,#0x4
   \   0000A6   80F5         SJMP    ??SerialApp_ProcessEvent_14
   \                     ??SerialApp_ProcessEvent_11:
   \   0000A8                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   0000A8   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   0000AB   8A..         MOV     ?V0 + 4,R2
   \   0000AD   8B..         MOV     ?V0 + 5,R3
   \   0000AF   AE..         MOV     R6,?V0 + 4
   \   0000B1   AF..         MOV     R7,?V0 + 5
   \   0000B3   EE           MOV     A,R6
   \   0000B4   7001         JNZ     ??SerialApp_ProcessEvent_15
   \   0000B6   EF           MOV     A,R7
   \                     ??SerialApp_ProcessEvent_15:
   \   0000B7   7003         JNZ     $+5
   \   0000B9   02....       LJMP    ??SerialApp_ProcessEvent_6 & 0xFFFF
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   7032         JNZ     ??SerialApp_ProcessEvent_16
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   602C         JZ      ??SerialApp_ProcessEvent_16
   \   0000C9   7402         MOV     A,#0x2
   \   0000CB   90....       MOV     DPTR,#(SerialApp_TxAddr + 8)
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   8E82         MOV     DPL,R6
   \   0000D1   8F83         MOV     DPH,R7
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F8           MOV     R0,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F9           MOV     R1,A
   \   0000D9   90....       MOV     DPTR,#SerialApp_TxAddr
   \   0000DC   E8           MOV     A,R0
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E9           MOV     A,R1
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   8E82         MOV     DPL,R6
   \   0000E3   8F83         MOV     DPH,R7
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   90....       MOV     DPTR,#(SerialApp_TxAddr + 9)
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE                ; Setup parameters for call to function HalLedSet
   \   0000EE   7A01         MOV     R2,#0x1
   \   0000F0   7908         MOV     R1,#0x8
   \   0000F2   12....       LCALL   ??HalLedSet?relay
   \                     ??SerialApp_ProcessEvent_16:
   \   0000F5                ; Setup parameters for call to function osal_mem_free
   \   0000F5   EE           MOV     A,R6
   \   0000F6   FA           MOV     R2,A
   \   0000F7   EF           MOV     A,R7
   \   0000F8   FB           MOV     R3,A
   \   0000F9   12....       LCALL   ??osal_mem_free?relay
   \   0000FC   02....       LJMP    ??SerialApp_ProcessEvent_6 & 0xFFFF
   \                     ??SerialApp_ProcessEvent_9:
   \   0000FF   8A82         MOV     DPL,R2
   \   000101   8B83         MOV     DPH,R3
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   E0           MOVX    A,@DPTR
   \   000107   FF           MOV     R7,A
   \   000108   8A82         MOV     DPL,R2
   \   00010A   8B83         MOV     DPH,R3
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   6003         JZ      $+5
   \   000111   02....       LJMP    ??SerialApp_ProcessEvent_6 & 0xFFFF
   \   000114   75....       MOV     ?V0 + 4,#(SerialApp_ClusterList & 0xff)
   \   000117   75....       MOV     ?V0 + 5,#((SerialApp_ClusterList >> 8) & 0xff)
   \   00011A   EF           MOV     A,R7
   \   00011B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00011D   5058         JNC     ??SerialApp_ProcessEvent_17
   \   00011F                ; Setup parameters for call to function HalLedSet
   \   00011F   7A00         MOV     R2,#0x0
   \   000121   7908         MOV     R1,#0x8
   \   000123   12....       LCALL   ??HalLedSet?relay
   \   000126   7408         MOV     A,#0x8
   \   000128   12....       LCALL   ?XSTACK_DISP0_8
   \   00012B   7402         MOV     A,#0x2
   \   00012D   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000130   E4           CLR     A
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A3           INC     DPTR
   \   000133   F0           MOVX    @DPTR,A
   \   000134                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000134   F5..         MOV     ?V0 + 6,A
   \   000136   78..         MOV     R0,#?V0 + 6
   \   000138   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013B   78..         MOV     R0,#?V0 + 4
   \   00013D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000140   75..02       MOV     ?V0 + 6,#0x2
   \   000143   78..         MOV     R0,#?V0 + 6
   \   000145   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000148   78..         MOV     R0,#?V0 + 4
   \   00014A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014D   78..         MOV     R0,#?V0 + 6
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000152   75..05       MOV     ?V0 + 6,#0x5
   \   000155   75..0F       MOV     ?V0 + 7,#0xf
   \   000158   78..         MOV     R0,#?V0 + 6
   \   00015A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00015D   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000160   EA           MOV     A,R2
   \   000161   FC           MOV     R4,A
   \   000162   EB           MOV     A,R3
   \   000163   FD           MOV     R5,A
   \   000164   790B         MOV     R1,#0xb
   \   000166   7409         MOV     A,#0x9
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   AA82         MOV     R2,DPL
   \   00016D   AB83         MOV     R3,DPH
   \   00016F   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   000172   7409         MOV     A,#0x9
   \   000174   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??SerialApp_ProcessEvent_17:
   \   000177   EF           MOV     A,R7
   \   000178   A2E3         MOV     C,0xE0 /* A   */.3
   \   00017A   4003         JC      $+5
   \   00017C   02....       LJMP    ??SerialApp_ProcessEvent_6 & 0xFFFF
   \   00017F                ; Setup parameters for call to function HalLedSet
   \   00017F   7A00         MOV     R2,#0x0
   \   000181   7908         MOV     R1,#0x8
   \   000183   12....       LCALL   ??HalLedSet?relay
   \   000186   7408         MOV     A,#0x8
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   740F         MOV     A,#0xf
   \   00018D   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000190   74FF         MOV     A,#-0x1
   \   000192   F0           MOVX    @DPTR,A
   \   000193   A3           INC     DPTR
   \   000194   F0           MOVX    @DPTR,A
   \   000195                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000195   75..00       MOV     ?V0 + 6,#0x0
   \   000198   78..         MOV     R0,#?V0 + 6
   \   00019A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019D   78..         MOV     R0,#?V0 + 4
   \   00019F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A2   75..02       MOV     ?V0 + 6,#0x2
   \   0001A5   78..         MOV     R0,#?V0 + 6
   \   0001A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AA   78..         MOV     R0,#?V0 + 4
   \   0001AC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AF   75..05       MOV     ?V0 + 4,#0x5
   \   0001B2   75..0F       MOV     ?V0 + 5,#0xf
   \   0001B5   78..         MOV     R0,#?V0 + 4
   \   0001B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BA   7902         MOV     R1,#0x2
   \   0001BC   7CFF         MOV     R4,#-0x1
   \   0001BE   7DFF         MOV     R5,#-0x1
   \   0001C0   7408         MOV     A,#0x8
   \   0001C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C5   AA82         MOV     R2,DPL
   \   0001C7   AB83         MOV     R3,DPH
   \   0001C9   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0001CC   7408         MOV     A,#0x8
   \   0001CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D1   02....       LJMP    ??SerialApp_ProcessEvent_6 & 0xFFFF
   \                     ??SerialApp_ProcessEvent_8:
   \   0001D4   AA..         MOV     R2,?V0 + 0
   \   0001D6   7480         MOV     A,#-0x80
   \   0001D8   65..         XRL     A,?V0 + 1
   \   0001DA   FB           MOV     R3,A
   \   0001DB   8058         SJMP    ??SerialApp_ProcessEvent_4
    285          
    286            if ( events & SERIALAPP_RESP_EVT )
   \                     ??SerialApp_ProcessEvent_2:
   \   0001DD   5402         ANL     A,#0x2
   \   0001DF   6050         JZ      ??SerialApp_ProcessEvent_18
    287            {
    288              SerialApp_Resp();
   \   0001E1                ; Setup parameters for call to function AF_DataRequest
   \   0001E1   75..1E       MOV     ?V0 + 2,#0x1e
   \   0001E4   78..         MOV     R0,#?V0 + 2
   \   0001E6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E9   75....       MOV     ?V0 + 2,#(SerialApp_MsgID & 0xff)
   \   0001EC   75....       MOV     ?V0 + 3,#((SerialApp_MsgID >> 8) & 0xff)
   \   0001EF   78..         MOV     R0,#?V0 + 2
   \   0001F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F4   75....       MOV     ?V0 + 2,#(SerialApp_RspBuf & 0xff)
   \   0001F7   75....       MOV     ?V0 + 3,#((SerialApp_RspBuf >> 8) & 0xff)
   \   0001FA   78..         MOV     R0,#?V0 + 2
   \   0001FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FF   75..04       MOV     ?V0 + 2,#0x4
   \   000202   75..00       MOV     ?V0 + 3,#0x0
   \   000205   78..         MOV     R0,#?V0 + 2
   \   000207   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00020A   75..02       MOV     ?V0 + 2,#0x2
   \   00020D   78..         MOV     R0,#?V0 + 2
   \   00020F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000212   7900         MOV     R1,#0x0
   \   000214   7C..         MOV     R4,#(SerialApp_epDesc & 0xff)
   \   000216   7D..         MOV     R5,#((SerialApp_epDesc >> 8) & 0xff)
   \   000218   7A..         MOV     R2,#(SerialApp_RxAddr & 0xff)
   \   00021A   7B..         MOV     R3,#((SerialApp_RxAddr >> 8) & 0xff)
   \   00021C   12....       LCALL   ??AF_DataRequest?relay
   \   00021F   7409         MOV     A,#0x9
   \   000221   12....       LCALL   ?DEALLOC_XSTACK8
   \   000224   E9           MOV     A,R1
   \   000225   6005         JZ      ??CrossCallReturnLabel_5
   \   000227                ; Setup parameters for call to function osal_set_event
   \   000227   7A02         MOV     R2,#0x2
   \   000229   12....       LCALL   ?Subroutine2 & 0xFFFF
    289              return ( events ^ SERIALAPP_RESP_EVT );
   \                     ??CrossCallReturnLabel_5:
   \   00022C   7402         MOV     A,#0x2
   \   00022E   02....       LJMP    ??SerialApp_ProcessEvent_3 & 0xFFFF
    290            }
    291          
    292            return ( 0 );  // Discard unknown events.
   \                     ??SerialApp_ProcessEvent_18:
   \   000231   7A00         MOV     R2,#0x0
   \   000233   7B00         MOV     R3,#0x0
   \                     ??SerialApp_ProcessEvent_4:
   \   000235   7409         MOV     A,#0x9
   \   000237   12....       LCALL   ?DEALLOC_XSTACK8
   \   00023A   7F08         MOV     R7,#0x8
   \   00023C   02....       LJMP    ?BANKED_LEAVE_XDATA
    293          }
    294          
    295          /*********************************************************************
    296           * @fn      SerialApp_ProcessZDOMsgs()
    297           *
    298           * @brief   Process response messages
    299           *
    300           * @param   none
    301           *
    302           * @return  none
    303           */
    304          static void SerialApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    305          {
    306            switch ( inMsg->clusterID )
    307            {
    308              case End_Device_Bind_rsp:
    309                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    310                {
    311                  // Light LED
    312                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    313                }
    314          #if defined(BLINK_LEDS)
    315                else
    316                {
    317                  // Flash LED to show failure
    318                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
    319                }
    320          #endif
    321                break;
    322                
    323              case Match_Desc_rsp:
    324                {
    325                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    326                  if ( pRsp )
    327                  {
    328                    if ( pRsp->status == ZSuccess && pRsp->cnt )
    329                    {
    330                      SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
    331                      SerialApp_TxAddr.addr.shortAddr = pRsp->nwkAddr;
    332                      // Take the first endpoint, Can be changed to search through endpoints
    333                      SerialApp_TxAddr.endPoint = pRsp->epList[0];
    334                      
    335                      // Light LED
    336                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    337                    }
    338                    osal_mem_free( pRsp );
    339                  }
    340                }
    341                break;
    342            }
    343          }
    344          
    345          /*********************************************************************
    346           * @fn      SerialApp_HandleKeys
    347           *
    348           * @brief   Handles all key events for this device.
    349           *
    350           * @param   shift - true if in shift/alt.
    351           * @param   keys  - bit field for key events.
    352           *
    353           * @return  none
    354           */
    355          void SerialApp_HandleKeys( uint8 shift, uint8 keys )
    356          {
    357            zAddrType_t txAddr;
    358            
    359            if ( shift )
    360            {
    361              if ( keys & HAL_KEY_SW_1 )
    362              {
    363              }
    364              if ( keys & HAL_KEY_SW_2 )
    365              {
    366              }
    367              if ( keys & HAL_KEY_SW_3 )
    368              {
    369              }
    370              if ( keys & HAL_KEY_SW_4 )
    371              {
    372              }
    373            }
    374            else
    375            {
    376              if ( keys & HAL_KEY_SW_1 )
    377              {
    378              }
    379          
    380              if ( keys & HAL_KEY_SW_2 )
    381              {
    382                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    383                
    384                // Initiate an End Device Bind Request for the mandatory endpoint
    385                txAddr.addrMode = Addr16Bit;
    386                txAddr.addr.shortAddr = 0x0000; // Coordinator
    387                ZDP_EndDeviceBindReq( &txAddr, NLME_GetShortAddr(), 
    388                                      SerialApp_epDesc.endPoint,
    389                                      SERIALAPP_PROFID,
    390                                      SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
    391                                      SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
    392                                      FALSE );
    393              }
    394          
    395              if ( keys & HAL_KEY_SW_3 )
    396              {
    397              }
    398          
    399              if ( keys & HAL_KEY_SW_4 )
    400              {
    401                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    402                
    403                // Initiate a Match Description Request (Service Discovery)
    404                txAddr.addrMode = AddrBroadcast;
    405                txAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    406                ZDP_MatchDescReq( &txAddr, NWK_BROADCAST_SHORTADDR,
    407                                  SERIALAPP_PROFID,
    408                                  SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
    409                                  SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
    410                                  FALSE );
    411              }
    412            }
    413          }
    414          
    415          /*********************************************************************
    416           * @fn      SerialApp_ProcessMSGCmd
    417           *
    418           * @brief   Data message processor callback. This function processes
    419           *          any incoming data - probably from other devices. Based
    420           *          on the cluster ID, perform the intended action.
    421           *
    422           * @param   pkt - pointer to the incoming message packet
    423           *
    424           * @return  TRUE if the 'pkt' parameter is being used and will be freed later,
    425           *          FALSE otherwise.
    426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   90....       MOV     DPTR,#SerialApp_TaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_set_event?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    427          void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
   \                     SerialApp_ProcessMSGCmd:
    428          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    429            uint8 stat;
    430            uint8 seqnb;
    431            uint8 delay;
    432          
    433            switch ( pkt->clusterId )
   \   000009   EE           MOV     A,R6
   \   00000A   2421         ADD     A,#0x21
   \   00000C   F8           MOV     R0,A
   \   00000D   EF           MOV     A,R7
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   88..         MOV     ?V0 + 0,R0
   \   000013   89..         MOV     ?V0 + 1,R1
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 2,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 3,A
   \   000024   78..         MOV     R0,#?V0 + 2
   \   000026   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SerialApp_ProcessMSGCmd>_0`:
   \   000029   0100         DW        1
   \   00002B   01           DB        1
   \   00002C   ....         DW        ??SerialApp_ProcessMSGCmd_0
   \   00002E   ....         DW        ??SerialApp_ProcessMSGCmd_1
   \   000030   ....         DW        ??SerialApp_ProcessMSGCmd_2
    434            {
    435            // A message with a serial data block to be transmitted on the serial port.
    436            case SERIALAPP_CLUSTERID1:
    437              // Store the address for sending and retrying.
    438              osal_memcpy(&SerialApp_RxAddr, &(pkt->srcAddr), sizeof( afAddrType_t ));
   \                     ??SerialApp_ProcessMSGCmd_1:
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   EE           MOV     A,R6
   \   000033   2406         ADD     A,#0x6
   \   000035   F5..         MOV     ?V0 + 4,A
   \   000037   EF           MOV     A,R7
   \   000038   3400         ADDC    A,#0x0
   \   00003A   F5..         MOV     ?V0 + 5,A
   \   00003C   75..00       MOV     ?V0 + 6,#0x0
   \   00003F   78..         MOV     R0,#?V0 + 4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000044   7C0C         MOV     R4,#0xc
   \   000046   7D00         MOV     R5,#0x0
   \   000048   7A..         MOV     R2,#(SerialApp_RxAddr & 0xff)
   \   00004A   7B..         MOV     R3,#((SerialApp_RxAddr >> 8) & 0xff)
   \   00004C   12....       LCALL   ??osal_memcpy?relay
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
    439          
    440              seqnb = pkt->cmd.Data[0];
   \   000054   85..82       MOV     DPL,?V0 + 0
   \   000057   85..83       MOV     DPH,?V0 + 1
   \   00005A   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F5..         MOV     ?V0 + 0,A
    441          
    442              // Keep message if not a repeat packet
    443              if ( (seqnb > SerialApp_RxSeq) ||                    // Normal
    444                  ((seqnb < 0x80 ) && ( SerialApp_RxSeq > 0x80)) ) // Wrap-around
   \   000060   90....       MOV     DPTR,#SerialApp_RxSeq
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C3           CLR     C
   \   000065   95..         SUBB    A,?V0 + 0
   \   000067   400D         JC      ??SerialApp_ProcessMSGCmd_3
   \   000069   E5..         MOV     A,?V0 + 0
   \   00006B   C3           CLR     C
   \   00006C   9480         SUBB    A,#-0x80
   \   00006E   503D         JNC     ??SerialApp_ProcessMSGCmd_4
   \   000070   E0           MOVX    A,@DPTR
   \   000071   C3           CLR     C
   \   000072   9481         SUBB    A,#-0x7f
   \   000074   4037         JC      ??SerialApp_ProcessMSGCmd_4
    445              {
    446                // Transmit the data on the serial port.
    447                if ( HalUARTWrite( SERIAL_APP_PORT, pkt->cmd.Data+1, (pkt->cmd.DataLength-1) ) )
   \                     ??SerialApp_ProcessMSGCmd_3:
   \   000076                ; Setup parameters for call to function HalUARTWrite
   \   000076   EE           MOV     A,R6
   \   000077   241F         ADD     A,#0x1f
   \   000079   F582         MOV     DPL,A
   \   00007B   EF           MOV     A,R7
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F583         MOV     DPH,A
   \   000080   E0           MOVX    A,@DPTR
   \   000081   24FF         ADD     A,#-0x1
   \   000083   FC           MOV     R4,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   34FF         ADDC    A,#-0x1
   \   000088   FD           MOV     R5,A
   \   000089   8882         MOV     DPL,R0
   \   00008B   8983         MOV     DPH,R1
   \   00008D   A3           INC     DPTR
   \   00008E   AA82         MOV     R2,DPL
   \   000090   AB83         MOV     R3,DPH
   \   000092   7900         MOV     R1,#0x0
   \   000094   12....       LCALL   ??HalUARTWrite?relay
   \   000097   EA           MOV     A,R2
   \   000098   7001         JNZ     ??SerialApp_ProcessMSGCmd_5
   \   00009A   EB           MOV     A,R3
   \                     ??SerialApp_ProcessMSGCmd_5:
   \   00009B   600A         JZ      ??SerialApp_ProcessMSGCmd_6
    448                {
    449                  // Save for next incoming message
    450                  SerialApp_RxSeq = seqnb;
   \   00009D   E5..         MOV     A,?V0 + 0
   \   00009F   90....       MOV     DPTR,#SerialApp_RxSeq
   \   0000A2   F0           MOVX    @DPTR,A
    451                  stat = OTA_SUCCESS;
   \   0000A3   7A00         MOV     R2,#0x0
   \   0000A5   8008         SJMP    ??SerialApp_ProcessMSGCmd_7
    452                }
    453                else
    454                {
    455                  stat = OTA_SER_BUSY;
   \                     ??SerialApp_ProcessMSGCmd_6:
   \   0000A7   7A02         MOV     R2,#0x2
   \   0000A9   7B10         MOV     R3,#0x10
   \   0000AB   8004         SJMP    ??SerialApp_ProcessMSGCmd_8
    456                }
    457              }
    458              else
    459              {
    460                stat = OTA_DUP_MSG;
   \                     ??SerialApp_ProcessMSGCmd_4:
   \   0000AD   7A01         MOV     R2,#0x1
   \                     ??SerialApp_ProcessMSGCmd_7:
   \   0000AF   7B01         MOV     R3,#0x1
    461              }
    462          
    463              // Select approproiate OTA flow-control delay.
    464              delay = (stat == OTA_SER_BUSY) ? SERIALAPP_NAK_DELAY : SERIALAPP_ACK_DELAY;
    465          
    466              // Build & send OTA response message.
    467              SerialApp_RspBuf[0] = stat;
   \                     ??SerialApp_ProcessMSGCmd_8:
   \   0000B1   EA           MOV     A,R2
   \   0000B2   90....       MOV     DPTR,#SerialApp_RspBuf
   \   0000B5   F0           MOVX    @DPTR,A
    468              SerialApp_RspBuf[1] = seqnb;
   \   0000B6   E5..         MOV     A,?V0 + 0
   \   0000B8   90....       MOV     DPTR,#(SerialApp_RspBuf + 1)
   \   0000BB   F0           MOVX    @DPTR,A
    469              SerialApp_RspBuf[2] = LO_UINT16( delay );
   \   0000BC   EB           MOV     A,R3
   \   0000BD   90....       MOV     DPTR,#(SerialApp_RspBuf + 2)
   \   0000C0   F0           MOVX    @DPTR,A
    470              SerialApp_RspBuf[3] = HI_UINT16( delay );
   \   0000C1   E4           CLR     A
   \   0000C2   90....       MOV     DPTR,#(SerialApp_RspBuf + 3)
   \   0000C5   F0           MOVX    @DPTR,A
    471              osal_set_event( SerialApp_TaskID, SERIALAPP_RESP_EVT );
   \   0000C6                ; Setup parameters for call to function osal_set_event
   \   0000C6   7A02         MOV     R2,#0x2
   \   0000C8   FB           MOV     R3,A
   \   0000C9   12....       LCALL   ??Subroutine3_0 & 0xFFFF
    472              osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_RESP_EVT);
   \                     ??CrossCallReturnLabel_7:
   \   0000CC                ; Setup parameters for call to function osal_stop_timerEx
   \   0000CC   7A02         MOV     R2,#0x2
   \   0000CE   7B00         MOV     R3,#0x0
   \                     ??SerialApp_ProcessMSGCmd_9:
   \   0000D0   90....       MOV     DPTR,#SerialApp_TaskID
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F9           MOV     R1,A
   \   0000D5   12....       LCALL   ??osal_stop_timerEx?relay
   \   0000D8   803D         SJMP    ??SerialApp_ProcessMSGCmd_0
    473              break;
    474          
    475            // A response to a received serial data block.
    476            case SERIALAPP_CLUSTERID2:
    477              if ((pkt->cmd.Data[1] == SerialApp_TxSeq) &&
    478                 ((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
   \                     ??SerialApp_ProcessMSGCmd_2:
   \   0000DA   85..82       MOV     DPL,?V0 + 0
   \   0000DD   8983         MOV     DPH,R1
   \   0000DF   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   FA           MOV     R2,A
   \   0000E5   90....       MOV     DPTR,#SerialApp_TxSeq
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   6A           XRL     A,R2
   \   0000EA   7015         JNZ     ??SerialApp_ProcessMSGCmd_10
   \   0000EC   8882         MOV     DPL,R0
   \   0000EE   8983         MOV     DPH,R1
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   6004         JZ      ??SerialApp_ProcessMSGCmd_11
   \   0000F3   6401         XRL     A,#0x1
   \   0000F5   700A         JNZ     ??SerialApp_ProcessMSGCmd_10
    479              {
    480                SerialApp_TxLen = 0;
   \                     ??SerialApp_ProcessMSGCmd_11:
   \   0000F7   E4           CLR     A
   \   0000F8   90....       MOV     DPTR,#SerialApp_TxLen
   \   0000FB   F0           MOVX    @DPTR,A
    481                osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_EVT);
   \   0000FC                ; Setup parameters for call to function osal_stop_timerEx
   \   0000FC   7A01         MOV     R2,#0x1
   \   0000FE   FB           MOV     R3,A
   \   0000FF   80CF         SJMP    ??SerialApp_ProcessMSGCmd_9
    482              }
    483              else
    484              {
    485                // Re-start timeout according to delay sent from other device.
    486                delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
    487                osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_EVT, delay );
   \                     ??SerialApp_ProcessMSGCmd_10:
   \   000101                ; Setup parameters for call to function osal_start_timerEx
   \   000101   8882         MOV     DPL,R0
   \   000103   8983         MOV     DPH,R1
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   E0           MOVX    A,@DPTR
   \   000108   FC           MOV     R4,A
   \   000109   7D00         MOV     R5,#0x0
   \   00010B   7A01         MOV     R2,#0x1
   \   00010D   7B00         MOV     R3,#0x0
   \   00010F   90....       MOV     DPTR,#SerialApp_TaskID
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F9           MOV     R1,A
   \   000114   12....       LCALL   ??osal_start_timerEx?relay
    488              }
    489              break;
    490          
    491              default:
    492                break;
    493            }
    494          }
   \                     ??SerialApp_ProcessMSGCmd_0:
   \   000117   7F07         MOV     R7,#0x7
   \   000119   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET
    495          
    496          /*********************************************************************
    497           * @fn      SerialApp_Send
    498           *
    499           * @brief   Send data OTA.
    500           *
    501           * @param   none
    502           *
    503           * @return  none
    504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine3_0
   \   000002                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    505          static void SerialApp_Send(void)
   \                     SerialApp_Send:
    506          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    507          #if SERIAL_APP_LOOPBACK
    508            if (SerialApp_TxLen < SERIAL_APP_TX_MAX)
    509            {
    510              SerialApp_TxLen += HalUARTRead(SERIAL_APP_PORT, SerialApp_TxBuf+SerialApp_TxLen+1,
    511                                                              SERIAL_APP_TX_MAX-SerialApp_TxLen);
    512            }
    513          
    514            if (SerialApp_TxLen)
    515            {
    516              (void)SerialApp_TxAddr;
    517              if (HalUARTWrite(SERIAL_APP_PORT, SerialApp_TxBuf+1, SerialApp_TxLen))
    518              {
    519                SerialApp_TxLen = 0;
    520              }
    521              else
    522              {
    523                osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
    524              }
    525            }
    526          #else
    527            if (!SerialApp_TxLen && 
    528                (SerialApp_TxLen = HalUARTRead(SERIAL_APP_PORT, SerialApp_TxBuf+1, SERIAL_APP_TX_MAX)))
   \   000005   90....       MOV     DPTR,#SerialApp_TxLen
   \   000008   E0           MOVX    A,@DPTR
   \   000009   701E         JNZ     ??SerialApp_Send_0
   \   00000B                ; Setup parameters for call to function HalUARTRead
   \   00000B   7C50         MOV     R4,#0x50
   \   00000D   7D00         MOV     R5,#0x0
   \   00000F   7A..         MOV     R2,#((SerialApp_TxBuf + 1) & 0xff)
   \   000011   7B..         MOV     R3,#(((SerialApp_TxBuf + 1) >> 8) & 0xff)
   \   000013   7900         MOV     R1,#0x0
   \   000015   12....       LCALL   ??HalUARTRead?relay
   \   000018   EA           MOV     A,R2
   \   000019   90....       MOV     DPTR,#SerialApp_TxLen
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   6061         JZ      ??CrossCallReturnLabel_6
    529            {
    530              // Pre-pend sequence number to the Tx message.
    531              SerialApp_TxBuf[0] = ++SerialApp_TxSeq;
   \   00001F   90....       MOV     DPTR,#SerialApp_TxSeq
   \   000022   E0           MOVX    A,@DPTR
   \   000023   04           INC     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   90....       MOV     DPTR,#SerialApp_TxBuf
   \   000028   F0           MOVX    @DPTR,A
    532            }
    533          
    534            if (SerialApp_TxLen)
    535            {
    536              if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_TxAddr,
    537                                                     (endPointDesc_t *)&SerialApp_epDesc,
    538                                                      SERIALAPP_CLUSTERID1,
    539                                                      SerialApp_TxLen+1, SerialApp_TxBuf,
    540                                                      &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
   \                     ??SerialApp_Send_0:
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#(SerialApp_MsgID & 0xff)
   \   000034   75....       MOV     ?V0 + 1,#((SerialApp_MsgID >> 8) & 0xff)
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75....       MOV     ?V0 + 0,#(SerialApp_TxBuf & 0xff)
   \   00003F   75....       MOV     ?V0 + 1,#((SerialApp_TxBuf >> 8) & 0xff)
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   90....       MOV     DPTR,#SerialApp_TxLen
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   7401         MOV     A,#0x1
   \   00004E   28           ADD     A,R0
   \   00004F   F5..         MOV     ?V0 + 0,A
   \   000051   E4           CLR     A
   \   000052   3400         ADDC    A,#0x0
   \   000054   F5..         MOV     ?V0 + 1,A
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   75..01       MOV     ?V0 + 0,#0x1
   \   00005E   75..00       MOV     ?V0 + 1,#0x0
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   7900         MOV     R1,#0x0
   \   000068   7C..         MOV     R4,#(SerialApp_epDesc & 0xff)
   \   00006A   7D..         MOV     R5,#((SerialApp_epDesc >> 8) & 0xff)
   \   00006C   7A..         MOV     R2,#(SerialApp_TxAddr & 0xff)
   \   00006E   7B..         MOV     R3,#((SerialApp_TxAddr >> 8) & 0xff)
   \   000070   12....       LCALL   ??AF_DataRequest?relay
   \   000073   7409         MOV     A,#0x9
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   E9           MOV     A,R1
   \   000079   6005         JZ      ??CrossCallReturnLabel_6
    541              {
    542                osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
   \   00007B                ; Setup parameters for call to function osal_set_event
   \   00007B   7A01         MOV     R2,#0x1
   \   00007D   12....       LCALL   ?Subroutine2 & 0xFFFF
    543              }
    544            }
    545          #endif
    546          }
   \                     ??CrossCallReturnLabel_6:
   \   000080   7F02         MOV     R7,#0x2
   \   000082   02....       LJMP    ?BANKED_LEAVE_XDATA
    547          
    548          /*********************************************************************
    549           * @fn      SerialApp_Resp
    550           *
    551           * @brief   Send data OTA.
    552           *
    553           * @param   none
    554           *
    555           * @return  none
    556           */
    557          static void SerialApp_Resp(void)
    558          {
    559            if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
    560                                                   (endPointDesc_t *)&SerialApp_epDesc,
    561                                                    SERIALAPP_CLUSTERID2,
    562                                                    SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
    563                                                   &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
    564            {
    565              osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
    566            }
    567          }
    568          
    569          /*********************************************************************
    570           * @fn      SerialApp_CallBack
    571           *
    572           * @brief   Send data OTA.
    573           *
    574           * @param   port - UART port.
    575           * @param   event - the UART port event flag.
    576           *
    577           * @return  none
    578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          static void SerialApp_CallBack(uint8 port, uint8 event)
   \                     SerialApp_CallBack:
    580          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    581            (void)port;
    582          
    583            if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    584          #if SERIAL_APP_LOOPBACK
    585                (SerialApp_TxLen < SERIAL_APP_TX_MAX))
    586          #else
    587                !SerialApp_TxLen)
   \   000004   7407         MOV     A,#0x7
   \   000006   5A           ANL     A,R2
   \   000007   6009         JZ      ??SerialApp_CallBack_0
   \   000009   90....       MOV     DPTR,#SerialApp_TxLen
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   7003         JNZ     ??SerialApp_CallBack_0
    588          #endif
    589            {
    590              SerialApp_Send();
   \   00000F                ; Setup parameters for call to function SerialApp_Send
   \   00000F   12....       LCALL   ??SerialApp_Send?relay
    591            }
    592          }
   \                     ??SerialApp_CallBack_0:
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_ProcessMSGCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_ProcessMSGCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Send?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_CallBack

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SerialApp">`:
   \   000000   53657269     DB "SerialApp"
   \            616C4170
   \            7000    
    593          
    594          /*********************************************************************
    595          *********************************************************************/

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     SerialApp_CallBack               2      0      0
       -> SerialApp_Send              4      0      0
     SerialApp_Init                   1      0     38
       -> afRegister                  0      0     76
       -> RegisterForKeys             0      0     76
       -> HalUARTOpen                 0      0     76
       -> HalLcdWriteString           0      0     76
       -> ZDO_RegisterForZDOMsg       0      0     76
       -> ZDO_RegisterForZDOMsg       0      0     76
     SerialApp_ProcessEvent           1      0     34
       -> SerialApp_Send              0      0     50
       -> SerialApp_ProcessMSGCmd     0      0     50
       -> osal_msg_deallocate         0      0     50
       -> osal_msg_receive            0      0     50
       -> HalLedSet                   0      0     50
       -> HalLedSet                   0      0     50
       -> ZDO_ParseEPListRsp          0      0     50
       -> HalLedSet                   0      0     50
       -> osal_mem_free               0      0     50
       -> HalLedSet                   0      0     50
       -> NLME_GetShortAddr           0      0     68
       -> ZDP_EndDeviceBindReq        0      0     68
       -> HalLedSet                   0      0     50
       -> ZDP_MatchDescReq            0      0     66
       -> AF_DataRequest              0      0     68
       -> osal_set_event              0      0     50
     SerialApp_ProcessMSGCmd          0      0     43
       -> osal_memcpy                 0      0     36
       -> HalUARTWrite                0      0     30
       -> osal_set_event              0      0     30
       -> osal_stop_timerEx           0      0     30
       -> osal_stop_timerEx           0      0     30
       -> osal_start_timerEx          0      0     30
     SerialApp_Send                   0      0     44
       -> HalUARTRead                 0      0     20
       -> AF_DataRequest              0      0     38
       -> osal_set_event              0      0     20


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     SerialApp_ClusterList              4
     SerialApp_SimpleDesc              12
     SerialApp_epDesc                   6
     SerialApp_TaskID                   1
     SerialApp_MsgID                    1
     SerialApp_TxAddr                  12
     SerialApp_TxSeq                    1
     SerialApp_TxBuf                   81
     SerialApp_TxLen                    1
     SerialApp_RxAddr                  12
     SerialApp_RxSeq                    1
     SerialApp_RspBuf                   4
     SerialApp_Init                   170
     ?Subroutine0                       8
     SerialApp_ProcessEvent           575
     ??Subroutine3_0                    9
     SerialApp_ProcessMSGCmd          284
     ?Subroutine1                      10
     ?Subroutine2                       2
     SerialApp_Send                   133
     SerialApp_CallBack                25
     ??SerialApp_Init?relay             6
     ??SerialApp_ProcessEvent?relay     6
     ??SerialApp_ProcessMSGCmd?relay    6
     ??SerialApp_Send?relay             6
     ??SerialApp_CallBack?relay         6
     ?<Constant "SerialApp">           10

 
 1 216 bytes in segment BANKED_CODE
    30 bytes in segment BANK_RELAYS
    32 bytes in segment XDATA_ROM_C
   114 bytes in segment XDATA_Z
 
 1 246 bytes of CODE  memory
    32 bytes of CONST memory
   114 bytes of XDATA memory

Errors: none
Warnings: none
