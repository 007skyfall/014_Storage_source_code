<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\ZigBee_Prj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\ZigBee_Prj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.02 [Build 28]: Last Updated: Mon Sep 22 15:39:04 2014
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; alarm_and_display &rArr; Collect_Data &rArr; Read_Temperature_Humidity &rArr; Read_Temp_Hum &rArr; GPIOSetInterrupt
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[16]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[18]">BOD_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[b]">CAN_IRQHandler</a> from can.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[19]">FMC_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[d]">I2C_IRQHandler</a> from i2c.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1d]">PIOINT0_IRQHandler</a> from lpc11c14_it.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1c]">PIOINT1_IRQHandler</a> from lpc11c14_it.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1b]">PIOINT2_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1a]">PIOINT3_IRQHandler</a> from lpc11c14_it.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[12]">SSP0_IRQHandler</a> from ssp.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[c]">SSP1_IRQHandler</a> from ssp.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[e]">TIMER16_0_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[f]">TIMER16_1_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[10]">TIMER32_0_IRQHandler</a> from timer32.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[11]">TIMER32_1_IRQHandler</a> from timer32.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[13]">UART_IRQHandler</a> from uart.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[15]">USB_FIQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[14]">USB_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[a]">WAKEUP_IRQHandler</a> from startup_lpc11xx.o(.text) referenced 13 times from startup_lpc11xx.o(RESET)
 <LI><a href="#[17]">WDT_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc11xx.o(.text)
 <LI><a href="#[21]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[23]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[22]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[20]">fputc</a> from retarget.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[1e]">main</a> from main.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[24]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[eb]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[fa]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PIOINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER16_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER16_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>USB_FIQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Main_PLL_Setup</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, system_lpc11xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, system_lpc11xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_PLL_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[fb]"></a>WDT_CLK_Setup</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, clkconfig.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>CLKOUT_Setup</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, clkconfig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[28]"></a>PutCh</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[20]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[2a]"></a>GetCh</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[29]"></a>fgetc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCh
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCh
</UL>

<P><STRONG><a name="[2b]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCh
</UL>

<P><STRONG><a name="[fc]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>GetCh_NoIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>delay_ms</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tools.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;three_handshake
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_answer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Operate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis3_Test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Test
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Hum_Test
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Hum
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_onoff
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Read
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init
</UL>

<P><STRONG><a name="[ff]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2c]"></a>GPIOInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[84]"></a>GPIOSetInterrupt</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOSetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Hum
</UL>

<P><STRONG><a name="[85]"></a>GPIOIntEnable</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_command
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Hum
</UL>

<P><STRONG><a name="[d2]"></a>GPIOIntDisable</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT1_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>GPIOIntStatus</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT1_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT0_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>GPIOIntClear</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT1_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT0_IRQHandler
</UL>

<P><STRONG><a name="[36]"></a>GPIOSetValue</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_OnOffsw
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_OnOff
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_command
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_RegWrite
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_RegRead
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Operate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Hum_Test
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Hum
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg7Led_Put
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg7Led_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IOConfig
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_IOConfig
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_onoff
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Read
</UL>

<P><STRONG><a name="[4e]"></a>GPIOGetValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Read
</UL>

<P><STRONG><a name="[35]"></a>GPIOSetDir</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_OnOffsw
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_OnOff
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_command
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Hum
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg7Led_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IOConfig
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_IOConfig
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_onoff
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init
</UL>

<P><STRONG><a name="[13]"></a>UART_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UARTInit</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UARTInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[101]"></a>UARTSend</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>UART0_PutChar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_PutString
</UL>

<P><STRONG><a name="[30]"></a>UART0_PutString</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_printf
</UL>

<P><STRONG><a name="[32]"></a>UART0_printf</STRONG> (Thumb, 40 bytes, Stack size 128 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_PutString
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[b3]"></a>UART0_GetChar</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
</UL>

<P><STRONG><a name="[34]"></a>delay32Ms</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, timer32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[10]"></a>TIMER32_0_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, timer32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMER32_0_IRQHandler &rArr; GPIOSetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER32_1_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, timer32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>enable_timer32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_op
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_command
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
</UL>

<P><STRONG><a name="[3b]"></a>disable_timer32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_op
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_command
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32PWM
</UL>

<P><STRONG><a name="[102]"></a>reset_timer32</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer32.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>init_timer32</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, timer32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[39]"></a>init_timer32_a1</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timer32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[3a]"></a>init_timer32PWM</STRONG> (Thumb, 436 bytes, Stack size 12 bytes, timer32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_timer32PWM
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer32
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_op
</UL>

<P><STRONG><a name="[103]"></a>setMatch_timer32PWM</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, timer32.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>SSP0_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ssp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SSP1_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ssp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SSP_IOConfig</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>

<P><STRONG><a name="[3d]"></a>SPI_IOConfig</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_IOConfig &rArr; GPIOSetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
</UL>

<P><STRONG><a name="[3e]"></a>SSP_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[40]"></a>SPI_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Operate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Read
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init
</UL>

<P><STRONG><a name="[104]"></a>SSP_Send</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ssp.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>SSP_Receive</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, ssp.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>SPI_PutGet</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_RegWrite
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_RegRead
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Operate
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Read
</UL>

<P><STRONG><a name="[d]"></a>I2C_IRQHandler</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IRQHandler &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2CStart</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CEngine
</UL>

<P><STRONG><a name="[44]"></a>I2CStop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CEngine
</UL>

<P><STRONG><a name="[97]"></a>I2CInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2CInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis3_Test
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Test
</UL>

<P><STRONG><a name="[42]"></a>I2CEngine</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStop
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStart
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CRead
</UL>

<P><STRONG><a name="[45]"></a>I2CRead</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2CRead &rArr; I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CEngine
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModeControl
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_read
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlReg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCommandReg
</UL>

<P><STRONG><a name="[46]"></a>I2CWrite</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2CWrite &rArr; I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CEngine
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setModeControl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModeControl
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_shutdown
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_clearIrqStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setIrqInCycles
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setLoThreshold
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setHiThreshold
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setRange
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setWidth
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setMode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_enable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlReg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCommandReg
</UL>

<P><STRONG><a name="[47]"></a>CAN_MessageProcess</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_MessageProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[b]"></a>CAN_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_IRQHandler &rArr; CAN_MessageProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessageProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN_ConfigureMessages</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[48]"></a>CAN_Init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfigureMessages
</UL>

<P><STRONG><a name="[106]"></a>CAN_Send</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>ADCInit_NXP</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[4b]"></a>ADCInit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADCInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[d5]"></a>ADCRead</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADCRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
</UL>

<P><STRONG><a name="[107]"></a>ADCBurstRead</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>KEY_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KEY_Init &rArr; GPIOSetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[4d]"></a>KEY_Read</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOGetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis3_Test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Test
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Hum_Test
</UL>

<P><STRONG><a name="[4f]"></a>Seg7Led_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, seg7led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Seg7Led_Init &rArr; GPIOSetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[50]"></a>Seg7Led_Put</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, seg7led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Seg7Led_Put &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_command
</UL>

<P><STRONG><a name="[52]"></a>uDelay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fade_Out
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fade_In
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scroll
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ball
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[51]"></a>Delay</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Test
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Continuous_Scroll
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Scroll
</UL>

<P><STRONG><a name="[53]"></a>Write_Command</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PutGet
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deactivate_Scroll
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Continuous_Scroll
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Scroll
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scroll
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ball
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_NOP
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_VCOMH
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Common_Config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Precharge_Period
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_Clock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_Offset
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Common_Remap
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Page
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_On_Off
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Multiplex_Ratio
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Inverse_Display
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Entire_Display
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Segment_Remap
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Charge_Pump
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Contrast_Control
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Line
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Page_Address
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Addressing_Mode
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Column
</UL>

<P><STRONG><a name="[55]"></a>Write_Data</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Write_Data &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PutGet
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisChar
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pattern
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font57
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkerboard
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Block
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Full_RAM
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
</UL>

<P><STRONG><a name="[56]"></a>Set_Start_Column</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_Start_Column &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisChar
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pattern
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font57
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkerboard
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Block
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Full_RAM
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
</UL>

<P><STRONG><a name="[57]"></a>Set_Addressing_Mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Addressing_Mode &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
</UL>

<P><STRONG><a name="[58]"></a>Set_Column_Address</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>

<P><STRONG><a name="[59]"></a>Set_Page_Address</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>

<P><STRONG><a name="[5a]"></a>Set_Start_Line</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Start_Line &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scroll
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ball
</UL>

<P><STRONG><a name="[5b]"></a>Set_Contrast_Control</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Contrast_Control &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fade_Out
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fade_In
</UL>

<P><STRONG><a name="[5c]"></a>Set_Charge_Pump</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Charge_Pump &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
</UL>

<P><STRONG><a name="[5d]"></a>Set_Segment_Remap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Segment_Remap &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
</UL>

<P><STRONG><a name="[5e]"></a>Set_Entire_Display</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Entire_Display &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[5f]"></a>Set_Inverse_Display</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Inverse_Display &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
</UL>

<P><STRONG><a name="[60]"></a>Set_Multiplex_Ratio</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Multiplex_Ratio &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
</UL>

<P><STRONG><a name="[61]"></a>Set_Display_On_Off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Display_On_Off &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fade_Out
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fade_In
</UL>

<P><STRONG><a name="[62]"></a>Set_Start_Page</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Start_Page &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisChar
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pattern
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font57
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkerboard
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Block
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Full_RAM
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
</UL>

<P><STRONG><a name="[63]"></a>Set_Common_Remap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Common_Remap &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
</UL>

<P><STRONG><a name="[64]"></a>Set_Display_Offset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Display_Offset &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
</UL>

<P><STRONG><a name="[65]"></a>Set_Display_Clock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Display_Clock &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
</UL>

<P><STRONG><a name="[66]"></a>Set_Precharge_Period</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Precharge_Period &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
</UL>

<P><STRONG><a name="[67]"></a>Set_Common_Config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Common_Config &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
</UL>

<P><STRONG><a name="[68]"></a>Set_VCOMH</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_VCOMH &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
</UL>

<P><STRONG><a name="[69]"></a>Set_NOP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>

<P><STRONG><a name="[6a]"></a>Fill_RAM</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Fill_RAM &rArr; Set_Start_Column &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Page
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Column
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Test
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_E
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
</UL>

<P><STRONG><a name="[6b]"></a>Full_RAM</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Page
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Column
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
</UL>

<P><STRONG><a name="[6c]"></a>ball</STRONG> (Thumb, 482 bytes, Stack size 8 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Line
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDelay
</UL>

<P><STRONG><a name="[6d]"></a>show</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = show &rArr; Set_Start_Column &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Page
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Column
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo
</UL>

<P><STRONG><a name="[6e]"></a>OLED_ClearScreen</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_ClearScreen &rArr; Fill_RAM &rArr; Set_Start_Column &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;three_handshake
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Menu
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis3_Test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Test
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Hum_Test
</UL>

<P><STRONG><a name="[6f]"></a>Fill_Block</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Page
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Column
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
</UL>

<P><STRONG><a name="[70]"></a>Checkerboard</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Page
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Column
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Test
</UL>

<P><STRONG><a name="[71]"></a>Frame</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Page
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Column
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Test
</UL>

<P><STRONG><a name="[72]"></a>Show_Font57</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Page
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Column
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
</UL>

<P><STRONG><a name="[73]"></a>Show_String</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font57
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Test
</UL>

<P><STRONG><a name="[74]"></a>Show_Pattern</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Page
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Column
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Test
</UL>

<P><STRONG><a name="[75]"></a>OLED_DisChar</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OLED_DisChar &rArr; Set_Start_Column &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Page
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Column
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Menu
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisStrLine
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Display
</UL>

<P><STRONG><a name="[76]"></a>OLED_DisStrLine</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OLED_DisStrLine &rArr; OLED_DisChar &rArr; Set_Start_Column &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisChar
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_command
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;three_handshake
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Menu
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis3_Test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Test
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Hum_Test
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Display
</UL>

<P><STRONG><a name="[77]"></a>Vertical_Scroll</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Line
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Test
</UL>

<P><STRONG><a name="[78]"></a>Horizontal_Scroll</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[79]"></a>Continuous_Scroll</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Test
</UL>

<P><STRONG><a name="[7a]"></a>Deactivate_Scroll</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Test
</UL>

<P><STRONG><a name="[7b]"></a>Fade_In</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_On_Off
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Contrast_Control
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Test
</UL>

<P><STRONG><a name="[7c]"></a>Fade_Out</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_On_Off
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Contrast_Control
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Test
</UL>

<P><STRONG><a name="[7d]"></a>Sleep</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_On_Off
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Entire_Display
</UL>

<P><STRONG><a name="[7e]"></a>Test</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_On_Off
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Entire_Display
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[7f]"></a>OLED_Init_E</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_VCOMH
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Common_Config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Precharge_Period
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_Clock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_Offset
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Common_Remap
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_On_Off
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Multiplex_Ratio
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Inverse_Display
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Entire_Display
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Segment_Remap
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Charge_Pump
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Contrast_Control
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Line
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Addressing_Mode
</UL>

<P><STRONG><a name="[80]"></a>OLED_Init_I</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, oled2864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_Init_I &rArr; Fill_RAM &rArr; Set_Start_Column &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_VCOMH
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Common_Config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Precharge_Period
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_Clock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_Offset
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Common_Remap
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Display_On_Off
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Multiplex_Ratio
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Inverse_Display
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Entire_Display
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Segment_Remap
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Charge_Pump
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Contrast_Control
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Start_Line
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Addressing_Mode
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[81]"></a>OLED_Test</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, oled2864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fade_Out
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fade_In
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deactivate_Scroll
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Continuous_Scroll
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scroll
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pattern
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkerboard
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[82]"></a>Read_Temp_Hum</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, temp_hum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Read_Temp_Hum &rArr; GPIOSetInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Hum_Test
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temperature_Humidity
</UL>

<P><STRONG><a name="[86]"></a>Temp_Hum_Test</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, temp_hum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Hum
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisStrLine
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Read
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[98]"></a>light_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, light.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Test
</UL>

<P><STRONG><a name="[8b]"></a>light_enable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = light_enable &rArr; I2CWrite &rArr; I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Test
</UL>

<P><STRONG><a name="[8c]"></a>light_read</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = light_read &rArr; I2CWrite &rArr; I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CRead
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Test
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Light
</UL>

<P><STRONG><a name="[8d]"></a>light_setMode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, light.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCommandReg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
</UL>

<P><STRONG><a name="[8e]"></a>light_setWidth</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, light.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCommandReg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
</UL>

<P><STRONG><a name="[8f]"></a>light_setRange</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = light_setRange &rArr; readControlReg &rArr; I2CWrite &rArr; I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlReg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Test
</UL>

<P><STRONG><a name="[90]"></a>light_setHiThreshold</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, light.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[91]"></a>light_setLoThreshold</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, light.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[92]"></a>light_setIrqInCycles</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, light.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlReg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
</UL>

<P><STRONG><a name="[93]"></a>light_getIrqStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, light.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlReg
</UL>

<P><STRONG><a name="[94]"></a>light_clearIrqStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, light.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlReg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
</UL>

<P><STRONG><a name="[95]"></a>light_shutdown</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, light.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCommandReg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
</UL>

<P><STRONG><a name="[96]"></a>Light_Test</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, light.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setRange
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisStrLine
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Read
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9c]"></a>acc_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, acc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = acc_init &rArr; setModeControl &rArr; I2CWrite &rArr; I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setModeControl
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis3_Test
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_get
</UL>

<P><STRONG><a name="[9d]"></a>acc_read</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, acc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = acc_read &rArr; getStatus &rArr; I2CWrite &rArr; I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis3_Test
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_get
</UL>

<P><STRONG><a name="[9e]"></a>acc_get</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, acc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = acc_get &rArr; acc_read &rArr; getStatus &rArr; I2CWrite &rArr; I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
</UL>

<P><STRONG><a name="[9f]"></a>acc_setRange</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, acc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setModeControl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModeControl
</UL>

<P><STRONG><a name="[a0]"></a>acc_setMode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, acc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setModeControl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModeControl
</UL>

<P><STRONG><a name="[a1]"></a>Axis3_Test</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, acc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisStrLine
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Read
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a3]"></a>RFID_CheckSum</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rfid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFID_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Operate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Read
</UL>

<P><STRONG><a name="[a2]"></a>RFID_Operate</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, rfid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_CheckSum
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PutGet
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>

<P><STRONG><a name="[a4]"></a>SPI752_RegRead</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI752_RegRead &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PutGet
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_PutChar
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_IRQ_Process
</UL>

<P><STRONG><a name="[a5]"></a>ZigBee_IRQ_Process</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, spi_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ZigBee_IRQ_Process &rArr; SPI752_RegRead &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT3_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>SPI752_RegWrite</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI752_RegWrite &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PutGet
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_PutChar
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_Init
</UL>

<P><STRONG><a name="[a7]"></a>SPI752_Init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, spi_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI752_Init &rArr; SPI752_RegWrite &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_RegWrite
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_RegRead
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetInterrupt
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
</UL>

<P><STRONG><a name="[a8]"></a>SPI752_PutChar</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spi_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI752_PutChar &rArr; SPI752_RegWrite &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_RegWrite
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_PutString
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_PutChar
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_PutString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_PutChar
</UL>

<P><STRONG><a name="[a9]"></a>RS485_PutChar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
</UL>

<P><STRONG><a name="[aa]"></a>RS485_PutString</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
</UL>

<P><STRONG><a name="[ab]"></a>ZigBee_PutChar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ZigBee_PutChar &rArr; SPI752_PutChar &rArr; SPI752_RegWrite &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
</UL>

<P><STRONG><a name="[ac]"></a>ZigBee_PutString</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
</UL>

<P><STRONG><a name="[ae]"></a>SPI752_GetChar</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, spi_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_GetChar
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_GetChar
</UL>

<P><STRONG><a name="[ad]"></a>RS485_GetChar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
</UL>

<P><STRONG><a name="[af]"></a>ZigBee_GetChar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ZigBee_GetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_command
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;three_handshake
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
</UL>

<P><STRONG><a name="[b0]"></a>ZigBee_Test</STRONG> (Thumb, 660 bytes, Stack size 296 bytes, spi_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Menu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_GetChar
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_PutString
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_PutChar
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisChar
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Read
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IOConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetChar
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_PutChar
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b4]"></a>RS485_Test</STRONG> (Thumb, 370 bytes, Stack size 272 bytes, spi_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Menu
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_GetChar
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_PutString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_PutChar
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisStrLine
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisChar
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Read
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IOConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetChar
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_PutChar
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b5]"></a>beep</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = beep &rArr; speaker_op &rArr; init_timer32PWM
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_op
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_answer
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysTick_Handler &rArr; speaker_op &rArr; init_timer32PWM
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_op
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>Rfid_answer</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Rfid_answer &rArr; send_data &rArr; ZigBee_PutChar &rArr; SPI752_PutChar &rArr; SPI752_RegWrite &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Operation
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>fill_message</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;three_handshake
</UL>

<P><STRONG><a name="[c0]"></a>sure</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo
</UL>

<P><STRONG><a name="[bc]"></a>Logo</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Logo &rArr; show &rArr; Set_Start_Column &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sure
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>three_handshake</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = three_handshake &rArr; OLED_DisStrLine &rArr; OLED_DisChar &rArr; Set_Start_Column &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_message
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_GetChar
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisStrLine
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>alarm_and_display</STRONG> (Thumb, 1148 bytes, Stack size 200 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = alarm_and_display &rArr; Collect_Data &rArr; Read_Temperature_Humidity &rArr; Read_Temp_Hum &rArr; GPIOSetInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_OnOffsw
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_OnOff
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisStrLine
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer32
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer32
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>receive_command</STRONG> (Thumb, 914 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = receive_command &rArr; OLED_DisStrLine &rArr; OLED_DisChar &rArr; Set_Start_Column &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_OnOffsw
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_GetChar
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisStrLine
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg7Led_Put
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer32
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer32
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; alarm_and_display &rArr; Collect_Data &rArr; Read_Temperature_Humidity &rArr; Read_Temp_Hum &rArr; GPIOSetInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_command
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;three_handshake
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_answer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[b2]"></a>Dis_Menu</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisStrLine
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisChar
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
</UL>

<P><STRONG><a name="[1d]"></a>PIOINT0_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lpc11c14_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIOINT0_IRQHandler &rArr; GPIOIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PIOINT1_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lpc11c14_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIOINT1_IRQHandler &rArr; GPIOIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PIOINT3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lpc11c14_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PIOINT3_IRQHandler &rArr; ZigBee_IRQ_Process &rArr; SPI752_RegRead &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_IRQ_Process
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>speaker_op</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, speaker_op.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = speaker_op &rArr; init_timer32PWM
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32PWM
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer32
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer32
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
</UL>

<P><STRONG><a name="[d3]"></a>Read_Temperature_Humidity</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, read_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read_Temperature_Humidity &rArr; Read_Temp_Hum &rArr; GPIOSetInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Hum
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
</UL>

<P><STRONG><a name="[d4]"></a>Read_Light</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, read_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Read_Light &rArr; light_read &rArr; I2CWrite &rArr; I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
</UL>

<P><STRONG><a name="[c5]"></a>Collect_Data</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, read_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Collect_Data &rArr; Read_Temperature_Humidity &rArr; Read_Temp_Hum &rArr; GPIOSetInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCRead
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Light
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temperature_Humidity
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
</UL>

<P><STRONG><a name="[bb]"></a>send_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, send_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = send_data &rArr; ZigBee_PutChar &rArr; SPI752_PutChar &rArr; SPI752_RegWrite &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;three_handshake
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_answer
</UL>

<P><STRONG><a name="[cf]"></a>init</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = init &rArr; OLED_Init_I &rArr; Fill_RAM &rArr; Set_Start_Column &rArr; Write_Command &rArr; GPIOSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setRange
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_I
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg7Led_Put
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg7Led_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IOConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetInterrupt
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKOUT_Setup
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>Rfid_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, myrfid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Rfid_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Operation
</UL>

<P><STRONG><a name="[da]"></a>Rfid_Read</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, myrfid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Rfid_Read &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_CheckSum
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PutGet
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Operation
</UL>

<P><STRONG><a name="[b9]"></a>Rfid_Operation</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, myrfid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Rfid_Operation &rArr; Rfid_Read &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Read
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_answer
</UL>

<P><STRONG><a name="[db]"></a>delay</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, myrfid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_OnOff
</UL>

<P><STRONG><a name="[c4]"></a>Speaker_OnOff</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, myrfid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Speaker_OnOff &rArr; GPIOSetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
</UL>

<P><STRONG><a name="[c8]"></a>Speaker_OnOffsw</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, myrfid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Speaker_OnOffsw &rArr; GPIOSetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_command
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
</UL>

<P><STRONG><a name="[dc]"></a>fan_onoff</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, myrfid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>

<P><STRONG><a name="[dd]"></a>Rfid_Display</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, myrfid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisStrLine
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisChar
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI752_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setLoThreshold
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setHiThreshold
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_read
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit_NXP
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Ms
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Menu
</UL>

<P><STRONG><a name="[be]"></a>rand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo
</UL>

<P><STRONG><a name="[bd]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_answer
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c6]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_dadd</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[10e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[10f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[110]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e4]"></a>_double_epilogue</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[111]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[114]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[88]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_answer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Test
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis3_Test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Test
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Hum_Test
</UL>

<P><STRONG><a name="[ee]"></a>__0snprintf$8</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[115]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[87]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_command
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis3_Test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Test
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Hum_Test
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Display
</UL>

<P><STRONG><a name="[ef]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[116]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[ba]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_and_display
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_answer
</UL>

<P><STRONG><a name="[f0]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[117]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[118]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[33]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_printf
</UL>

<P><STRONG><a name="[119]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[e9]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[41]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, i2c.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[11b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[38]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32_a1
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32
</UL>

<P><STRONG><a name="[3f]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>

<P><STRONG><a name="[89]"></a>readCommandReg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, light.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_shutdown
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setWidth
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setMode
</UL>

<P><STRONG><a name="[8a]"></a>readControlReg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = readControlReg &rArr; I2CWrite &rArr; I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_clearIrqStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_getIrqStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setIrqInCycles
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_setRange
</UL>

<P><STRONG><a name="[99]"></a>getStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, acc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = getStatus &rArr; I2CWrite &rArr; I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_read
</UL>

<P><STRONG><a name="[9a]"></a>getModeControl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, acc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_setMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_setRange
</UL>

<P><STRONG><a name="[9b]"></a>setModeControl</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, acc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = setModeControl &rArr; I2CWrite &rArr; I2CEngine
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_setMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_setRange
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_init
</UL>

<P><STRONG><a name="[d8]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[ed]"></a>_printf_core</STRONG> (Thumb, 1072 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[f5]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f4]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL>
<P><STRONG><a name="[22]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[f2]"></a>_fp_digits</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f1]"></a>_printf_core</STRONG> (Thumb, 1766 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[f7]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
