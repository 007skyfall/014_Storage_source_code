

#ifndef __OV3640_H__
#define __OV3640_H__

/* modify by leesheen */
#define NEW_CAM_DRV

struct ov3640_reg {
	unsigned char addr;
	unsigned char val;
};

struct ov3640_regset_type {
	unsigned char *regset;
	int len;
};

/*
 * Macro
 */
#define REGSET_LENGTH(x)	(sizeof(x)/sizeof(ov3640_reg))

/*
 * User defined commands
 */
/* S/W defined features for tune */
#define REG_DELAY	0x0000	/* in ms */
#define REG_CMD		0xFFFF	/* Followed by command */
#define REG_ID		0x8899	/* Followed by command */


/* Following order should not be changed */
enum image_size_ov3640 {
	/* This SoC supports upto UXGA (1600*1200) */
	QQVGA,	/* 160*120 */
	QCIF,	/* 176*144 */
	QVGA,	/* 320*240 */
	CIF,	/* 352*288 */
	VGA,	/* 640*480 */
	SVGA,	/* 800*600 */
	HD720P,	/* 1280*720 */
	SXGA,	/* 1280*1024 */
	UXGA,	/* 1600*1200 */
};

/*
 * Following values describe controls of camera
 * in user aspect and must be match with index of ov3640_regset[]
 * These values indicates each controls and should be used
 * to control each control
 */
enum ov3640_control {
	OV3640_INIT,
	OV3640_EV,
	OV3640_AWB,
	OV3640_MWB,
	OV3640_EFFECT,
	OV3640_CONTRAST,
	OV3640_SATURATION,
	OV3640_SHARPNESS,
};

#define OV3640_REGSET(x)	{	\
	.regset = x,			\
	.len = sizeof(x)/sizeof(ov3640_reg),}


/*
 * User tuned register setting values
 */
 /*need to mod, from 2655*/

 /*预览正常，有绿色噪点*/
#if 1
static unsigned short ov3640_init_reg[][2] = {
		
	{0x3012, 0x80}, {0x304d, 0x45}, {0x30a7, 0x5e},/*reset*/     
	{0x3087, 0x16}, {0x309c, 0x1a}, {0x30a2, 0xe4},
	{0x30aa, 0x42}, {0x30b0, 0xff}, {0x30b1, 0xff},
	{0x30b2, 0x10}, {0x300e, 0x32}, {0x300f, 0x21},
	{0x3010, 0x20}, {0x3011, 0x01}, {0x304c, 0x81},
	{0x30d7, 0x10}, {0x30d9, 0x0d}, {0x30db, 0x08},
	{0x3016, 0x82}, {0x3018, 0x38}, {0x3019, 0x30},
	{0x301a, 0x61}, {0x307d, 0x00}, {0x3087, 0x02},
	{0x3082, 0x20}, {0x3015, 0x12}, {0x3014, 0x04},
	{0x3013, 0xf7}, {0x303c, 0x08}, {0x303d, 0x18},
	{0x303e, 0x06}, {0x303f, 0x0c}, {0x3030, 0x62},
	{0x3031, 0x26}, {0x3032, 0xe6}, {0x3033, 0x6e},
	{0x3034, 0xea}, {0x3035, 0xae}, {0x3036, 0xa6},
	{0x3037, 0x6a}, {0x3104, 0x02}, {0x3105, 0xfd},
	{0x3106, 0x00}, {0x3107, 0xff}, {0x3300, 0x12},
	{0x3301, 0xde}, {0x3302, 0xcf}, {0x3312, 0x26},
	{0x3314, 0x42}, {0x3313, 0x2b}, {0x3315, 0x42},
	{0x3310, 0xd0}, {0x3311, 0xbd}, {0x330c, 0x18},
	{0x330d, 0x18}, {0x330e, 0x56}, {0x330f, 0x5c},
	{0x330b, 0x1c}, {0x3306, 0x5c}, {0x3307, 0x11},
	{0x336a, 0x52}, {0x3370, 0x46}, {0x3376, 0x38},
	{0x30b8, 0x20}, {0x30b9, 0x17}, {0x30ba, 0x04},
	{0x30bb, 0x08}, {0x3507, 0x06}, {0x350a, 0x4f},
	{0x3100, 0x02}, {0x3301, 0xde}, {0x3304, 0x00},
	{0x3400, 0x10}, {0x3404, 0x40}, {0x3600, 0xc4},
	{0x3302, 0xef}, {0x3020, 0x01}, {0x3021, 0x1d},
	{0x3022, 0x00}, {0x3023, 0x0a}, {0x3024, 0x08},
	{0x3025, 0x00}, {0x3026, 0x06}, {0x3027, 0x00},
	{0x335f, 0x68}, {0x3360, 0x00}, {0x3361, 0x00},
	{0x3362, 0x12}, {0x3363, 0x80}, {0x3364, 0xe0},
	{0x3403, 0x00}, {0x3088, 0x02}, {0x3089, 0x80},
	{0x308a, 0x01}, {0x308b, 0xe0}, {0x307c, 0x10},
	{0x3090, 0xc0}, {0x304c, 0x84}, {0x308d, 0x04},
	{0x3086, 0x03}, {0x3086, 0x00}, {0x3011, 0x00},

};
#else  /*预览有点变形，无噪点，色彩正常*/
static unsigned short ov3640_init_reg[][2] = {
      {0x3012, 0x80}, {0x304d, 0x45}, {0x30a7, 0x5e},
      {0x3087, 0x16}, {0x309c, 0x1a}, {0x30a2, 0xe4},
      {0x30aa, 0x42}, {0x30a9, 0xb5}, {0x30b0, 0xff},
      {0x30b1, 0xff}, {0x30b2, 0x18}, {0x300e, 0x32},
      {0x300f, 0x21}, {0x3010, 0x20}, {0x3011, 0x04},
      {0x304c, 0x81}, {0x30d7, 0x10}, {0x30d9, 0x0d},
      {0x30db, 0x08}, {0x3016, 0x82}, {0x3018, 0x38},
      {0x3019, 0x30}, {0x301a, 0x61}, {0x307d, 0x00},
      {0x3087, 0x02}, {0x3082, 0x20}, {0x3015, 0x12},
      {0x3014, 0x84}, {0x3016, 0x92}, {0x3013, 0xf7},
      {0x303c, 0x08}, {0x303d, 0x18}, {0x303e, 0x06},
      {0x303f, 0x0c}, {0x3030, 0x62}, {0x3031, 0x26},
      {0x3032, 0xe6}, {0x3033, 0x6e}, {0x3034, 0xea},
      {0x3035, 0xae}, {0x3036, 0xa6}, {0x3037, 0x6a},
      {0x3104, 0x02}, {0x3105, 0xfd}, {0x3106, 0x00},
      {0x3107, 0xff}, {0x3301, 0xde}, {0x3302, 0xef},
      {0x3312, 0x26}, {0x3314, 0x42}, {0x3313, 0x2b},
      {0x3315, 0x42}, {0x3310, 0xd0}, {0x3311, 0xbd},
      {0x330c, 0x18}, {0x330d, 0x18}, {0x330e, 0x56},
      {0x330f, 0x5c}, {0x330b, 0x1c}, {0x3306, 0x5c},
      {0x3307, 0x11}, {0x336a, 0x52}, {0x3370, 0x46},
      {0x3376, 0x38}, {0x3300, 0x13}, {0x30b8, 0x20},
      {0x30b9, 0x17}, {0x30ba, 0x02}, {0x30bb, 0x08},
      {0x3507, 0x06}, {0x350a, 0x4f}, {0x3100, 0x02},
      {0x3301, 0xde}, {0x3304, 0x00}, {0x3400, 0x00},
      {0x3404, 0x02}, {0x335f, 0x68}, {0x3360, 0x18},
      {0x3361, 0x0c}, {0x3362, 0x12}, {0x3363, 0x88},
      {0x3364, 0xe4}, {0x3403, 0x42}, {0x3088, 0x02},
      {0x3089, 0x80}, {0x308a, 0x01}, {0x308b, 0xe0},
      {0x30d7, 0x10}, {0x3302, 0xef}, {0x335f, 0x68},
      {0x3360, 0x18}, {0x3361, 0x0c}, {0x3362, 0x12},
      {0x3363, 0x88}, {0x3364, 0xe4}, {0x3403, 0x42},
      {0x3088, 0x12}, {0x3089, 0x80}, {0x308a, 0x01},
      {0x308b, 0xe0}, {0x304c, 0x84}, {0x332a, 0x18},
      {0x331b, 0x04}, {0x331c, 0x13}, {0x331d, 0x2b},
      {0x331e, 0x53}, {0x331f, 0x66}, {0x3320, 0x73},
      {0x3321, 0x80}, {0x3322, 0x8c}, {0x3323, 0x95},
      {0x3324, 0x9d}, {0x3325, 0xac}, {0x3326, 0xb8},
      {0x3327, 0xcc}, {0x3328, 0xdd}, {0x3329, 0xee},
      {0x3300, 0x13}, {0x3367, 0x23}, {0x3368, 0xb5},
      {0x3369, 0xc8}, {0x336A, 0x46}, {0x336B, 0x07},
      {0x336C, 0x00}, {0x336D, 0x23}, {0x336E, 0xbb},
      {0x336F, 0xcc}, {0x3370, 0x49}, {0x3371, 0x07},
      {0x3372, 0x00}, {0x3373, 0x23}, {0x3374, 0xab},
      {0x3375, 0xcc}, {0x3376, 0x46}, {0x3377, 0x07},
      {0x3378, 0x00}, {0x332a, 0x1d}, {0x331b, 0x08},
      {0x331c, 0x16}, {0x331d, 0x2d}, {0x331e, 0x54},
      {0x331f, 0x66}, {0x3320, 0x73}, {0x3321, 0x80},
      {0x3322, 0x8c}, {0x3323, 0x95}, {0x3324, 0x9d},
      {0x3325, 0xac}, {0x3326, 0xb8}, {0x3327, 0xcc},
      {0x3328, 0xdd}, {0x3329, 0xee}, {0x3317, 0x04},
      {0x3316, 0xf8}, {0x3312, 0x31}, {0x3314, 0x57},
      {0x3313, 0x28}, {0x3315, 0x3d}, {0x3311, 0xd0},
      {0x3310, 0xb6}, {0x330c, 0x16}, {0x330d, 0x16},
      {0x330e, 0x5F}, {0x330f, 0x5C}, {0x330b, 0x18},
      {0x3306, 0x5c}, {0x3307, 0x11}, {0x3308, 0x25},
      {0x3318, 0x62}, {0x3319, 0x62}, {0x331a, 0x62},
      {0x3340, 0x20}, {0x3341, 0x58}, {0x3342, 0x08},
      {0x3343, 0x21}, {0x3344, 0xbe}, {0x3345, 0xe0},
      {0x3346, 0xca}, {0x3347, 0xc6}, {0x3348, 0x04},
      {0x3349, 0x98}, {0x333F, 0x06}, {0x332e, 0x04},
      {0x332f, 0x05}, {0x3331, 0x03}, {0x302B, 0x6D},
      {0x308d, 0x04}, {0x3086, 0x03}, {0x3086, 0x00},
      {0x307d, 0x00}, {0x3085, 0x00}, {0x306c, 0x10},
      {0x307b, 0x40}, {0x361d, 0x50}, {0x3100, 0x02},
      {0x3301, 0xde}, {0x3304, 0x00}, {0x3400, 0x00},
      {0x3404, 0x00}, {0x3012, 0x10}, {0x3023, 0x06},
      {0x3026, 0x03}, {0x3027, 0x04}, {0x302a, 0x03},
      {0x302b, 0x10}, {0x3075, 0x24}, {0x300d, 0x01},
      {0x30d7, 0x90}, {0x3069, 0x04}, {0x303e, 0x00},
      {0x303f, 0xc0}, {0x3302, 0xef}, {0x335f, 0x34},
      {0x3360, 0x0c}, {0x3361, 0x04}, {0x3362, 0x34},
      {0x3363, 0x08}, {0x3364, 0x04}, {0x3403, 0x42},
      {0x3088, 0x04}, {0x3089, 0x00}, {0x308a, 0x03},
      {0x308b, 0x00}, {0x300e, 0x32}, {0x300f, 0x21},
      {0x3010, 0x20}, {0x3011, 0x01}, {0x304c, 0x82},
      {0x3302, 0xef}, {0x335f, 0x34}, {0x3360, 0x0c},
      {0x3361, 0x04}, {0x3362, 0x12}, {0x3363, 0x88},
      {0x3364, 0xe4}, {0x3403, 0x42}, {0x3088, 0x12},
      {0x3089, 0x80}, {0x308a, 0x01}, {0x308b, 0xe0},
      {0x304c, 0x85}, {0x300e, 0x39}, {0x300f, 0x21},
      {0x3011, 0x00}, {0x3010, 0x81}, {0x302e, 0x00},
      {0x302d, 0x00}, {0x3071, 0xeb}, {0x301C, 0x02}
};

#endif


#define OV3640_INIT_REGS	\
	(sizeof(ov3640_init_reg) / sizeof(ov3640_init_reg[0]))

/*
 * EV bias
 */

static const struct ov3640_reg ov3640_ev_m6[] = {
};

static const struct ov3640_reg ov3640_ev_m5[] = {
};

static const struct ov3640_reg ov3640_ev_m4[] = {
};

static const struct ov3640_reg ov3640_ev_m3[] = {
};

static const struct ov3640_reg ov3640_ev_m2[] = {
};

static const struct ov3640_reg ov3640_ev_m1[] = {
};

static const struct ov3640_reg ov3640_ev_default[] = {
};

static const struct ov3640_reg ov3640_ev_p1[] = {
};

static const struct ov3640_reg ov3640_ev_p2[] = {
};

static const struct ov3640_reg ov3640_ev_p3[] = {
};

static const struct ov3640_reg ov3640_ev_p4[] = {
};

static const struct ov3640_reg ov3640_ev_p5[] = {
};

static const struct ov3640_reg ov3640_ev_p6[] = {
};

/* Order of this array should be following the querymenu data */
static const unsigned char *ov3640_regs_ev_bias[] = {
	(unsigned char *)ov3640_ev_m6, (unsigned char *)ov3640_ev_m5,
	(unsigned char *)ov3640_ev_m4, (unsigned char *)ov3640_ev_m3,
	(unsigned char *)ov3640_ev_m2, (unsigned char *)ov3640_ev_m1,
	(unsigned char *)ov3640_ev_default, (unsigned char *)ov3640_ev_p1,
	(unsigned char *)ov3640_ev_p2, (unsigned char *)ov3640_ev_p3,
	(unsigned char *)ov3640_ev_p4, (unsigned char *)ov3640_ev_p5,
	(unsigned char *)ov3640_ev_p6,
};

/*
 * Auto White Balance configure
 */
static const struct ov3640_reg ov3640_awb_off[] = {
};

static const struct ov3640_reg ov3640_awb_on[] = {
};

static const unsigned char *ov3640_regs_awb_enable[] = {
	(unsigned char *)ov3640_awb_off,
	(unsigned char *)ov3640_awb_on,
};

/*
 * Manual White Balance (presets)
 */
static const struct ov3640_reg ov3640_wb_tungsten[] = {

};

static const struct ov3640_reg ov3640_wb_fluorescent[] = {

};

static const struct ov3640_reg ov3640_wb_sunny[] = {

};

static const struct ov3640_reg ov3640_wb_cloudy[] = {

};

/* Order of this array should be following the querymenu data */
static const unsigned char *ov3640_regs_wb_preset[] = {
	(unsigned char *)ov3640_wb_sunny,
	(unsigned char *)ov3640_wb_cloudy,
	(unsigned char *)ov3640_wb_tungsten,
	(unsigned char *)ov3640_wb_fluorescent,
};

/*
 * Color Effect (COLORFX)
 */
static const struct ov3640_reg ov3640_color_normal[] = {
};

static const struct ov3640_reg ov3640_color_monochrome[] = {
};

static const struct ov3640_reg ov3640_color_sepia[] = {
};

static const struct ov3640_reg ov3640_color_aqua[] = {
};

static const struct ov3640_reg ov3640_color_negative[] = {
};

static const struct ov3640_reg ov3640_color_sketch[] = {
};

/* Order of this array should be following the querymenu data */
static const unsigned char *ov3640_regs_color_effect[] = {
	(unsigned char *)ov3640_color_normal,
	(unsigned char *)ov3640_color_monochrome,
	(unsigned char *)ov3640_color_sepia,
	(unsigned char *)ov3640_color_aqua,
	(unsigned char *)ov3640_color_sketch,
	(unsigned char *)ov3640_color_negative,
};

/*
 * Contrast bias
 */
static const struct ov3640_reg ov3640_contrast_m2[] = {
};

static const struct ov3640_reg ov3640_contrast_m1[] = {
};

static const struct ov3640_reg ov3640_contrast_default[] = {
};

static const struct ov3640_reg ov3640_contrast_p1[] = {
};

static const struct ov3640_reg ov3640_contrast_p2[] = {
};

static const unsigned char *ov3640_regs_contrast_bias[] = {
	(unsigned char *)ov3640_contrast_m2,
	(unsigned char *)ov3640_contrast_m1,
	(unsigned char *)ov3640_contrast_default,
	(unsigned char *)ov3640_contrast_p1,
	(unsigned char *)ov3640_contrast_p2,
};

/*
 * Saturation bias
 */
static const struct ov3640_reg ov3640_saturation_m2[] = {
};

static const struct ov3640_reg ov3640_saturation_m1[] = {
};

static const struct ov3640_reg ov3640_saturation_default[] = {
};

static const struct ov3640_reg ov3640_saturation_p1[] = {
};

static const struct ov3640_reg ov3640_saturation_p2[] = {
};

static const unsigned char *ov3640_regs_saturation_bias[] = {
	(unsigned char *)ov3640_saturation_m2,
	(unsigned char *)ov3640_saturation_m1,
	(unsigned char *)ov3640_saturation_default,
	(unsigned char *)ov3640_saturation_p1,
	(unsigned char *)ov3640_saturation_p2,
};

/*
 * Sharpness bias
 */
static const struct ov3640_reg ov3640_sharpness_m2[] = {
};

static const struct ov3640_reg ov3640_sharpness_m1[] = {
};

static const struct ov3640_reg ov3640_sharpness_default[] = {
};

static const struct ov3640_reg ov3640_sharpness_p1[] = {
};

static const struct ov3640_reg ov3640_sharpness_p2[] = {
};

static const unsigned char *ov3640_regs_sharpness_bias[] = {
	(unsigned char *)ov3640_sharpness_m2,
	(unsigned char *)ov3640_sharpness_m1,
	(unsigned char *)ov3640_sharpness_default,
	(unsigned char *)ov3640_sharpness_p1,
	(unsigned char *)ov3640_sharpness_p2,
};

#endif


















